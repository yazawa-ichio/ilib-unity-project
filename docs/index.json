{
  "api/ILib.AssetBundles.NameSetter.ABNameSetterTools.html": {
    "href": "api/ILib.AssetBundles.NameSetter.ABNameSetterTools.html",
    "title": "Class ABNameSetterTools | Yazawa Ichio Unity Package Document",
    "keywords": "Class ABNameSetterTools Inheritance Object ABNameSetterTools Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax public static class ABNameSetterTools"
  },
  "api/ILib.AssetBundles.NameSetter.Serializer.html": {
    "href": "api/ILib.AssetBundles.NameSetter.Serializer.html",
    "title": "Class Serializer | Yazawa Ichio Unity Package Document",
    "keywords": "Class Serializer Inheritance Object Serializer Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax public static class Serializer Methods View Source Deserialize(SetterAsset, String) Declaration public static void Deserialize(SetterAsset asset, string text) Parameters Type Name Description SetterAsset asset String text View Source Deserialize(String) Declaration public static SetterAsset Deserialize(string path) Parameters Type Name Description String path Returns Type Description SetterAsset View Source Serialize(SetterAsset) Declaration public static string Serialize(SetterAsset asset) Parameters Type Name Description SetterAsset asset Returns Type Description String View Source Serialize(SetterAsset, String) Declaration public static void Serialize(SetterAsset asset, string path) Parameters Type Name Description SetterAsset asset String path"
  },
  "api/ILib.AssetBundles.NameSetter.SetterAssetImporterEditor.html": {
    "href": "api/ILib.AssetBundles.NameSetter.SetterAssetImporterEditor.html",
    "title": "Class SetterAssetImporterEditor | Yazawa Ichio Unity Package Document",
    "keywords": "Class SetterAssetImporterEditor Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.Editor UnityEditor.Experimental.AssetImporters.AssetImporterEditor UnityEditor.Experimental.AssetImporters.ScriptedImporterEditor SetterAssetImporterEditor Inherited Members UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnEnable() UnityEditor.Experimental.AssetImporters.AssetImporterEditor.OnDisable() UnityEditor.Experimental.AssetImporters.AssetImporterEditor.Awake() UnityEditor.Experimental.AssetImporters.AssetImporterEditor.ResetValues() UnityEditor.Experimental.AssetImporters.AssetImporterEditor.HasModified() UnityEditor.Experimental.AssetImporters.AssetImporterEditor.Apply() UnityEditor.Experimental.AssetImporters.AssetImporterEditor.ApplyAndImport() UnityEditor.Experimental.AssetImporters.AssetImporterEditor.RevertButton() UnityEditor.Experimental.AssetImporters.AssetImporterEditor.RevertButton(System.String) UnityEditor.Experimental.AssetImporters.AssetImporterEditor.ApplyButton() UnityEditor.Experimental.AssetImporters.AssetImporterEditor.ApplyButton(System.String) UnityEditor.Experimental.AssetImporters.AssetImporterEditor.ApplyRevertGUI() UnityEditor.Experimental.AssetImporters.AssetImporterEditor.assetTargets UnityEditor.Experimental.AssetImporters.AssetImporterEditor.assetTarget UnityEditor.Experimental.AssetImporters.AssetImporterEditor.assetSerializedObject UnityEditor.Experimental.AssetImporters.AssetImporterEditor.useAssetDrawPreview UnityEditor.Experimental.AssetImporters.AssetImporterEditor.showImportedObject UnityEditor.Editor.CreateEditorWithContext(UnityEngine.Object[], UnityEngine.Object) UnityEditor.Editor.CreateCachedEditorWithContext(UnityEngine.Object, UnityEngine.Object, System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateCachedEditorWithContext(UnityEngine.Object[], UnityEngine.Object, System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateCachedEditor(UnityEngine.Object, System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateCachedEditor(UnityEngine.Object[], System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateEditor(UnityEngine.Object) UnityEditor.Editor.CreateEditor(UnityEngine.Object, System.Type) UnityEditor.Editor.CreateEditor(UnityEngine.Object[]) UnityEditor.Editor.CreateEditor(UnityEngine.Object[], System.Type) UnityEditor.Editor.DrawPropertiesExcluding(UnityEditor.SerializedObject, System.String[]) UnityEditor.Editor.DrawDefaultInspector() UnityEditor.Editor.Repaint() UnityEditor.Editor.RequiresConstantRepaint() UnityEditor.Editor.DrawHeader() UnityEditor.Editor.OnHeaderGUI() UnityEditor.Editor.ShouldHideOpenButton() UnityEditor.Editor.HasPreviewGUI() UnityEditor.Editor.GetPreviewTitle() UnityEditor.Editor.RenderStaticPreview(System.String, UnityEngine.Object[], System.Int32, System.Int32) UnityEditor.Editor.OnPreviewGUI(UnityEngine.Rect, UnityEngine.GUIStyle) UnityEditor.Editor.OnInteractivePreviewGUI(UnityEngine.Rect, UnityEngine.GUIStyle) UnityEditor.Editor.OnPreviewSettings() UnityEditor.Editor.GetInfoString() UnityEditor.Editor.DrawPreview(UnityEngine.Rect) UnityEditor.Editor.ReloadPreviewInstances() UnityEditor.Editor.UseDefaultMargins() UnityEditor.Editor.Initialize(UnityEngine.Object[]) UnityEditor.Editor.MoveNextTarget() UnityEditor.Editor.ResetTarget() UnityEditor.Editor.CreateEditorWithContext(UnityEngine.Object[], UnityEngine.Object, System.Type) UnityEditor.Editor.target UnityEditor.Editor.targets UnityEditor.Editor.serializedObject UnityEditor.Editor.finishedDefaultHeaderGUI UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax [CustomEditor(typeof(SetterAssetImporter))] public class SetterAssetImporterEditor : ScriptedImporterEditor, IPreviewable, IToolModeOwner Methods View Source OnApplyRevertGUI() Declaration protected override bool OnApplyRevertGUI() Returns Type Description Boolean Overrides UnityEditor.Experimental.AssetImporters.ScriptedImporterEditor.OnApplyRevertGUI() View Source OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides UnityEditor.Experimental.AssetImporters.ScriptedImporterEditor.OnInspectorGUI()"
  },
  "api/ILib.AssetBundles.NetworkInitializer.html": {
    "href": "api/ILib.AssetBundles.NetworkInitializer.html",
    "title": "Class NetworkInitializer | Yazawa Ichio Unity Package Document",
    "keywords": "Class NetworkInitializer Inheritance Object Initializer NetworkInitializer Inherited Members Initializer.AddCompleteEvent(Action<IBundleData, Exception>) Initializer.Success(IBundleData) Initializer.Fail(Exception) Initializer.Load(String, String) Initializer.Download(String, String, String, Action) Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public class NetworkInitializer : Initializer Constructors View Source NetworkInitializer(String, String, String) Declaration public NetworkInitializer(string url, string hash, string assetName = \"AssetBundleManifest\") Parameters Type Name Description String url String hash String assetName Methods View Source Start() Declaration protected override void Start() Overrides Initializer.Start()"
  },
  "api/ILib.AssetBundles.NetworkLoadOperator.html": {
    "href": "api/ILib.AssetBundles.NetworkLoadOperator.html",
    "title": "Class NetworkLoadOperator | Yazawa Ichio Unity Package Document",
    "keywords": "Class NetworkLoadOperator Inheritance Object NetworkLoadOperator Implements ILoadOperator Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public class NetworkLoadOperator : ILoadOperator Constructors View Source NetworkLoadOperator(String, String, String, String, String) Declaration public NetworkLoadOperator(string url, string cache, string manifest, string version, string manifetAssetName = \"AssetBundleManifest\") Parameters Type Name Description String url String cache String manifest String version String manifetAssetName Methods View Source GetCacheRoot() Declaration public string GetCacheRoot() Returns Type Description String View Source Init() Declaration public Initializer Init() Returns Type Description Initializer View Source IsDownload(String, String) Declaration public bool IsDownload(string name, string hash) Parameters Type Name Description String name String hash Returns Type Description Boolean View Source Load(String, String) Declaration public LoadOperation Load(string name, string hash) Parameters Type Name Description String name String hash Returns Type Description LoadOperation View Source LoadPath(String, String) Declaration public string LoadPath(string name, string hash) Parameters Type Name Description String name String hash Returns Type Description String View Source RequestUrl(String, String) Declaration public string RequestUrl(string name, string hash) Parameters Type Name Description String name String hash Returns Type Description String Implements ILoadOperator"
  },
  "api/ILib.Audio.ICacheScope.html": {
    "href": "api/ILib.Audio.ICacheScope.html",
    "title": "Interface ICacheScope | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ICacheScope Inherited Members IDisposable.Dispose() Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public interface ICacheScope : IDisposable Properties View Source IsLoaded Declaration bool IsLoaded { get; } Property Value Type Description Boolean View Source IsSuccess Declaration bool IsSuccess { get; } Property Value Type Description Boolean Methods View Source ObserveLoad(Action<Boolean>) Declaration void ObserveLoad(Action<bool> onLoaded) Parameters Type Name Description Action < Boolean > onLoaded"
  },
  "api/ILib.Audio.IMusicPlayer-1.html": {
    "href": "api/ILib.Audio.IMusicPlayer-1.html",
    "title": "Interface IMusicPlayer<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IMusicPlayer<T> Inherited Members IDisposable.Dispose() Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public interface IMusicPlayer<T> : IDisposable Type Parameters Name Description T Properties View Source Current 現在のパラメーター Declaration T Current { get; } Property Value Type Description T View Source IsCacheInfoInStack Musicのスタック中は音声情報をキャッシュしておくか？ Declaration bool IsCacheInfoInStack { get; set; } Property Value Type Description Boolean View Source MaxPoolCount 音源の最大プール数 Declaration int MaxPoolCount { get; set; } Property Value Type Description Int32 Methods View Source Change(T, MusicPlayConfig, Boolean) 音声を切り替えます。 Declaration void Change(T prm, MusicPlayConfig config, bool clearStack = false) Parameters Type Name Description T prm MusicPlayConfig config Boolean clearStack View Source Change(T, Single, Boolean) 音声を切り替えます。 Declaration void Change(T prm, float time = 2F, bool clearStack = false) Parameters Type Name Description T prm Single time Boolean clearStack View Source ClearStack() スタックをすべてクリアします Declaration void ClearStack() View Source Pause(Single) 音声を一時停止します。 Declaration void Pause(float time = 0.3F) Parameters Type Name Description Single time View Source Pop(MusicPlayConfig, Boolean) 現在の音声を停止し スタックの音声に切り替えます。 startLastPositionを有効にするとスタックに積んだ時の再生位置で開始します Declaration void Pop(MusicPlayConfig config, bool startLastPosition = false) Parameters Type Name Description MusicPlayConfig config Boolean startLastPosition View Source Pop(Single, Boolean) 現在の音声を停止し スタックの音声に切り替えます。 startLastPositionを有効にするとスタックに積んだ時の再生位置で開始します Declaration void Pop(float time = 2F, bool startLastPosition = false) Parameters Type Name Description Single time Boolean startLastPosition View Source Push(T, MusicPlayConfig) 現在の音声をスタックに積み 音声を切り替えます。 Declaration void Push(T prm, MusicPlayConfig config) Parameters Type Name Description T prm MusicPlayConfig config View Source Push(T, Single) 現在の音声をスタックに積み 音声を切り替えます。 Declaration void Push(T prm, float time = 2F) Parameters Type Name Description T prm Single time View Source Resume(Single) 音声を一時停止を解除します。 Declaration void Resume(float time = 0.3F) Parameters Type Name Description Single time View Source Stop(Single) 音声を停止します Declaration void Stop(float time = 2F) Parameters Type Name Description Single time"
  },
  "api/ILib.Audio.IPlayingSoundContext.html": {
    "href": "api/ILib.Audio.IPlayingSoundContext.html",
    "title": "Interface IPlayingSoundContext | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IPlayingSoundContext 再生中のSEのコントローラーです。 キャッシュがなく遅延再生時でも再生開始時に設定が適応されます。 再生停止後は一切の操作が反映されなくなります。 Inherited Members IDisposable.Dispose() Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public interface IPlayingSoundContext : IDisposable Properties View Source Error 再生に失敗した場合のエラー情報です Declaration Exception Error { get; } Property Value Type Description Exception View Source IsLoading ローディング中もしくは再生待ち中です。 Declaration bool IsLoading { get; } Property Value Type Description Boolean View Source IsValid 有効かチェックします。 ローディングはtrueを返します。 Declaration bool IsValid { get; } Property Value Type Description Boolean View Source Loop ループフラグ デフォルト無効です Declaration bool Loop { get; set; } Property Value Type Description Boolean View Source Pause ポーズ状態 Declaration bool Pause { get; set; } Property Value Type Description Boolean View Source Pitch ピッチ SoundInfoのPitchに乗算した値が実際には使われます Declaration float Pitch { get; set; } Property Value Type Description Single View Source Volume 音量を設定します。 フェード中の場合、フェードは停止します。 Declaration float Volume { get; set; } Property Value Type Description Single Methods View Source Fade(Single, Single) 現在の音量から指定の音量にフェードさせます。 Declaration void Fade(float end, float time) Parameters Type Name Description Single end Single time View Source Fade(Single, Single, Single) 指定の音量から指定の音量にフェードさせます。 Declaration void Fade(float start, float end, float time) Parameters Type Name Description Single start Single end Single time View Source FadeIn(Single) 0音量からフェードインします。 Declaration void FadeIn(float time) Parameters Type Name Description Single time View Source FadeOut(Single) フェードアウトを行います。 操作後、他のフェード関数は無効になります。 Declaration void FadeOut(float time) Parameters Type Name Description Single time View Source Stop() 再生を即時停止します。 短いループSEはLoopをfalseにする。 長いSEはFadeOutを推奨します。 Declaration void Stop()"
  },
  "api/ILib.Audio.ISoundPlayer-1.html": {
    "href": "api/ILib.Audio.ISoundPlayer-1.html",
    "title": "Interface ISoundPlayer<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ISoundPlayer<T> サウンドプレイヤーです。 不要になった際はDisposeを実行してください。 Inherited Members IDisposable.Dispose() Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public interface ISoundPlayer<T> : IDisposable Type Parameters Name Description T Properties View Source IsAddCacheIfLoad キャッシュになく遅延ロードを行った際に ロードしたデータをキャッシュするか？ Declaration bool IsAddCacheIfLoad { get; set; } Property Value Type Description Boolean View Source IsCreateIfNotEnough 音源が不足していた際に、一時的に音源を追加作成するか？ Declaration bool IsCreateIfNotEnough { get; set; } Property Value Type Description Boolean View Source LoadTimeout キャッシュにない場合に遅延ロードをした際に 再生リクエストを破棄するタイムアウト時間です。 Declaration float LoadTimeout { get; set; } Property Value Type Description Single View Source MaxPoolCount 音源プールの最大数です。 この上限を超えた音源がプールに返却される場合破棄されます。 Declaration int MaxPoolCount { get; set; } Property Value Type Description Int32 Methods View Source AddCache(T, Action<Boolean, Exception>) キャッシュにサウンドを追加します。 この関数でロードした場合、参照カウントを持たないためRemoveCache実行時に破棄されます。 CreateCacheScopeで参照カウントがある場合は、参照カウントが0になるまで破棄されません。 Declaration void AddCache(T prm, Action<bool, Exception> onLoad) Parameters Type Name Description T prm Action < Boolean , Exception > onLoad View Source ClearCache(Boolean) forceフラグが無効の際は、CreateCacheScopeで参照カウントがある場合は破棄されません。 有効の際は参照カウントがあっても破棄されます。 Declaration void ClearCache(bool force = false) Parameters Type Name Description Boolean force View Source CreateCacheScope(T[]) 参照カウント方式でサウンド情報をキャッシュします。 解放する際は戻り値のDisposeを実行して下さい。 Declaration ICacheScope CreateCacheScope(T[] prms) Parameters Type Name Description T[] prms Returns Type Description ICacheScope View Source Play(T) サウンドを再生します。 キャッシュにある場合は即時、そうでない場合はロードしたのち再生されます。 フェードや音量は返り値を利用してください。 Declaration IPlayingSoundContext Play(T prm) Parameters Type Name Description T prm Returns Type Description IPlayingSoundContext View Source Play(SoundInfo) サウンド情報を直接渡して再生します。 フェードや音量は返り値を利用してください。 Declaration IPlayingSoundContext Play(SoundInfo info) Parameters Type Name Description SoundInfo info Returns Type Description IPlayingSoundContext View Source PlayOneShot(T) サウンドを再生します。 キャッシュにある場合は即時、そうでない場合はロードしたのち再生されます。 何も操作せず、サウンド情報のまま再生する場合に効率的です。 Declaration void PlayOneShot(T prm) Parameters Type Name Description T prm View Source PlayOneShot(SoundInfo) サウンド情報を直接渡して再生します。 何も操作せず、サウンド情報のまま再生する場合に効率的です。 Declaration void PlayOneShot(SoundInfo info) Parameters Type Name Description SoundInfo info View Source RemoveCache(T) キャッシュにサウンドを削除します。 CreateCacheScopeで参照カウントがある場合は、参照カウントが0になるまで破棄されません。 Declaration void RemoveCache(T prm) Parameters Type Name Description T prm View Source ReservePool(Int32) 音源のプールを指定分キャッシュします。 負の値の場合、MaxPoolCount分までキャッシュします。 Declaration void ReservePool(int count = -1) Parameters Type Name Description Int32 count"
  },
  "api/ILib.Audio.MusicPlayerConfig.html": {
    "href": "api/ILib.Audio.MusicPlayerConfig.html",
    "title": "Class MusicPlayerConfig | Yazawa Ichio Unity Package Document",
    "keywords": "Class MusicPlayerConfig Inheritance Object MusicPlayerConfig Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class MusicPlayerConfig Fields View Source IsCacheInfoInStack Musicのスタック中は音声情報をキャッシュしておくか？ Declaration public bool IsCacheInfoInStack Field Value Type Description Boolean View Source MaxPoolCount 音源の最大プール数 Declaration public int MaxPoolCount Field Value Type Description Int32"
  },
  "api/ILib.Audio.MusicPlayerImpl-1.html": {
    "href": "api/ILib.Audio.MusicPlayerImpl-1.html",
    "title": "Class MusicPlayerImpl<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class MusicPlayerImpl<T> ミュージックプレイヤーの実体です Inheritance Object MusicPlayerImpl<T> MusicPlayerImpl Implements IMusicPlayer <T> IDisposable Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class MusicPlayerImpl<T> : IMusicPlayer<T>, IDisposable Type Parameters Name Description T Constructors View Source MusicPlayerImpl(PlayingMusic, IMusicProvider<T>, MusicPlayerConfig) Declaration public MusicPlayerImpl(PlayingMusic playingMusic, IMusicProvider<T> provider, MusicPlayerConfig config = null) Parameters Type Name Description PlayingMusic playingMusic IMusicProvider <T> provider MusicPlayerConfig config Properties View Source Current Declaration public T Current { get; } Property Value Type Description T View Source IsCacheInfoInStack Declaration public bool IsCacheInfoInStack { get; set; } Property Value Type Description Boolean View Source MaxPoolCount Declaration public int MaxPoolCount { get; set; } Property Value Type Description Int32 Methods View Source Change(T, MusicPlayConfig, Boolean) Declaration public void Change(T prm, MusicPlayConfig config, bool clearStack = false) Parameters Type Name Description T prm MusicPlayConfig config Boolean clearStack View Source Change(T, Single, Boolean) Declaration public void Change(T prm, float time = 2F, bool clearStack = false) Parameters Type Name Description T prm Single time Boolean clearStack View Source ClearStack() Declaration public void ClearStack() View Source Dispose() Declaration public void Dispose() View Source Finalize() Declaration protected void Finalize() View Source Pause(Single) Declaration public void Pause(float time = 0.3F) Parameters Type Name Description Single time View Source Pop(MusicPlayConfig, Boolean) Declaration public void Pop(MusicPlayConfig config, bool startLastPosition = false) Parameters Type Name Description MusicPlayConfig config Boolean startLastPosition View Source Pop(Single, Boolean) Declaration public void Pop(float time = 2F, bool startLastPosition = false) Parameters Type Name Description Single time Boolean startLastPosition View Source Push(T, MusicPlayConfig) Declaration public void Push(T prm, MusicPlayConfig config) Parameters Type Name Description T prm MusicPlayConfig config View Source Push(T, Single) Declaration public void Push(T prm, float time = 2F) Parameters Type Name Description T prm Single time View Source Resume(Single) Declaration public void Resume(float time = 0.3F) Parameters Type Name Description Single time View Source Stop(Single) Declaration public void Stop(float time = 2F) Parameters Type Name Description Single time Implements IMusicPlayer<T> System.IDisposable"
  },
  "api/ILib.Audio.SoundData.html": {
    "href": "api/ILib.Audio.SoundData.html",
    "title": "Class SoundData | Yazawa Ichio Unity Package Document",
    "keywords": "Class SoundData Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject SoundData Inherited Members UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax [CreateAssetMenu(menuName = \"ILib/Audio/SoundData\")] public class SoundData : ScriptableObject Fields View Source Clip Declaration [Header(\"音源\")] public AudioClip Clip Field Value Type Description UnityEngine.AudioClip View Source ControlId Declaration [Header(\"再生管理用のID\")] public string ControlId Field Value Type Description String View Source ControlParam1 Declaration public float ControlParam1 Field Value Type Description Single View Source ControlParam2 Declaration public float ControlParam2 Field Value Type Description Single View Source ControlType Declaration [Header(\"再生管理の方式\")] public StartControl.Type ControlType Field Value Type Description StartControl.Type View Source Pitch Declaration [Header(\"ピッチ\")] public float Pitch Field Value Type Description Single View Source Volume Declaration [Header(\"音量\")] public float Volume Field Value Type Description Single Methods View Source CreateInfo() Declaration public SoundInfo CreateInfo() Returns Type Description SoundInfo"
  },
  "api/ILib.Debugs.AutoRegisters.DebugButtonAttribute.html": {
    "href": "api/ILib.Debugs.AutoRegisters.DebugButtonAttribute.html",
    "title": "Class DebugButtonAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugButtonAttribute Inheritance Object Attribute AutoRegisterAttribute DebugButtonAttribute Inherited Members AutoRegisterAttribute.Name AutoRegisterAttribute.Priority AutoRegisterAttribute.Category AutoRegisterAttribute.CategoryPriority AutoRegisterAttribute.Path Namespace : ILib.Debugs.AutoRegisters Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugButtonAttribute : AutoRegisterAttribute Constructors View Source DebugButtonAttribute(String) Declaration public DebugButtonAttribute(string name) Parameters Type Name Description String name"
  },
  "api/ILib.Debugs.IntSliderContent-1.html": {
    "href": "api/ILib.Debugs.IntSliderContent-1.html",
    "title": "Class IntSliderContent<TContext> | Yazawa Ichio Unity Package Document",
    "keywords": "Class IntSliderContent<TContext> Inheritance Object Content <TContext, DebugIntSliderItem > IntSliderContent<TContext> Inherited Members Content<TContext, DebugIntSliderItem>.Menu Content<TContext, DebugIntSliderItem>.Context Content<TContext, DebugIntSliderItem>.Priority Content<TContext, DebugIntSliderItem>.Path Content<TContext, DebugIntSliderItem>.Category Content<TContext, DebugIntSliderItem>.CategoryPriority Content<TContext, DebugIntSliderItem>.Widget Content<TContext, DebugIntSliderItem>.Register(DebugIntSliderItem) Content<TContext, DebugIntSliderItem>.Update() Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class IntSliderContent<TContext> : Content<TContext, DebugIntSliderItem>, IContent where TContext : class Type Parameters Name Description TContext Properties View Source Label Declaration protected abstract string Label { get; } Property Value Type Description String View Source Value Declaration protected abstract int Value { get; set; } Property Value Type Description Int32 Methods View Source Register(DebugIntSliderItem) Declaration protected override sealed void Register(DebugIntSliderItem widget) Parameters Type Name Description DebugIntSliderItem widget Overrides ILib.Debugs.Content<TContext, ILib.Debugs.Widgets.DebugIntSliderItem>.Register(ILib.Debugs.Widgets.DebugIntSliderItem)"
  },
  "api/ILib.Debugs.LabelContent-1.html": {
    "href": "api/ILib.Debugs.LabelContent-1.html",
    "title": "Class LabelContent<TContext> | Yazawa Ichio Unity Package Document",
    "keywords": "Class LabelContent<TContext> Inheritance Object Content <TContext, DebugLabelItem > LabelContent<TContext> Inherited Members Content<TContext, DebugLabelItem>.Menu Content<TContext, DebugLabelItem>.Context Content<TContext, DebugLabelItem>.Priority Content<TContext, DebugLabelItem>.Path Content<TContext, DebugLabelItem>.Category Content<TContext, DebugLabelItem>.CategoryPriority Content<TContext, DebugLabelItem>.Widget Content<TContext, DebugLabelItem>.Register(DebugLabelItem) Content<TContext, DebugLabelItem>.Update() Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class LabelContent<TContext> : Content<TContext, DebugLabelItem>, IContent where TContext : class Type Parameters Name Description TContext Properties View Source Label Declaration protected abstract string Label { get; } Property Value Type Description String Methods View Source Register(DebugLabelItem) Declaration protected override sealed void Register(DebugLabelItem widget) Parameters Type Name Description DebugLabelItem widget Overrides ILib.Debugs.Content<TContext, ILib.Debugs.Widgets.DebugLabelItem>.Register(ILib.Debugs.Widgets.DebugLabelItem) View Source Update() Declaration public override void Update() Overrides ILib.Debugs.Content<TContext, ILib.Debugs.Widgets.DebugLabelItem>.Update()"
  },
  "api/ILib.Debugs.Widgets.DebugItemTapHandler.Handler.html": {
    "href": "api/ILib.Debugs.Widgets.DebugItemTapHandler.Handler.html",
    "title": "Class DebugItemTapHandler.Handler | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugItemTapHandler.Handler Inheritance Object ConductorBase.Handler < DebugItemTapHandler > SkinIMGUIDrawer.IMGUIHandler < DebugItemTapHandler > DebugItemTapHandler.Handler Implements ConductorBase.IHandler <> Inherited Members SkinIMGUIDrawer.IMGUIHandler<DebugItemTapHandler>.GetStyle(SkinIMGUIDrawer, IScWidget, String) SkinIMGUIDrawer.IMGUIHandler<DebugItemTapHandler>.GetStyle(SkinIMGUIDrawer, IScWidget) SkinIMGUIDrawer.IMGUIHandler<DebugItemTapHandler>.GetStyle(String, SkinIMGUIDrawer, IScWidget) SkinIMGUIDrawer.IMGUIHandler<DebugItemTapHandler>.GetStyle(String, SkinIMGUIDrawer, IScWidget, String) SkinIMGUIDrawer.IMGUIHandler<DebugItemTapHandler>.CreateStyle(SkinIMGUIDrawer, IScWidget) SkinIMGUIDrawer.IMGUIHandler<DebugItemTapHandler>.CreateStyle(String, SkinIMGUIDrawer, IScWidget) SkinIMGUIDrawer.IMGUIHandler<DebugItemTapHandler>.DrawProgress(SkinIMGUIDrawer, ScWidget, Single, Single, Single) ConductorBase<SkinIMGUIDrawer>.Handler<DebugItemTapHandler>.Priority ConductorBase<SkinIMGUIDrawer>.Handler<DebugItemTapHandler>.Prepare(SkinIMGUIDrawer, DebugItemTapHandler) ConductorBase<SkinIMGUIDrawer>.Handler<DebugItemTapHandler>.Finish(SkinIMGUIDrawer, DebugItemTapHandler) Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class Handler : SkinIMGUIDrawer.IMGUIHandler<DebugItemTapHandler>, ConductorBase<SkinIMGUIDrawer>.IHandler Methods View Source Run(SkinIMGUIDrawer, DebugItemTapHandler) Declaration protected override void Run(SkinIMGUIDrawer context, DebugItemTapHandler widget) Parameters Type Name Description SkinIMGUIDrawer context DebugItemTapHandler widget Overrides ILib.ScWidgets.ConductorBase<ILib.ScWidgets.SkinIMGUIDrawer>.Handler<ILib.Debugs.Widgets.DebugItemTapHandler>.Run(ILib.ScWidgets.SkinIMGUIDrawer, ILib.Debugs.Widgets.DebugItemTapHandler) Implements ConductorBase<TContext>.IHandler"
  },
  "api/ILib.Debugs.Widgets.DebugItemTapHandler.html": {
    "href": "api/ILib.Debugs.Widgets.DebugItemTapHandler.html",
    "title": "Class DebugItemTapHandler | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugItemTapHandler Inheritance Object ScMinimumWidget DebugItemTapHandler Implements IScWidget Inherited Members ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugItemTapHandler : ScMinimumWidget, IScWidget Properties View Source OnTap Declaration public Action OnTap { set; } Property Value Type Description Action Implements IScWidget"
  },
  "api/ILib.Debugs.html": {
    "href": "api/ILib.Debugs.html",
    "title": "Namespace ILib.Debugs | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.Debugs Classes ButtonContent<TContext> CheckBoxContent<TContext> Content Content<TContext, UWidget> Contexts FloatFieldContent<TContext> FloatSliderContent<TContext> InputFieldContent<TContext> IntFieldContent<TContext> IntSliderContent<TContext> LabelContent<TContext> PageJumpContent<TContext> RadioButtonContent<TContext> ScDebugMenu ScDebugMenuEditor ToggleContent<TContext>"
  },
  "api/ILib.DispatcherExtensions.html": {
    "href": "api/ILib.DispatcherExtensions.html",
    "title": "Class DispatcherExtensions | Yazawa Ichio Unity Package Document",
    "keywords": "Class DispatcherExtensions Inheritance Object DispatcherExtensions Namespace : ILib Assembly : ILib.dll Syntax public static class DispatcherExtensions Methods View Source Broadcast(IHasDispatcher, Object) Declaration public static bool Broadcast(this IHasDispatcher self, object key) Parameters Type Name Description IHasDispatcher self Object key Returns Type Description Boolean View Source Broadcast<T>(IHasDispatcher, Object, T) Declaration public static bool Broadcast<T>(this IHasDispatcher self, object key, T prm) Parameters Type Name Description IHasDispatcher self Object key T prm Returns Type Description Boolean Type Parameters Name Description T View Source Message(IHasDispatcher, Object) Declaration public static bool Message(this IHasDispatcher self, object key) Parameters Type Name Description IHasDispatcher self Object key Returns Type Description Boolean View Source Message<T>(IHasDispatcher, Object, T) Declaration public static bool Message<T>(this IHasDispatcher self, object key, T prm) Parameters Type Name Description IHasDispatcher self Object key T prm Returns Type Description Boolean Type Parameters Name Description T"
  },
  "api/ILib.ITriggerAction.html": {
    "href": "api/ILib.ITriggerAction.html",
    "title": "Interface ITriggerAction | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ITriggerAction Inherited Members IDisposable.Dispose() IEnumerator.MoveNext() IEnumerator.Reset() IEnumerator.Current Namespace : ILib Assembly : ILib.dll Syntax public interface ITriggerAction : IDisposable, IEnumerator Properties View Source Canceled キャンセル済みか？ Declaration bool Canceled { get; } Property Value Type Description Boolean View Source Error 失敗時の値です。 Declaration Exception Error { get; } Property Value Type Description Exception View Source Fired 発火済みか？ Declaration bool Fired { get; } Property Value Type Description Boolean View Source OneShot 一度だけ発火するか？ Declaration bool OneShot { get; } Property Value Type Description Boolean Methods View Source Add(Action) 成功時のコールバックを追加します。 Declaration ITriggerAction Add(Action action) Parameters Type Name Description Action action Returns Type Description ITriggerAction View Source Cancel() キャンセルを行います。 以後、イベントの発火は出来なくなります。 Declaration void Cancel() View Source Clear() イベントをすべて解除します。 発火前のみ有効です。 Declaration void Clear() Events View Source OnCancel キャンセル時のコールバックです Declaration event Action OnCancel Event Type Type Description Action View Source OnComplete 完了時のコールバックです。 発火時はtrue、キャンセル時はfalseが返ります。 Declaration event Action<bool> OnComplete Event Type Type Description Action < Boolean > View Source OnFail 失敗時のコールバックです。 内部的にAddFail・RemoveFail関数が実行されます Declaration event Action<Exception> OnFail Event Type Type Description Action < Exception > Extension Methods TriggerExtensions.Select<T>(ITriggerAction, Func<T>, Boolean) TriggerExtensions.GetAwaiter(ITriggerAction)"
  },
  "api/ILib.Logger.Log.LogLevel.html": {
    "href": "api/ILib.Logger.Log.LogLevel.html",
    "title": "Enum Log.LogLevel | Yazawa Ichio Unity Package Document",
    "keywords": "Enum Log.LogLevel Namespace : ILib.Logger Assembly : ILib.dll Syntax public enum LogLevel Fields Name Description All Debug Error Exception Trace Warning"
  },
  "api/ILib.MVVM.Behaviors.PropertyChangedNotificator.html": {
    "href": "api/ILib.MVVM.Behaviors.PropertyChangedNotificator.html",
    "title": "Class PropertyChangedNotificator | Yazawa Ichio Unity Package Document",
    "keywords": "Class PropertyChangedNotificator Inheritance Object PropertyChangedNotificator Implements IBindable IViewElement Namespace : ILib.MVVM.Behaviors Assembly : IchioLib.MVVM.dll Syntax public class PropertyChangedNotificator : IBindable, IViewElement Constructors View Source PropertyChangedNotificator(String, Func<Boolean>) Declaration public PropertyChangedNotificator(string path, Func<bool> activeCheck) Parameters Type Name Description String path Func < Boolean > activeCheck View Source PropertyChangedNotificator(String, Object) Declaration public PropertyChangedNotificator(string path, object owner) Parameters Type Name Description String path Object owner View Source PropertyChangedNotificator(String, Object) Declaration public PropertyChangedNotificator(string path, Object owner) Parameters Type Name Description String path UnityEngine.Object owner Fields View Source m_Hash Declaration public int m_Hash Field Value Type Description Int32 Properties View Source IsActive Declaration public bool IsActive { get; } Property Value Type Description Boolean View Source Path Declaration public string Path { get; } Property Value Type Description String Methods View Source BindType() Declaration public Type BindType() Returns Type Description Type Events View Source OnChanged Declaration public event Action OnChanged Event Type Type Description Action Explicit Interface Implementations View Source IBindable.Bind(IBindingProperty) Declaration void IBindable.Bind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop View Source IBindable.TryUpdate() Declaration void IBindable.TryUpdate() View Source IBindable.Unbind(IBindingProperty) Declaration void IBindable.Unbind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop Implements IBindable IViewElement"
  },
  "api/ILib.MVVM.Behaviors.html": {
    "href": "api/ILib.MVVM.Behaviors.html",
    "title": "Namespace ILib.MVVM.Behaviors | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.MVVM.Behaviors Classes PropertyChangedNotificator PropertyChangedNotificator<T>"
  },
  "api/ILib.MVVM.BindableView.html": {
    "href": "api/ILib.MVVM.BindableView.html",
    "title": "Class BindableView | Yazawa Ichio Unity Package Document",
    "keywords": "Class BindableView Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour View BindableView Implements IView IBindable < IViewModel > IBindable IViewElement Inherited Members View.IView.Elements View.DataContext View.Prepare(Boolean) View.TryUpdate() View.Attach<T>(Action<T>) View.Attach(IViewModel) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class BindableView : View, IView, IBindable<IViewModel>, IBindable, IViewElement Fields View Source m_Hash Declaration protected int m_Hash Field Value Type Description Int32 Methods View Source BindType() Declaration public Type BindType() Returns Type Description Type View Source OnUnbind() Declaration protected virtual void OnUnbind() Explicit Interface Implementations View Source IBindable.Bind(IBindingProperty) Declaration void IBindable.Bind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop View Source IBindable.IsActive Declaration bool IBindable.IsActive { get; } Returns Type Description Boolean View Source IBindable.Path Declaration string IBindable.Path { get; } Returns Type Description String View Source IBindable.TryUpdate() Declaration void IBindable.TryUpdate() View Source IBindable.Unbind(IBindingProperty) Declaration void IBindable.Unbind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop View Source IBindable<IViewModel>.Bind(IBindingProperty<IViewModel>) Declaration void IBindable<IViewModel>.Bind(IBindingProperty<IViewModel> prop) Parameters Type Name Description IBindingProperty < IViewModel > prop Implements IView IBindable<T> IBindable IViewElement Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.MVVM.BindBase-1.html": {
    "href": "api/ILib.MVVM.BindBase-1.html",
    "title": "Class BindBase<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class BindBase<T> Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour BindBase<T> Implements IBindable <T> IBindable IViewElement Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public abstract class BindBase<T> : MonoBehaviour, IBindable<T>, IBindable, IViewElement Type Parameters Name Description T Fields View Source m_Hash Declaration protected int m_Hash Field Value Type Description Int32 Properties View Source IsActive Declaration public virtual bool IsActive { get; } Property Value Type Description Boolean View Source Path Declaration public string Path { get; } Property Value Type Description String Methods View Source BindType() Declaration public Type BindType() Returns Type Description Type View Source OnUnbind() Declaration protected virtual void OnUnbind() View Source Set(T, Boolean) Declaration protected void Set(T val, bool update = false) Parameters Type Name Description T val Boolean update View Source UpdateValue(T) Declaration protected abstract void UpdateValue(T val) Parameters Type Name Description T val Explicit Interface Implementations View Source IBindable.Bind(IBindingProperty) Declaration void IBindable.Bind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop View Source IBindable.TryUpdate() Declaration void IBindable.TryUpdate() View Source IBindable.Unbind(IBindingProperty) Declaration void IBindable.Unbind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop View Source IBindable<T>.Bind(IBindingProperty<T>) Declaration void IBindable<T>.Bind(IBindingProperty<T> prop) Parameters Type Name Description IBindingProperty <T> prop Implements IBindable<T> IBindable IViewElement Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.MVVM.CodeEmit.EmitterBase.html": {
    "href": "api/ILib.MVVM.CodeEmit.EmitterBase.html",
    "title": "Class EmitterBase | Yazawa Ichio Unity Package Document",
    "keywords": "Class EmitterBase Inheritance Object EmitterBase AppendEmitter AttributeEmitter ClassEmitter CodeEmitter DelegateEmitter FunctionEmitter MemberEmitter WriteLineEmitter Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public abstract class EmitterBase Methods View Source Emit(CodeWriter) Declaration public abstract void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer"
  },
  "api/ILib.MVVM.CodeEmit.FieldEmitter.html": {
    "href": "api/ILib.MVVM.CodeEmit.FieldEmitter.html",
    "title": "Class FieldEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class FieldEmitter Inheritance Object EmitterBase MemberEmitter FieldEmitter Inherited Members MemberEmitter.Summary MemberEmitter.Accessibility MemberEmitter.Attributes MemberEmitter.AddAttribute(String) MemberEmitter.Emit(CodeWriter) Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class FieldEmitter : MemberEmitter Fields View Source InitValue Declaration public string InitValue Field Value Type Description String View Source Name Declaration public string Name Field Value Type Description String View Source Type Declaration public string Type Field Value Type Description String Methods View Source EmitMember(CodeWriter) Declaration public override void EmitMember(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides MemberEmitter.EmitMember(CodeWriter)"
  },
  "api/ILib.MVVM.CodeEmit.FunctionEmitter.Argument.html": {
    "href": "api/ILib.MVVM.CodeEmit.FunctionEmitter.Argument.html",
    "title": "Class FunctionEmitter.Argument | Yazawa Ichio Unity Package Document",
    "keywords": "Class FunctionEmitter.Argument Inheritance Object FunctionEmitter.Argument Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class Argument Fields View Source InitValue Declaration public string InitValue Field Value Type Description String View Source Name Declaration public string Name Field Value Type Description String View Source Type Declaration public string Type Field Value Type Description String"
  },
  "api/ILib.MVVM.CodeEmit.FunctionEmitter.html": {
    "href": "api/ILib.MVVM.CodeEmit.FunctionEmitter.html",
    "title": "Class FunctionEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class FunctionEmitter Inheritance Object EmitterBase FunctionEmitter Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class FunctionEmitter : EmitterBase Fields View Source Accessibility Declaration public string Accessibility Field Value Type Description String View Source Args Declaration public List<FunctionEmitter.Argument> Args Field Value Type Description List < FunctionEmitter.Argument > View Source Attributes Declaration public List<AttributeEmitter> Attributes Field Value Type Description List < AttributeEmitter > View Source Emitters Declaration public List<EmitterBase> Emitters Field Value Type Description List < EmitterBase > View Source Name Declaration public string Name Field Value Type Description String View Source Return Declaration public string Return Field Value Type Description String View Source Summary Declaration public string Summary Field Value Type Description String Methods View Source AddArg(String, String, String) Declaration public void AddArg(string type, string name, string initValue = \"\") Parameters Type Name Description String type String name String initValue View Source Append(Action<CodeWriter>) Declaration public void Append(Action<CodeWriter> action) Parameters Type Name Description Action < CodeWriter > action View Source Append(String) Declaration public void Append(string message) Parameters Type Name Description String message View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter) View Source WriteLine(String) Declaration public void WriteLine(string line) Parameters Type Name Description String line"
  },
  "api/ILib.MVVM.EventArgument.html": {
    "href": "api/ILib.MVVM.EventArgument.html",
    "title": "Class EventArgument | Yazawa Ichio Unity Package Document",
    "keywords": "Class EventArgument Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour EventArgument EventArgument<T> Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public abstract class EventArgument : MonoBehaviour Methods View Source Do(String, IViewEventHandler) Declaration public abstract void Do(string name, IViewEventHandler handler) Parameters Type Name Description String name IViewEventHandler handler View Source GetEventType() Declaration public abstract Type GetEventType() Returns Type Description Type Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.MVVM.EventButton.html": {
    "href": "api/ILib.MVVM.EventButton.html",
    "title": "Class EventButton | Yazawa Ichio Unity Package Document",
    "keywords": "Class EventButton Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour EventButton Implements IViewEvent IViewElement Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class EventButton : MonoBehaviour, IViewEvent, IViewElement Properties View Source Name Declaration public string Name { get; } Property Value Type Description String Methods View Source EventType() Declaration public virtual Type EventType() Returns Type Description Type View Source OnClick() Declaration protected virtual void OnClick() Explicit Interface Implementations View Source IViewEvent.Bind(IViewEventHandler) Declaration void IViewEvent.Bind(IViewEventHandler handler) Parameters Type Name Description IViewEventHandler handler Implements IViewEvent IViewElement Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.MVVM.EventExtensions.html": {
    "href": "api/ILib.MVVM.EventExtensions.html",
    "title": "Class EventExtensions | Yazawa Ichio Unity Package Document",
    "keywords": "Class EventExtensions Inheritance Object EventExtensions Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public static class EventExtensions Methods View Source SubscribeViewEvent<T>(IViewModel, T, Action) Declaration public static void SubscribeViewEvent<T>(this IViewModel self, T key, Action onViewEvent) Parameters Type Name Description IViewModel self T key Action onViewEvent Type Parameters Name Description T View Source SubscribeViewEvent<T, U>(IViewModel, T, Action<U>) Declaration public static void SubscribeViewEvent<T, U>(this IViewModel self, T key, Action<U> onViewEvent) Parameters Type Name Description IViewModel self T key Action <U> onViewEvent Type Parameters Name Description T U View Source UnsubscribeViewEvent<T>(IViewModel, T, Action) Declaration public static void UnsubscribeViewEvent<T>(this IViewModel self, T key, Action onViewEvent) Parameters Type Name Description IViewModel self T key Action onViewEvent Type Parameters Name Description T View Source UnsubscribeViewEvent<T, U>(IViewModel, T, Action<U>) Declaration public static void UnsubscribeViewEvent<T, U>(this IViewModel self, T key, Action<U> onViewEvent) Parameters Type Name Description IViewModel self T key Action <U> onViewEvent Type Parameters Name Description T U"
  },
  "api/ILib.MVVM.EventKeyAttribute.html": {
    "href": "api/ILib.MVVM.EventKeyAttribute.html",
    "title": "Class EventKeyAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class EventKeyAttribute Inheritance Object Attribute EventKeyAttribute Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax [AttributeUsage(AttributeTargets.Enum)] public class EventKeyAttribute : Attribute"
  },
  "api/ILib.MVVM.ReactiveListProperty-1.html": {
    "href": "api/ILib.MVVM.ReactiveListProperty-1.html",
    "title": "Class ReactiveListProperty<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class ReactiveListProperty<T> Inheritance Object ReactiveListProperty<T> Implements IDisposable Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class ReactiveListProperty<T> : IDisposable Type Parameters Name Description T Constructors View Source ReactiveListProperty(String, IViewModel) Declaration public ReactiveListProperty(string path, IViewModel vm) Parameters Type Name Description String path IViewModel vm View Source ReactiveListProperty(String, IViewModel, List<T>) Declaration public ReactiveListProperty(string path, IViewModel vm, List<T> val) Parameters Type Name Description String path IViewModel vm List <T> val Fields View Source Path Declaration public readonly string Path Field Value Type Description String Properties View Source Item[Int32] Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T View Source Value Declaration public List<T> Value { set; } Property Value Type Description List <T> Methods View Source Add(T) Declaration public void Add(T val) Parameters Type Name Description T val View Source AddRange(IEnumerable<T>) Declaration public void AddRange(IEnumerable<T> collection) Parameters Type Name Description IEnumerable <T> collection View Source Clear() Declaration public void Clear() View Source Dispose() Declaration public void Dispose() View Source Remove(T) Declaration public void Remove(T val) Parameters Type Name Description T val View Source RemoveAll(Predicate<T>) Declaration public void RemoveAll(Predicate<T> match) Parameters Type Name Description Predicate <T> match View Source SetDirty() Declaration public void SetDirty() Events View Source OnChanged Declaration public event Action<List<T>> OnChanged Event Type Type Description Action < List <T>> Implements System.IDisposable"
  },
  "api/ILib.MVVM.ReactiveProperty-1.html": {
    "href": "api/ILib.MVVM.ReactiveProperty-1.html",
    "title": "Class ReactiveProperty<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class ReactiveProperty<T> Inheritance Object ReactiveProperty<T> Implements IDisposable Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class ReactiveProperty<T> : IDisposable Type Parameters Name Description T Constructors View Source ReactiveProperty(String, IViewModel) Declaration public ReactiveProperty(string path, IViewModel vm) Parameters Type Name Description String path IViewModel vm View Source ReactiveProperty(String, IViewModel, T) Declaration public ReactiveProperty(string path, IViewModel vm, T val) Parameters Type Name Description String path IViewModel vm T val Fields View Source Path Declaration public readonly string Path Field Value Type Description String Properties View Source Value Declaration public T Value { get; set; } Property Value Type Description T Methods View Source Dispose() Declaration public void Dispose() View Source SetDirty() Declaration public void SetDirty() Events View Source OnChanged Declaration public event Action<T> OnChanged Event Type Type Description Action <T> Operators View Source Explicit(ReactiveProperty<T> to T) Declaration public static explicit operator T(ReactiveProperty<T> property) Parameters Type Name Description ReactiveProperty <T> property Returns Type Description T Implements System.IDisposable"
  },
  "api/ILib.MVVM.SliderBind.html": {
    "href": "api/ILib.MVVM.SliderBind.html",
    "title": "Class SliderBind | Yazawa Ichio Unity Package Document",
    "keywords": "Class SliderBind Inheritance Object LightBind < Single , UnityEngine.UI.Slider > LightEventBind < Single , UnityEngine.UI.Slider > SliderBind Implements ILightBind IBindable < Single > IBindable IViewEvent IViewElement Inherited Members LightEventBind<Single, Slider>.IViewEvent.Name LightEventBind<Single, Slider>.IViewEvent.Bind(IViewEventHandler) LightEventBind<Single, Slider>.EventType() LightEventBind<Single, Slider>.Event() LightEventBind<Single, Slider>.Event(String) LightEventBind<Single, Slider>.Event(Single) LightEventBind<Single, Slider>.Event<T>(String, T) LightEventBind<Single, Slider>.Event(EventArgument) LightBind<Single, Slider>.Path LightBind<Single, Slider>.IsActive LightBind<Single, Slider>.m_Target LightBind<Single, Slider>.m_Hash LightBind<Single, Slider>.Value LightBind<Single, Slider>.BindType() LightBind<Single, Slider>.Set(Single, Boolean) LightBind<Single, Slider>.Init(Object, String) LightBind<Single, Slider>.OnInit() LightBind<Single, Slider>.IBindable.Bind(IBindingProperty) LightBind<Single, Slider>.IBindable<Single>.Bind(IBindingProperty<Single>) LightBind<Single, Slider>.IBindable.Unbind(IBindingProperty) LightBind<Single, Slider>.OnUnbind() LightBind<Single, Slider>.IBindable.TryUpdate() LightBind<Single, Slider>.UpdateValue(Single) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class SliderBind : LightEventBind<float, Slider>, ILightBind, IBindable<float>, IBindable, IViewEvent, IViewElement Methods View Source OnInit() Declaration protected override void OnInit() Overrides ILib.MVVM.LightBind<System.Single, UnityEngine.UI.Slider>.OnInit() View Source UpdateValue(Single) Declaration protected override void UpdateValue(float val) Parameters Type Name Description Single val Overrides ILib.MVVM.LightBind<System.Single, UnityEngine.UI.Slider>.UpdateValue(System.Single) Implements ILightBind IBindable<T> IBindable IViewEvent IViewElement"
  },
  "api/ILib.MVVM.StaticVM.Config.html": {
    "href": "api/ILib.MVVM.StaticVM.Config.html",
    "title": "Class Config | Yazawa Ichio Unity Package Document",
    "keywords": "Class Config Inheritance Object Config Namespace : ILib.MVVM.StaticVM Assembly : ILib.MVVM.StaticViewModel.dll Syntax [Serializable] public class Config Fields View Source CommandMode Declaration public bool CommandMode Field Value Type Description Boolean View Source CommandSuffix Declaration public string CommandSuffix Field Value Type Description String View Source EventValueSuffix Declaration public string EventValueSuffix Field Value Type Description String View Source NameSpace Declaration public string NameSpace Field Value Type Description String View Source NameSuffix Declaration public string NameSuffix Field Value Type Description String View Source Output Declaration public string Output Field Value Type Description String View Source ReactivePropertyMode Declaration public bool ReactivePropertyMode Field Value Type Description Boolean"
  },
  "api/ILib.Routine.html": {
    "href": "api/ILib.Routine.html",
    "title": "Class Routine | Yazawa Ichio Unity Package Document",
    "keywords": "Class Routine Unityのコルーチンのラッパーです。 完了と例外を取得できます。 Inheritance Object UnityEngine.CustomYieldInstruction RoutineBase Routine Implements IEnumerator IRoutine < Boolean > IHasTriggerAction < Boolean > IHasTriggerAction IRoutine IDisposable Inherited Members RoutineBase.IsRunning RoutineBase.Restartable RoutineBase.keepWaiting RoutineBase.Result(IHasResult) RoutineBase.Start() RoutineBase.Cancel() RoutineBase.IDisposable.Dispose() UnityEngine.CustomYieldInstruction.MoveNext() UnityEngine.CustomYieldInstruction.Reset() UnityEngine.CustomYieldInstruction.Current Namespace : ILib Assembly : ILib.dll Syntax public class Routine : RoutineBase, IEnumerator, IRoutine<bool>, IHasTriggerAction<bool>, IHasTriggerAction, IRoutine, IDisposable Constructors View Source Routine(MonoBehaviour, IEnumerator) Declaration public Routine(MonoBehaviour behaviour, IEnumerator routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour IEnumerator routine Properties View Source Action Declaration public ITriggerAction<bool> Action { get; } Property Value Type Description ITriggerAction < Boolean > Methods View Source Fail(Exception) Declaration protected override void Fail(Exception ex) Parameters Type Name Description Exception ex Overrides RoutineBase.Fail(Exception) View Source IterationTask(MonoBehaviour, IEnumerator) Unityのコルーチンのラッパーです。 IHasResult型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Declaration public static IterationTaskRoutine IterationTask(MonoBehaviour owner, IEnumerator routine) Parameters Type Name Description UnityEngine.MonoBehaviour owner IEnumerator routine Returns Type Description IterationTaskRoutine View Source IterationTask(MonoBehaviour, Func<IEnumerator>) Unityのコルーチンのラッパーです。 IHasResult型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Declaration public static IterationTaskRoutine IterationTask(MonoBehaviour owner, Func<IEnumerator> routine) Parameters Type Name Description UnityEngine.MonoBehaviour owner Func < IEnumerator > routine Returns Type Description IterationTaskRoutine View Source IterationTask<T>(MonoBehaviour, IEnumerator) Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Declaration public static IterationTaskRoutine<T> IterationTask<T>(MonoBehaviour owner, IEnumerator routine) Parameters Type Name Description UnityEngine.MonoBehaviour owner IEnumerator routine Returns Type Description IterationTaskRoutine <T> Type Parameters Name Description T View Source IterationTask<T>(MonoBehaviour, Func<IEnumerator>) Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Declaration public static IterationTaskRoutine<T> IterationTask<T>(MonoBehaviour owner, Func<IEnumerator> routine) Parameters Type Name Description UnityEngine.MonoBehaviour owner Func < IEnumerator > routine Returns Type Description IterationTaskRoutine <T> Type Parameters Name Description T View Source Repeat(MonoBehaviour, Func<IEnumerator>) Unityのコルーチンのラッパーです。 完了と例外を取得できます。 完了後に再度実行が可能です。 Declaration public static RepeatRoutine Repeat(MonoBehaviour owner, Func<IEnumerator> routine) Parameters Type Name Description UnityEngine.MonoBehaviour owner Func < IEnumerator > routine Returns Type Description RepeatRoutine View Source RepeatTask<T>(MonoBehaviour, Func<IEnumerator>) Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 完了後に再度実行が可能です。 Declaration public static RepeatTaskRoutine<T> RepeatTask<T>(MonoBehaviour owner, Func<IEnumerator> routine) Parameters Type Name Description UnityEngine.MonoBehaviour owner Func < IEnumerator > routine Returns Type Description RepeatTaskRoutine <T> Type Parameters Name Description T View Source Start(MonoBehaviour, IEnumerator) Unityのコルーチンのラッパーです。 完了と例外を取得できます。 Declaration public static Routine Start(MonoBehaviour owner, IEnumerator routine) Parameters Type Name Description UnityEngine.MonoBehaviour owner IEnumerator routine Returns Type Description Routine View Source Success() Declaration protected override void Success() Overrides RoutineBase.Success() View Source Task<T>(MonoBehaviour, IEnumerator) Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返された時点で完了扱いとなります。 Declaration public static TaskRoutine<T> Task<T>(MonoBehaviour owner, IEnumerator routine) Parameters Type Name Description UnityEngine.MonoBehaviour owner IEnumerator routine Returns Type Description TaskRoutine <T> Type Parameters Name Description T Explicit Interface Implementations View Source IHasTriggerAction.Action Declaration ITriggerAction IHasTriggerAction.Action { get; } Returns Type Description ITriggerAction Implements System.Collections.IEnumerator IRoutine<T> IHasTriggerAction<T> IHasTriggerAction IRoutine System.IDisposable Extension Methods TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T, Exception>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Trigger<T>) TriggerExtensions.AddFail<T>(IHasTriggerAction<T>, Action<Exception>) TriggerExtensions.Wait<T>(IHasTriggerAction<T>) TriggerExtensions.Select<T, U>(IHasTriggerAction<T>, Func<T, U>, Boolean) TriggerExtensions.Where<T>(IHasTriggerAction<T>, Func<T, Boolean>) TriggerExtensions.Any<T>(IHasTriggerAction<T>) TriggerExtensions.Then<T, U>(IHasTriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) TriggerExtensions.Then<T>(IHasTriggerAction<T>, Func<T, ITriggerAction>, Boolean) TriggerExtensions.Time<T>(IHasTriggerAction<T>, Single) TriggerExtensions.Realtime<T>(IHasTriggerAction<T>, Single) TriggerExtensions.GetAwaiter(IHasTriggerAction) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>, CancellationToken)"
  },
  "api/ILib.RoutineExtensions.html": {
    "href": "api/ILib.RoutineExtensions.html",
    "title": "Class RoutineExtensions | Yazawa Ichio Unity Package Document",
    "keywords": "Class RoutineExtensions Inheritance Object RoutineExtensions Namespace : ILib Assembly : ILib.dll Syntax public static class RoutineExtensions Methods View Source IterationTaskRoutine(IHasRoutineOwner, IEnumerator) Unityのコルーチンのラッパーです。 IHasResult型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Declaration public static IterationTaskRoutine IterationTaskRoutine(this IHasRoutineOwner self, IEnumerator routine) Parameters Type Name Description IHasRoutineOwner self IEnumerator routine Returns Type Description IterationTaskRoutine View Source IterationTaskRoutine(IHasRoutineOwner, Func<IEnumerator>) Unityのコルーチンのラッパーです。 IHasResult型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Declaration public static IterationTaskRoutine IterationTaskRoutine(this IHasRoutineOwner self, Func<IEnumerator> routine) Parameters Type Name Description IHasRoutineOwner self Func < IEnumerator > routine Returns Type Description IterationTaskRoutine View Source IterationTaskRoutine(MonoBehaviour, IEnumerator) Unityのコルーチンのラッパーです。 IHasResult型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Declaration public static IterationTaskRoutine IterationTaskRoutine(this MonoBehaviour behaviour, IEnumerator routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour IEnumerator routine Returns Type Description IterationTaskRoutine View Source IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) Unityのコルーチンのラッパーです。 IHasResult型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Declaration public static IterationTaskRoutine IterationTaskRoutine(this MonoBehaviour behaviour, Func<IEnumerator> routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour Func < IEnumerator > routine Returns Type Description IterationTaskRoutine View Source IterationTaskRoutine<T>(IHasRoutineOwner, IEnumerator) Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Declaration public static IterationTaskRoutine<T> IterationTaskRoutine<T>(this IHasRoutineOwner self, IEnumerator routine) Parameters Type Name Description IHasRoutineOwner self IEnumerator routine Returns Type Description IterationTaskRoutine <T> Type Parameters Name Description T View Source IterationTaskRoutine<T>(IHasRoutineOwner, Func<IEnumerator>) Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Declaration public static IterationTaskRoutine<T> IterationTaskRoutine<T>(this IHasRoutineOwner self, Func<IEnumerator> routine) Parameters Type Name Description IHasRoutineOwner self Func < IEnumerator > routine Returns Type Description IterationTaskRoutine <T> Type Parameters Name Description T View Source IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Declaration public static IterationTaskRoutine<T> IterationTaskRoutine<T>(this MonoBehaviour behaviour, IEnumerator routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour IEnumerator routine Returns Type Description IterationTaskRoutine <T> Type Parameters Name Description T View Source IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Declaration public static IterationTaskRoutine<T> IterationTaskRoutine<T>(this MonoBehaviour behaviour, Func<IEnumerator> routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour Func < IEnumerator > routine Returns Type Description IterationTaskRoutine <T> Type Parameters Name Description T View Source RepeatRoutine(IHasRoutineOwner, Func<IEnumerator>) Unityのコルーチンのラッパーです。 完了と例外を取得できます。 完了後に再度実行が可能です。 Declaration public static RepeatRoutine RepeatRoutine(this IHasRoutineOwner self, Func<IEnumerator> routine) Parameters Type Name Description IHasRoutineOwner self Func < IEnumerator > routine Returns Type Description RepeatRoutine View Source RepeatRoutine(MonoBehaviour, Func<IEnumerator>) Unityのコルーチンのラッパーです。 完了と例外を取得できます。 完了後に再度実行が可能です。 Declaration public static RepeatRoutine RepeatRoutine(this MonoBehaviour behaviour, Func<IEnumerator> routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour Func < IEnumerator > routine Returns Type Description RepeatRoutine View Source RepeatTaskRoutine<T>(IHasRoutineOwner, Func<IEnumerator>) Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 完了後に再度実行が可能です。 Declaration public static RepeatTaskRoutine<T> RepeatTaskRoutine<T>(this IHasRoutineOwner self, Func<IEnumerator> routine) Parameters Type Name Description IHasRoutineOwner self Func < IEnumerator > routine Returns Type Description RepeatTaskRoutine <T> Type Parameters Name Description T View Source RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 完了後に再度実行が可能です。 Declaration public static RepeatTaskRoutine<T> RepeatTaskRoutine<T>(this MonoBehaviour behaviour, Func<IEnumerator> routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour Func < IEnumerator > routine Returns Type Description RepeatTaskRoutine <T> Type Parameters Name Description T View Source Routine(IHasRoutineOwner, IEnumerator) Unityのコルーチンのラッパーです。 完了と例外を取得できます。 Declaration public static Routine Routine(this IHasRoutineOwner self, IEnumerator routine) Parameters Type Name Description IHasRoutineOwner self IEnumerator routine Returns Type Description Routine View Source Routine(MonoBehaviour, IEnumerator) Unityのコルーチンのラッパーです。 完了と例外を取得できます。 Declaration public static Routine Routine(this MonoBehaviour behaviour, IEnumerator routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour IEnumerator routine Returns Type Description Routine View Source TaskRoutine<T>(IHasRoutineOwner, IEnumerator) Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返された時点で完了扱いとなります。 Declaration public static TaskRoutine<T> TaskRoutine<T>(this IHasRoutineOwner self, IEnumerator routine) Parameters Type Name Description IHasRoutineOwner self IEnumerator routine Returns Type Description TaskRoutine <T> Type Parameters Name Description T View Source TaskRoutine<T>(MonoBehaviour, IEnumerator) Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返された時点で完了扱いとなります。 Declaration public static TaskRoutine<T> TaskRoutine<T>(this MonoBehaviour behaviour, IEnumerator routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour IEnumerator routine Returns Type Description TaskRoutine <T> Type Parameters Name Description T"
  },
  "api/ILib.Routines.IHasResult-1.html": {
    "href": "api/ILib.Routines.IHasResult-1.html",
    "title": "Interface IHasResult<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IHasResult<T> 指定の型の結果をRoutineで返す際に利用します。 Inherited Members IHasResult.Next Namespace : ILib.Routines Assembly : ILib.dll Syntax public interface IHasResult<T> : IHasResult Type Parameters Name Description T Properties View Source Value Declaration T Value { get; } Property Value Type Description T"
  },
  "api/ILib.Contents.IContentParam.html": {
    "href": "api/ILib.Contents.IContentParam.html",
    "title": "Interface IContentParam | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IContentParam Namespace : ILib.Contents Assembly : ILib.dll Syntax public interface IContentParam Methods View Source GetContentType() Declaration Type GetContentType() Returns Type Description Type"
  },
  "api/ILib.Contents.LockCollection-1.html": {
    "href": "api/ILib.Contents.LockCollection-1.html",
    "title": "Class LockCollection<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class LockCollection<T> 主にUnityのコルーチンでコレクションを扱うため 実行中の要素の追加・削除を安全に行うためのコレクション Inheritance Object LockCollection<T> ModuleCollection Implements IEnumerable <T> IEnumerable Namespace : ILib.Contents Assembly : ILib.dll Syntax public class LockCollection<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Properties View Source Count Declaration public int Count { get; } Property Value Type Description Int32 Methods View Source Add(T) Declaration public virtual void Add(T child) Parameters Type Name Description T child View Source Remove(T) Declaration public virtual void Remove(T child) Parameters Type Name Description T child Explicit Interface Implementations View Source IEnumerable<T>.GetEnumerator() Declaration IEnumerator<T> IEnumerable<T>.GetEnumerator() Returns Type Description IEnumerator <T> View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/ILib.Debugs.CheckBoxContent-1.html": {
    "href": "api/ILib.Debugs.CheckBoxContent-1.html",
    "title": "Class CheckBoxContent<TContext> | Yazawa Ichio Unity Package Document",
    "keywords": "Class CheckBoxContent<TContext> Inheritance Object Content <TContext, DebugCheckBoxItem > CheckBoxContent<TContext> Inherited Members Content<TContext, DebugCheckBoxItem>.Menu Content<TContext, DebugCheckBoxItem>.Context Content<TContext, DebugCheckBoxItem>.Priority Content<TContext, DebugCheckBoxItem>.Path Content<TContext, DebugCheckBoxItem>.Category Content<TContext, DebugCheckBoxItem>.CategoryPriority Content<TContext, DebugCheckBoxItem>.Widget Content<TContext, DebugCheckBoxItem>.Register(DebugCheckBoxItem) Content<TContext, DebugCheckBoxItem>.Update() Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class CheckBoxContent<TContext> : Content<TContext, DebugCheckBoxItem>, IContent where TContext : class Type Parameters Name Description TContext Properties View Source Label Declaration protected abstract string Label { get; } Property Value Type Description String View Source Value Declaration protected abstract bool Value { get; set; } Property Value Type Description Boolean Methods View Source OnUptete() Declaration protected virtual void OnUptete() View Source Register(DebugCheckBoxItem) Declaration protected override sealed void Register(DebugCheckBoxItem widget) Parameters Type Name Description DebugCheckBoxItem widget Overrides ILib.Debugs.Content<TContext, ILib.Debugs.Widgets.DebugCheckBoxItem>.Register(ILib.Debugs.Widgets.DebugCheckBoxItem) View Source Update() Declaration public override sealed void Update() Overrides ILib.Debugs.Content<TContext, ILib.Debugs.Widgets.DebugCheckBoxItem>.Update()"
  },
  "api/ILib.Debugs.Content-2.html": {
    "href": "api/ILib.Debugs.Content-2.html",
    "title": "Class Content<TContext, UWidget> | Yazawa Ichio Unity Package Document",
    "keywords": "Class Content<TContext, UWidget> Inheritance Object Content<TContext, UWidget> ButtonContent<TContext> CheckBoxContent<TContext> FloatFieldContent<TContext> FloatSliderContent<TContext> InputFieldContent<TContext> IntFieldContent<TContext> IntSliderContent<TContext> LabelContent<TContext> PageJumpContent<TContext> RadioButtonContent<TContext> ToggleContent<TContext> Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class Content<TContext, UWidget> : IContent where TContext : class where UWidget : IScWidget, new() Type Parameters Name Description TContext UWidget Properties View Source Category Declaration protected virtual string Category { get; } Property Value Type Description String View Source CategoryPriority Declaration protected virtual int CategoryPriority { get; } Property Value Type Description Int32 View Source Context Declaration public TContext Context { get; } Property Value Type Description TContext View Source Menu Declaration public ScDebugMenu Menu { get; } Property Value Type Description ScDebugMenu View Source Path Declaration protected virtual string Path { get; } Property Value Type Description String View Source Priority Declaration public virtual int Priority { get; } Property Value Type Description Int32 View Source Widget Declaration protected UWidget Widget { get; } Property Value Type Description UWidget Methods View Source Register(UWidget) Declaration protected abstract void Register(UWidget widget) Parameters Type Name Description UWidget widget View Source Update() Declaration public virtual void Update()"
  },
  "api/ILib.Debugs.Content.html": {
    "href": "api/ILib.Debugs.Content.html",
    "title": "Class Content | Yazawa Ichio Unity Package Document",
    "keywords": "Class Content Inheritance Object Content Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public static class Content"
  },
  "api/ILib.Debugs.Contexts.html": {
    "href": "api/ILib.Debugs.Contexts.html",
    "title": "Class Contexts | Yazawa Ichio Unity Package Document",
    "keywords": "Class Contexts Inheritance Object Contexts Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public class Contexts Methods View Source Bind<T>(T) Declaration public void Bind<T>(T obj) where T : class Parameters Type Name Description T obj Type Parameters Name Description T View Source Unbind<T>(T) Declaration public void Unbind<T>(T obj) where T : class Parameters Type Name Description T obj Type Parameters Name Description T"
  },
  "api/ILib.Debugs.Widgets.DebugInputFieldItemBase.html": {
    "href": "api/ILib.Debugs.Widgets.DebugInputFieldItemBase.html",
    "title": "Class DebugInputFieldItemBase | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugInputFieldItemBase Inheritance Object ScMinimumWidget DebugItemBase DebugInputFieldItemBase DebugInputFieldItem DebugValueFieldItem<T> Implements IScWidget Inherited Members DebugItemBase.Label DebugItemBase.LabelWeight DebugItemBase.ContentsWeight ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugInputFieldItemBase : DebugItemBase, IScWidget Fields View Source m_InputField Declaration protected ScInputField m_InputField Field Value Type Description ScInputField Properties View Source DefContentsWeight Declaration protected override int DefContentsWeight { get; } Property Value Type Description Int32 Overrides DebugItemBase.DefContentsWeight Methods View Source Create() Declaration protected override IScWidget Create() Returns Type Description IScWidget Overrides DebugItemBase.Create() View Source OnChangedInput(String) Declaration protected virtual void OnChangedInput(string val) Parameters Type Name Description String val Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.DebugIntFieldItem.html": {
    "href": "api/ILib.Debugs.Widgets.DebugIntFieldItem.html",
    "title": "Class DebugIntFieldItem | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugIntFieldItem Inheritance Object ScMinimumWidget DebugItemBase DebugInputFieldItemBase DebugValueFieldItem < Int32 > DebugIntFieldItem Implements IScWidget Inherited Members DebugValueFieldItem<Int32>.m_Value DebugValueFieldItem<Int32>.Value DebugValueFieldItem<Int32>.OnChanged DebugInputFieldItemBase.m_InputField DebugInputFieldItemBase.DefContentsWeight DebugInputFieldItemBase.Create() DebugItemBase.Label DebugItemBase.LabelWeight DebugItemBase.ContentsWeight ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugIntFieldItem : DebugValueFieldItem<int>, IScWidget Methods View Source OnChangedInput(String) Declaration protected override void OnChangedInput(string val) Parameters Type Name Description String val Overrides DebugInputFieldItemBase.OnChangedInput(String) Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.DebugIntSliderItem.html": {
    "href": "api/ILib.Debugs.Widgets.DebugIntSliderItem.html",
    "title": "Class DebugIntSliderItem | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugIntSliderItem Inheritance Object ScMinimumWidget DebugItemBase DebugSliderItemBase DebugIntSliderItem Implements IScWidget Inherited Members DebugSliderItemBase.m_ContentsSplitter DebugSliderItemBase.m_Slider DebugSliderItemBase.m_InputField DebugSliderItemBase.DefContentsWeight DebugSliderItemBase.InputWeight DebugSliderItemBase.SliderWeight DebugSliderItemBase.Create() DebugItemBase.Label DebugItemBase.LabelWeight DebugItemBase.ContentsWeight ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugIntSliderItem : DebugSliderItemBase, IScWidget Properties View Source MaxValue Declaration public int MaxValue { get; set; } Property Value Type Description Int32 View Source MinValue Declaration public int MinValue { get; set; } Property Value Type Description Int32 View Source OnChanged Declaration public Action<int> OnChanged { set; } Property Value Type Description Action < Int32 > View Source Value Declaration public int Value { get; set; } Property Value Type Description Int32 Methods View Source OnChange(Single) Declaration protected override sealed void OnChange(float val) Parameters Type Name Description Single val Overrides DebugSliderItemBase.OnChange(Single) View Source OnChange(String) Declaration protected override void OnChange(string val) Parameters Type Name Description String val Overrides DebugSliderItemBase.OnChange(String) Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.DebugItemBase.html": {
    "href": "api/ILib.Debugs.Widgets.DebugItemBase.html",
    "title": "Class DebugItemBase | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugItemBase Inheritance Object ScMinimumWidget DebugItemBase DebugButtonItem DebugInputFieldItemBase DebugMultiButtonItem DebugSliderItemBase Implements IScWidget Inherited Members ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class DebugItemBase : ScMinimumWidget, IScWidget Constructors View Source DebugItemBase() Declaration public DebugItemBase() Properties View Source ContentsWeight Declaration public int ContentsWeight { set; } Property Value Type Description Int32 View Source DefContentsWeight Declaration protected virtual int DefContentsWeight { get; } Property Value Type Description Int32 View Source Label Declaration public string Label { get; set; } Property Value Type Description String View Source LabelWeight Declaration protected virtual int LabelWeight { get; } Property Value Type Description Int32 Methods View Source Create() Declaration protected abstract IScWidget Create() Returns Type Description IScWidget Implements IScWidget"
  },
  "api/ILib.FSM.Provider.DirectTransitionAttribute.html": {
    "href": "api/ILib.FSM.Provider.DirectTransitionAttribute.html",
    "title": "Class DirectTransitionAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class DirectTransitionAttribute 自身への直接遷移イベントを登録します。 Inheritance Object Attribute DirectTransitionAttribute Namespace : ILib.FSM.Provider Assembly : ILib.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class DirectTransitionAttribute : Attribute Constructors View Source DirectTransitionAttribute(Int32) Declaration public DirectTransitionAttribute(int eventId) Parameters Type Name Description Int32 eventId View Source DirectTransitionAttribute(Object) Declaration public DirectTransitionAttribute(object eventId) Parameters Type Name Description Object eventId Properties View Source EventId Declaration public int EventId { get; } Property Value Type Description Int32 View Source ReTranstion Declaration public bool ReTranstion { get; set; } Property Value Type Description Boolean View Source UseInit Declaration public bool UseInit { get; set; } Property Value Type Description Boolean"
  },
  "api/ILib.FSM.Provider.InitStateAttribute.html": {
    "href": "api/ILib.FSM.Provider.InitStateAttribute.html",
    "title": "Class InitStateAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class InitStateAttribute 初期ステートに設定します。 Inheritance Object Attribute InitStateAttribute Namespace : ILib.FSM.Provider Assembly : ILib.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class InitStateAttribute : Attribute"
  },
  "api/ILib.FSM.Provider.StateMachineProvider-1.html": {
    "href": "api/ILib.FSM.Provider.StateMachineProvider-1.html",
    "title": "Class StateMachineProvider<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class StateMachineProvider<T> T型を継承するステートをノードとするステートマシーンを自動生成します。 初期ステートと遷移条件は属性によって決定されます。 小規模な重要ではないステートマシーンに利用してください。 Inheritance Object StateMachineProvider<T> Namespace : ILib.FSM.Provider Assembly : ILib.dll Syntax public static class StateMachineProvider<T> where T : State Type Parameters Name Description T Fields View Source MaxStateNum Declaration public static int MaxStateNum Field Value Type Description Int32 Methods View Source Create(Object, Object) ステートマシーンを作成します。 初期ステートを指定する場合はInitStateAttribute属性を使用してください。 Declaration public static StateMachine Create(object owner, object prm = null) Parameters Type Name Description Object owner Object prm Returns Type Description StateMachine View Source Init() ステート情報を初期化します。実行されていない場合、ステートマシーン作成時に自動で実行されます。 属性情報を取得するため、事前に実行しておくことでスパイクの原因を減らせます。 Declaration public static void Init()"
  },
  "api/ILib.FSM.Provider.TransitionToAttribute.html": {
    "href": "api/ILib.FSM.Provider.TransitionToAttribute.html",
    "title": "Class TransitionToAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class TransitionToAttribute 自身からの遷移イベントを登録します。 Inheritance Object Attribute TransitionToAttribute Namespace : ILib.FSM.Provider Assembly : ILib.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class TransitionToAttribute : Attribute Constructors View Source TransitionToAttribute(Int32, Type) Declaration public TransitionToAttribute(int eventId, Type toState) Parameters Type Name Description Int32 eventId Type toState View Source TransitionToAttribute(Object, Type) Declaration public TransitionToAttribute(object eventId, Type toState) Parameters Type Name Description Object eventId Type toState Properties View Source EventId Declaration public int EventId { get; } Property Value Type Description Int32 View Source ToState Declaration public Type ToState { get; } Property Value Type Description Type View Source UseInit Declaration public bool UseInit { get; set; } Property Value Type Description Boolean"
  },
  "api/ILib.MVVM.Binding.html": {
    "href": "api/ILib.MVVM.Binding.html",
    "title": "Class Binding | Yazawa Ichio Unity Package Document",
    "keywords": "Class Binding Inheritance Object Binding Implements IBinding IMultipleBindable IViewElement Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class Binding : IBinding, IMultipleBindable, IViewElement Methods View Source Bind(IViewEventHandler) Declaration public void Bind(IViewEventHandler handler) Parameters Type Name Description IViewEventHandler handler View Source Bind(String, IBindingProperty) Declaration public void Bind(string path, IBindingProperty prop) Parameters Type Name Description String path IBindingProperty prop View Source Init(IViewElement[]) Declaration public void Init(IViewElement[] elements) Parameters Type Name Description IViewElement [] elements View Source TryUpdate() Declaration public void TryUpdate() View Source Unbind(IViewEventHandler) Declaration public void Unbind(IViewEventHandler handler) Parameters Type Name Description IViewEventHandler handler View Source Unbind(String, IBindingProperty) Declaration public void Unbind(string path, IBindingProperty prop) Parameters Type Name Description String path IBindingProperty prop Explicit Interface Implementations View Source IMultipleBindable.GetBindables() Declaration IEnumerable<IBindable> IMultipleBindable.GetBindables() Returns Type Description IEnumerable < IBindable > View Source IMultipleBindable.OnPrepare() Declaration void IMultipleBindable.OnPrepare() Implements IBinding IMultipleBindable IViewElement"
  },
  "api/ILib.MVVM.BindingCommand-1.html": {
    "href": "api/ILib.MVVM.BindingCommand-1.html",
    "title": "Class BindingCommand<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class BindingCommand<T> Inheritance Object BindingCommand<T> Implements IDisposable Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class BindingCommand<T> : IDisposable Type Parameters Name Description T Constructors View Source BindingCommand(String, IViewModel) Declaration public BindingCommand(string name, IViewModel vm) Parameters Type Name Description String name IViewModel vm Fields View Source Name Declaration public readonly string Name Field Value Type Description String Properties View Source Value Declaration public ICommand<T> Value { get; set; } Property Value Type Description ICommand <T> Methods View Source Dispose() Declaration public void Dispose() View Source Get() Declaration public ICommand<T> Get() Returns Type Description ICommand <T> View Source Set(ICommand<T>) Declaration public void Set(ICommand<T> cmd) Parameters Type Name Description ICommand <T> cmd Implements System.IDisposable"
  },
  "api/ILib.MVVM.BindingCommand.html": {
    "href": "api/ILib.MVVM.BindingCommand.html",
    "title": "Class BindingCommand | Yazawa Ichio Unity Package Document",
    "keywords": "Class BindingCommand Inheritance Object BindingCommand Implements IDisposable Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class BindingCommand : IDisposable Constructors View Source BindingCommand(String, IViewModel) Declaration public BindingCommand(string name, IViewModel vm) Parameters Type Name Description String name IViewModel vm Fields View Source Name Declaration public readonly string Name Field Value Type Description String Properties View Source Value Declaration public ICommand Value { get; set; } Property Value Type Description ICommand Methods View Source Dispose() Declaration public void Dispose() View Source Get() Declaration public ICommand Get() Returns Type Description ICommand View Source Set(ICommand) Declaration public void Set(ICommand cmd) Parameters Type Name Description ICommand cmd Implements System.IDisposable"
  },
  "api/ILib.MVVM.BindingEventCollection.html": {
    "href": "api/ILib.MVVM.BindingEventCollection.html",
    "title": "Class BindingEventCollection | Yazawa Ichio Unity Package Document",
    "keywords": "Class BindingEventCollection Inheritance Object BindingEventCollection Implements IViewEventHandler IViewElement Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class BindingEventCollection : IViewEventHandler, IViewElement Methods View Source Add(String, Action) Declaration public void Add(string name, Action onViewEvent) Parameters Type Name Description String name Action onViewEvent View Source Add<T>(String, Action<T>) Declaration public void Add<T>(string name, Action<T> onViewEvent) Parameters Type Name Description String name Action <T> onViewEvent Type Parameters Name Description T View Source Invoke(String) Declaration public void Invoke(string name) Parameters Type Name Description String name View Source Invoke<T>(String, T) Declaration public void Invoke<T>(string name, T args) Parameters Type Name Description String name T args Type Parameters Name Description T View Source Remove(String, Action) Declaration public void Remove(string name, Action onViewEvent) Parameters Type Name Description String name Action onViewEvent View Source Remove<T>(String, Action<T>) Declaration public void Remove<T>(string name, Action<T> onViewEvent) Parameters Type Name Description String name Action <T> onViewEvent Type Parameters Name Description T Explicit Interface Implementations View Source IViewEventHandler.OnViewEvent(String) Declaration void IViewEventHandler.OnViewEvent(string name) Parameters Type Name Description String name View Source IViewEventHandler.OnViewEvent<T>(String, T) Declaration void IViewEventHandler.OnViewEvent<T>(string name, T args) Parameters Type Name Description String name T args Type Parameters Name Description T Implements IViewEventHandler IViewElement"
  },
  "api/ILib.MVVM.CodeEmit.LazyPropertyEmitter.html": {
    "href": "api/ILib.MVVM.CodeEmit.LazyPropertyEmitter.html",
    "title": "Class LazyPropertyEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class LazyPropertyEmitter Inheritance Object EmitterBase MemberEmitter LazyPropertyEmitter Inherited Members MemberEmitter.Summary MemberEmitter.Accessibility MemberEmitter.Attributes MemberEmitter.AddAttribute(String) MemberEmitter.Emit(CodeWriter) Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class LazyPropertyEmitter : MemberEmitter Fields View Source Create Declaration public string Create Field Value Type Description String View Source Name Declaration public string Name Field Value Type Description String View Source Type Declaration public string Type Field Value Type Description String Methods View Source EmitMember(CodeWriter) Declaration public override void EmitMember(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides MemberEmitter.EmitMember(CodeWriter)"
  },
  "api/ILib.MVVM.CodeEmit.MemberEmitter.html": {
    "href": "api/ILib.MVVM.CodeEmit.MemberEmitter.html",
    "title": "Class MemberEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class MemberEmitter Inheritance Object EmitterBase MemberEmitter FieldEmitter LazyPropertyEmitter PropertyEmitter ShortPropertyEmitter Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public abstract class MemberEmitter : EmitterBase Fields View Source Accessibility Declaration public string Accessibility Field Value Type Description String View Source Attributes Declaration public List<AttributeEmitter> Attributes Field Value Type Description List < AttributeEmitter > View Source Summary Declaration public string Summary Field Value Type Description String Methods View Source AddAttribute(String) Declaration public void AddAttribute(string attr) Parameters Type Name Description String attr View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter) View Source EmitMember(CodeWriter) Declaration public abstract void EmitMember(CodeWriter writer) Parameters Type Name Description CodeWriter writer"
  },
  "api/ILib.MVVM.CodeEmit.PropertyEmitter.html": {
    "href": "api/ILib.MVVM.CodeEmit.PropertyEmitter.html",
    "title": "Class PropertyEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class PropertyEmitter Inheritance Object EmitterBase MemberEmitter PropertyEmitter Inherited Members MemberEmitter.Summary MemberEmitter.Accessibility MemberEmitter.Attributes MemberEmitter.AddAttribute(String) MemberEmitter.Emit(CodeWriter) Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class PropertyEmitter : MemberEmitter Fields View Source Getter Declaration public EmitterBase Getter Field Value Type Description EmitterBase View Source Name Declaration public string Name Field Value Type Description String View Source Setter Declaration public EmitterBase Setter Field Value Type Description EmitterBase View Source Type Declaration public string Type Field Value Type Description String Methods View Source EmitMember(CodeWriter) Declaration public override void EmitMember(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides MemberEmitter.EmitMember(CodeWriter)"
  },
  "api/ILib.MVVM.CodeEmit.ShortPropertyEmitter.html": {
    "href": "api/ILib.MVVM.CodeEmit.ShortPropertyEmitter.html",
    "title": "Class ShortPropertyEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class ShortPropertyEmitter Inheritance Object EmitterBase MemberEmitter ShortPropertyEmitter Inherited Members MemberEmitter.Summary MemberEmitter.Accessibility MemberEmitter.Attributes MemberEmitter.AddAttribute(String) MemberEmitter.Emit(CodeWriter) Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class ShortPropertyEmitter : MemberEmitter Fields View Source InitValue Declaration public string InitValue Field Value Type Description String View Source Name Declaration public string Name Field Value Type Description String View Source SettterProtected Declaration public bool SettterProtected Field Value Type Description Boolean View Source Type Declaration public string Type Field Value Type Description String Methods View Source EmitMember(CodeWriter) Declaration public override void EmitMember(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides MemberEmitter.EmitMember(CodeWriter)"
  },
  "api/ILib.MVVM.EventKeyToStrConv.html": {
    "href": "api/ILib.MVVM.EventKeyToStrConv.html",
    "title": "Class EventKeyToStrConv | Yazawa Ichio Unity Package Document",
    "keywords": "Class EventKeyToStrConv Inheritance Object EventKeyToStrConv Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public static class EventKeyToStrConv Methods View Source ToStr<T>(T) Declaration public static string ToStr<T>(T key) Parameters Type Name Description T key Returns Type Description String Type Parameters Name Description T"
  },
  "api/ILib.MVVM.EventNameAttribute.html": {
    "href": "api/ILib.MVVM.EventNameAttribute.html",
    "title": "Class EventNameAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class EventNameAttribute Inheritance Object Attribute UnityEngine.PropertyAttribute EventNameAttribute Inherited Members UnityEngine.PropertyAttribute.order Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax [AttributeUsage(AttributeTargets.Field)] public class EventNameAttribute : PropertyAttribute"
  },
  "api/ILib.MVVM.GraphicColorArgument.html": {
    "href": "api/ILib.MVVM.GraphicColorArgument.html",
    "title": "Class GraphicColorArgument | Yazawa Ichio Unity Package Document",
    "keywords": "Class GraphicColorArgument Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour EventArgument EventArgument < UnityEngine.Color > GraphicColorArgument Inherited Members EventArgument<Color>.GetEventType() EventArgument<Color>.Do(String, IViewEventHandler) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class GraphicColorArgument : EventArgument<Color> Methods View Source GetValue() Declaration public override Color GetValue() Returns Type Description UnityEngine.Color Overrides ILib.MVVM.EventArgument<UnityEngine.Color>.GetValue() Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.MVVM.IBehavior.html": {
    "href": "api/ILib.MVVM.IBehavior.html",
    "title": "Interface IBehavior | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IBehavior Inherited Members IMultipleBindable.OnPrepare() IMultipleBindable.GetBindables() Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IBehavior : IMultipleBindable, IViewElement Properties View Source Messanger Declaration IMessenger Messanger { get; } Property Value Type Description IMessenger View Source MessangerPath Declaration string MessangerPath { get; } Property Value Type Description String"
  },
  "api/ILib.ScWidgets.ExtendSizeExtensions.html": {
    "href": "api/ILib.ScWidgets.ExtendSizeExtensions.html",
    "title": "Class ExtendSizeExtensions | Yazawa Ichio Unity Package Document",
    "keywords": "Class ExtendSizeExtensions Inheritance Object ExtendSizeExtensions Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public static class ExtendSizeExtensions Methods View Source GetFixedExtendSize(IScWidget, Vector2) Declaration public static Vector2 GetFixedExtendSize(this IScWidget self, Vector2 def) Parameters Type Name Description IScWidget self UnityEngine.Vector2 def Returns Type Description UnityEngine.Vector2 View Source GetFixedExtendSize(IScWidget, Vector2, Vector2) Declaration public static Vector2 GetFixedExtendSize(this IScWidget self, Vector2 def, Vector2 min) Parameters Type Name Description IScWidget self UnityEngine.Vector2 def UnityEngine.Vector2 min Returns Type Description UnityEngine.Vector2"
  },
  "api/ILib.ScWidgets.ExtendWidth.html": {
    "href": "api/ILib.ScWidgets.ExtendWidth.html",
    "title": "Class ExtendWidth | Yazawa Ichio Unity Package Document",
    "keywords": "Class ExtendWidth Inheritance Object ExtendWidth Implements IExtend Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ExtendWidth : IExtend Properties View Source Width Declaration public float Width { get; set; } Property Value Type Description Single Methods View Source Get(Single) Declaration public static ExtendWidth Get(float val) Parameters Type Name Description Single val Returns Type Description ExtendWidth Implements IExtend"
  },
  "api/ILib.ScWidgets.Extensions.html": {
    "href": "api/ILib.ScWidgets.Extensions.html",
    "title": "Class Extensions | Yazawa Ichio Unity Package Document",
    "keywords": "Class Extensions Inheritance Object Extensions Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public static class Extensions Methods View Source Reset(RectOffset) Declaration public static void Reset(this RectOffset self) Parameters Type Name Description UnityEngine.RectOffset self View Source Set(RectOffset, Int32, Int32, Int32, Int32) Declaration public static void Set(this RectOffset self, int left = 0, int right = 0, int top = 0, int bottom = 0) Parameters Type Name Description UnityEngine.RectOffset self Int32 left Int32 right Int32 top Int32 bottom View Source Set(RectOffset, Single, Single, Single, Single) Declaration public static void Set(this RectOffset self, float left = 0F, float right = 0F, float top = 0F, float bottom = 0F) Parameters Type Name Description UnityEngine.RectOffset self Single left Single right Single top Single bottom"
  },
  "api/ILib.ScWidgets.HorizontalStretchLayout.html": {
    "href": "api/ILib.ScWidgets.HorizontalStretchLayout.html",
    "title": "Class HorizontalStretchLayout | Yazawa Ichio Unity Package Document",
    "keywords": "Class HorizontalStretchLayout Inheritance Object LayoutBase HorizontalStretchLayout Implements ILayout IFixedHeight Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class HorizontalStretchLayout : LayoutBase, ILayout, IFixedHeight Properties View Source Anchor Declaration public LayoutAnchor Anchor { get; set; } Property Value Type Description LayoutAnchor View Source Height Declaration public float Height { get; set; } Property Value Type Description Single View Source Margin Declaration public Vector2 Margin { get; set; } Property Value Type Description UnityEngine.Vector2 View Source PosY Declaration public float PosY { get; set; } Property Value Type Description Single Methods View Source CalcRect(Rect) Declaration public override Rect CalcRect(Rect viewRect) Parameters Type Name Description UnityEngine.Rect viewRect Returns Type Description UnityEngine.Rect Overrides LayoutBase.CalcRect(Rect) Implements ILayout IFixedHeight"
  },
  "api/ILib.ScWidgets.IClipWidget.html": {
    "href": "api/ILib.ScWidgets.IClipWidget.html",
    "title": "Interface IClipWidget | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IClipWidget Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public interface IClipWidget Methods View Source GetClipRect() Declaration Rect GetClipRect() Returns Type Description UnityEngine.Rect"
  },
  "api/ILib.ScWidgets.IEntryEventCallback.html": {
    "href": "api/ILib.ScWidgets.IEntryEventCallback.html",
    "title": "Interface IEntryEventCallback | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IEntryEventCallback Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public interface IEntryEventCallback Methods View Source OnRegister(IScWidget) Declaration void OnRegister(IScWidget widget) Parameters Type Name Description IScWidget widget View Source OnRemove() Declaration void OnRemove()"
  },
  "api/ILib.ScWidgets.IExtend.html": {
    "href": "api/ILib.ScWidgets.IExtend.html",
    "title": "Interface IExtend | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IExtend Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public interface IExtend"
  },
  "api/ILib.ScWidgets.IExtendExtensions.html": {
    "href": "api/ILib.ScWidgets.IExtendExtensions.html",
    "title": "Class IExtendExtensions | Yazawa Ichio Unity Package Document",
    "keywords": "Class IExtendExtensions Inheritance Object IExtendExtensions Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public static class IExtendExtensions Methods View Source AddExtend<T>(IScWidget) Declaration public static T AddExtend<T>(this IScWidget self) where T : IExtend, new() Parameters Type Name Description IScWidget self Returns Type Description T Type Parameters Name Description T View Source AddExtend<T>(IScWidget, T) Declaration public static T AddExtend<T>(this IScWidget self, T extend) where T : IExtend Parameters Type Name Description IScWidget self T extend Returns Type Description T Type Parameters Name Description T View Source GetExtend<T>(IScWidget) Declaration public static T GetExtend<T>(this IScWidget self) where T : IExtend Parameters Type Name Description IScWidget self Returns Type Description T Type Parameters Name Description T View Source GetExtends<T>(IScWidget) Declaration public static IEnumerable<T> GetExtends<T>(this IScWidget self) where T : IExtend Parameters Type Name Description IScWidget self Returns Type Description IEnumerable <T> Type Parameters Name Description T View Source GetOrAddExtend<T>(IScWidget) Declaration public static T GetOrAddExtend<T>(this IScWidget self) where T : IExtend, new() Parameters Type Name Description IScWidget self Returns Type Description T Type Parameters Name Description T"
  },
  "api/ILib.ScWidgets.ScProgressBar.html": {
    "href": "api/ILib.ScWidgets.ScProgressBar.html",
    "title": "Class ScProgressBar | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScProgressBar Inheritance Object ScWidget ScGraphic ScProgressBar Implements IScWidget IScGraphic Inherited Members ScGraphic.Color ScGraphic.MaskColor ScGraphic.GetColor() ScGraphic.GetMaskColor() ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScProgressBar : ScGraphic, IScWidget, IScGraphic Properties View Source Bg Declaration public Sprite Bg { set; } Property Value Type Description UnityEngine.Sprite View Source BgWidget Declaration public IScWidget BgWidget { set; } Property Value Type Description IScWidget View Source Direction Declaration public Slider.Direction Direction { get; set; } Property Value Type Description UnityEngine.UI.Slider.Direction View Source Fill Declaration public Sprite Fill { set; } Property Value Type Description UnityEngine.Sprite View Source FillWidget Declaration public IScWidget FillWidget { set; } Property Value Type Description IScWidget View Source Knob Declaration public Sprite Knob { set; } Property Value Type Description UnityEngine.Sprite View Source KnobWidget Declaration public IScWidget KnobWidget { set; } Property Value Type Description IScWidget View Source Size Declaration public Vector2 Size { get; set; } Property Value Type Description UnityEngine.Vector2 View Source SyncSpriteSize Declaration public bool SyncSpriteSize { get; set; } Property Value Type Description Boolean View Source Value Declaration public float Value { get; set; } Property Value Type Description Single Methods View Source CalcLayout(Rect) Declaration public override void CalcLayout(Rect rect) Parameters Type Name Description UnityEngine.Rect rect Overrides ScWidget.CalcLayout(Rect) Implements IScWidget IScGraphic Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScRadioButton.IRoot.html": {
    "href": "api/ILib.ScWidgets.ScRadioButton.IRoot.html",
    "title": "Interface ScRadioButton.IRoot | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ScRadioButton.IRoot Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public interface IRoot Methods View Source IsSelect(ScRadioButton) Declaration bool IsSelect(ScRadioButton button) Parameters Type Name Description ScRadioButton button Returns Type Description Boolean View Source Register(ScRadioButton) Declaration void Register(ScRadioButton button) Parameters Type Name Description ScRadioButton button View Source Select(ScRadioButton) Declaration void Select(ScRadioButton button) Parameters Type Name Description ScRadioButton button"
  },
  "api/ILib.ScWidgets.ScRadioButton.SimpleRoot.html": {
    "href": "api/ILib.ScWidgets.ScRadioButton.SimpleRoot.html",
    "title": "Class ScRadioButton.SimpleRoot | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScRadioButton.SimpleRoot Inheritance Object ScRadioButton.SimpleRoot Implements ScRadioButton.IRoot Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class SimpleRoot : ScRadioButton.IRoot Properties View Source OnSelect Declaration public Action<ScRadioButton> OnSelect { set; } Property Value Type Description Action < ScRadioButton > Methods View Source IsSelect(ScRadioButton) Declaration public bool IsSelect(ScRadioButton button) Parameters Type Name Description ScRadioButton button Returns Type Description Boolean View Source Register(ScRadioButton) Declaration public void Register(ScRadioButton button) Parameters Type Name Description ScRadioButton button View Source Select(ScRadioButton) Declaration public void Select(ScRadioButton button) Parameters Type Name Description ScRadioButton button Implements ScRadioButton.IRoot"
  },
  "api/ILib.ScWidgets.ScRadioButton.html": {
    "href": "api/ILib.ScWidgets.ScRadioButton.html",
    "title": "Class ScRadioButton | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScRadioButton Inheritance Object ScWidget ScFunction ScRadioButton Implements IScWidget IFunction Inherited Members ScFunction.Interactable ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.GetMaskColor() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScRadioButton : ScFunction, IScWidget, IFunction Properties View Source Group Declaration public string Group { get; set; } Property Value Type Description String View Source OnChange Declaration public Action<bool> OnChange { set; } Property Value Type Description Action < Boolean > View Source Root Declaration public ScRadioButton.IRoot Root { get; set; } Property Value Type Description ScRadioButton.IRoot View Source Value Declaration public bool Value { get; set; } Property Value Type Description Boolean Methods View Source Clear() Declaration public void Clear() View Source Invoke() Declaration public void Invoke() View Source Select() Declaration public void Select() Implements IScWidget IFunction Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScRadioButtonRoot.html": {
    "href": "api/ILib.ScWidgets.ScRadioButtonRoot.html",
    "title": "Class ScRadioButtonRoot | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScRadioButtonRoot Inheritance Object ScWidget ScFunction ScRadioButtonRoot Implements IScWidget IFunction ScRadioButton.IRoot Inherited Members ScFunction.Interactable ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.GetMaskColor() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScRadioButtonRoot : ScFunction, IScWidget, IFunction, ScRadioButton.IRoot Properties View Source OnSelect Declaration public Action<ScRadioButton> OnSelect { set; } Property Value Type Description Action < ScRadioButton > Explicit Interface Implementations View Source ScRadioButton.IRoot.IsSelect(ScRadioButton) Declaration bool ScRadioButton.IRoot.IsSelect(ScRadioButton button) Parameters Type Name Description ScRadioButton button Returns Type Description Boolean View Source ScRadioButton.IRoot.Register(ScRadioButton) Declaration void ScRadioButton.IRoot.Register(ScRadioButton button) Parameters Type Name Description ScRadioButton button View Source ScRadioButton.IRoot.Select(ScRadioButton) Declaration void ScRadioButton.IRoot.Select(ScRadioButton button) Parameters Type Name Description ScRadioButton button Implements IScWidget IFunction ScRadioButton.IRoot Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScRatioSplitterBase.Entry.html": {
    "href": "api/ILib.ScWidgets.ScRatioSplitterBase.Entry.html",
    "title": "Class ScRatioSplitterBase.Entry | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScRatioSplitterBase.Entry Inheritance Object ScRatioSplitterBase.Entry Implements ScRatioSplitterBase.IEntry Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax protected class Entry : ScRatioSplitterBase.IEntry Properties View Source Weight Declaration public int Weight { get; set; } Property Value Type Description Int32 View Source Widget Declaration public IScWidget Widget { get; set; } Property Value Type Description IScWidget Implements ScRatioSplitterBase.IEntry"
  },
  "api/ILib.ScWidgets.ScRatioSplitterBase.IEntry.html": {
    "href": "api/ILib.ScWidgets.ScRatioSplitterBase.IEntry.html",
    "title": "Interface ScRatioSplitterBase.IEntry | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ScRatioSplitterBase.IEntry Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public interface IEntry Properties View Source Weight Declaration int Weight { get; set; } Property Value Type Description Int32"
  },
  "api/ILib.ScWidgets.ScRatioSplitterBase.html": {
    "href": "api/ILib.ScWidgets.ScRatioSplitterBase.html",
    "title": "Class ScRatioSplitterBase | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScRatioSplitterBase Inheritance Object ScMinimumWidget ScRatioSplitterBase ScHorizontalRatioSplitter ScVerticalRatioSplitter Implements IScWidget Inherited Members ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public abstract class ScRatioSplitterBase : ScMinimumWidget, IScWidget Fields View Source m_List Declaration protected List<ScRatioSplitterBase.Entry> m_List Field Value Type Description List < ScRatioSplitterBase.Entry > Methods View Source Clear() Declaration public void Clear() View Source Remove(IScWidget) Declaration public void Remove(IScWidget widget) Parameters Type Name Description IScWidget widget View Source Set(IScWidget, Int32) Declaration public ScRatioSplitterBase.IEntry Set(IScWidget widget, int weight) Parameters Type Name Description IScWidget widget Int32 weight Returns Type Description ScRatioSplitterBase.IEntry Implements IScWidget Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.UI.UITransition.Fade.html": {
    "href": "api/ILib.UI.UITransition.Fade.html",
    "title": "Class UITransition.Fade | Yazawa Ichio Unity Package Document",
    "keywords": "Class UITransition.Fade Inheritance Object UITransition.Fade Implements UITransition.IAnim Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax [Serializable] public class Fade : UITransition.IAnim Methods View Source Init() Declaration public void Init() View Source Run(MonoBehaviour, Boolean) Declaration public Task Run(MonoBehaviour owner, bool show) Parameters Type Name Description UnityEngine.MonoBehaviour owner Boolean show Returns Type Description Task Implements UITransition.IAnim"
  },
  "api/ILib.UI.UITransition.IAnim.html": {
    "href": "api/ILib.UI.UITransition.IAnim.html",
    "title": "Interface UITransition.IAnim | Yazawa Ichio Unity Package Document",
    "keywords": "Interface UITransition.IAnim Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public interface IAnim Methods View Source Init() Declaration void Init() View Source Run(MonoBehaviour, Boolean) Declaration Task Run(MonoBehaviour owner, bool show) Parameters Type Name Description UnityEngine.MonoBehaviour owner Boolean show Returns Type Description Task"
  },
  "api/ILib.Routines.IHasResult.html": {
    "href": "api/ILib.Routines.IHasResult.html",
    "title": "Interface IHasResult | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IHasResult Routineによる結果を渡す際に使用します。 Namespace : ILib.Routines Assembly : ILib.dll Syntax public interface IHasResult Properties View Source Next Declaration bool Next { get; } Property Value Type Description Boolean View Source Value Declaration object Value { get; } Property Value Type Description Object"
  },
  "api/ILib.ServInject.InjectAttribute.html": {
    "href": "api/ILib.ServInject.InjectAttribute.html",
    "title": "Class InjectAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class InjectAttribute Inheritance Object Attribute InjectAttribute Namespace : ILib.ServInject Assembly : ILib.ServInjector.dll Syntax [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property)] public class InjectAttribute : Attribute"
  },
  "api/ILib.ServInject.IServiceEventReceiver.html": {
    "href": "api/ILib.ServInject.IServiceEventReceiver.html",
    "title": "Interface IServiceEventReceiver | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IServiceEventReceiver Namespace : ILib.ServInject Assembly : ILib.ServInjector.dll Syntax public interface IServiceEventReceiver Methods View Source OnBind() Declaration void OnBind() View Source OnUnbind() Declaration void OnUnbind()"
  },
  "api/ILib.ServInject.Service-1.html": {
    "href": "api/ILib.ServInject.Service-1.html",
    "title": "Class Service<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class Service<T> Tにサービスとして登録するインタフェースを指定してください。 Inheritance Object Service<T> Implements IDisposable Namespace : ILib.ServInject Assembly : ILib.ServInjector.dll Syntax public abstract class Service<T> : IDisposable where T : class Type Parameters Name Description T Constructors View Source Service() Declaration public Service() Methods View Source Dispose() Declaration public void Dispose() View Source OnDispose() Declaration protected virtual void OnDispose() Implements System.IDisposable"
  },
  "api/ILib.ServInject.ServiceMonoBehaviour-1.html": {
    "href": "api/ILib.ServInject.ServiceMonoBehaviour-1.html",
    "title": "Class ServiceMonoBehaviour<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class ServiceMonoBehaviour<T> Tにサービスとして登録するインタフェースを指定してください。 Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour ServiceMonoBehaviour<T> Namespace : ILib.ServInject Assembly : ILib.ServInjector.dll Syntax public abstract class ServiceMonoBehaviour<T> : MonoBehaviour where T : class Type Parameters Name Description T Methods View Source OnAwake() Declaration protected virtual void OnAwake() View Source OnDestroy() Declaration protected void OnDestroy() View Source OnDestroyEvent() Declaration protected virtual void OnDestroyEvent() Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.UI.UITransition.html": {
    "href": "api/ILib.UI.UITransition.html",
    "title": "Class UITransition | Yazawa Ichio Unity Package Document",
    "keywords": "Class UITransition uGUIの機能を使った簡単なアニメーションの遷移の実装です。 Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour UITransition Implements ITransition Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public class UITransition : MonoBehaviour, ITransition Methods View Source Hide(Boolean) Declaration public Task Hide(bool close) Parameters Type Name Description Boolean close Returns Type Description Task View Source OnPreCreated() Declaration public void OnPreCreated() View Source Show(Boolean) Declaration public Task Show(bool open) Parameters Type Name Description Boolean open Returns Type Description Task Implements ITransition Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.UI.Util.html": {
    "href": "api/ILib.UI.Util.html",
    "title": "Class Util | Yazawa Ichio Unity Package Document",
    "keywords": "Class Util Inheritance Object Util Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public static class Util Properties View Source Successed Declaration public static Task<bool> Successed { get; } Property Value Type Description Task < Boolean >"
  },
  "api/ILib.UI.html": {
    "href": "api/ILib.UI.html",
    "title": "Namespace ILib.UI | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.UI Classes AnimatorTransition Animatorを利用した遷移処理です。 SHOW・HIDEステートの完了を検知して遷移します。 UIControl<TParam> UIの表示制御を行うクラスです。 UIController<TParam, UControl> UIの表示制御の基底クラスです。 Open・Change・Closeの操作を行えます。 実行中に非アクティブにするとコルーチンが停止するため正常に動かなくなります。 UIControlLog UIInstance UIのインスタンスを保持します UIQueue UIの表示をキュー制御で行います。現在のUIが閉じられるまで、次の表示リクエストは実行されません。 表示前に不要になったリクエストはキャンセルできます。 UIQueue<TParam, UControl> UIの表示をキュー制御で行います。現在のUIが閉じられるまで、次の表示リクエストは実行されません。 表示前に不要になったリクエストはキャンセルできます。 UIStack UIの表示をスタック制御で行います。 UIStack<TParam, UControl> UIの表示をスタック制御で行います。 UITransition uGUIの機能を使った簡単なアニメーションの遷移の実装です。 UITransition.Fade UITransition.Move Util Interfaces IControl UIの表示制御 IControl<TParam> IController IExecuteBack UIのバック処理 IQueueEntry UIQueueのリクエストです。 awaitした場合はCloseを待ちます IStackEntry UIStackのリクエストです。 Pushの完了を受け取れます。 ITransition アニメーションの遷移を行います。 UITransition.IAnim Enums UIControlLog.LogLevel"
  },
  "api/ILib.html": {
    "href": "api/ILib.html",
    "title": "Namespace ILib | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib Classes AsyncTrigger DispatcherExtensions IterationTaskRoutine Unityのコルーチンのラッパーです。 IHasResult型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 IterationTaskRoutine<T> Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 NoResultTaskRoutineException RepeatRoutine Unityのコルーチンのラッパーです。 完了と例外を取得できます。 完了後に再度実行が可能です。 RepeatTaskRoutine<T> Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 完了後に再度実行が可能です。 Routine Unityのコルーチンのラッパーです。 完了と例外を取得できます。 RoutineExtensions TaskRoutine<T> Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返された時点で完了扱いとなります。 Trigger Trigger<T> イベントの発火を制御するクラスです。 イベントは一度のみ実行と、連続して実行のどちらかを選択して生成します。 発火時の処理はアクションを通して実装します。 TriggerAction<T> イベントの発火時のアクションを登録します TriggerExtensions Structs TriggerActionAwaiter TriggerActionAwaiter<T> Interfaces IHasRoutineOwner IHasTriggerAction IHasTriggerAction<T> トリガーに対するアクションを保持することを保証するクラスです。 拡張メソッドでアクションと同等の機能を提供します。 IRoutine IRoutine<T> ITriggerAction ITriggerAction<T>"
  },
  "api/ILib.AssetBundles.BundleData.html": {
    "href": "api/ILib.AssetBundles.BundleData.html",
    "title": "Class BundleData | Yazawa Ichio Unity Package Document",
    "keywords": "Class BundleData Inheritance Object BundleData Implements IBundleData Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public class BundleData : IBundleData Constructors View Source BundleData(AssetBundleManifest) Declaration public BundleData(AssetBundleManifest manifest) Parameters Type Name Description UnityEngine.AssetBundleManifest manifest Methods View Source GetAllDepends(String, out String[]) Declaration public int GetAllDepends(string name, out string[] deps) Parameters Type Name Description String name String [] deps Returns Type Description Int32 View Source GetAllNames() Declaration public string[] GetAllNames() Returns Type Description String [] View Source GetBundleNames(String) Declaration public IEnumerable<string> GetBundleNames(string tag) Parameters Type Name Description String tag Returns Type Description IEnumerable < String > View Source GetCRC(String) Declaration public uint GetCRC(string name) Parameters Type Name Description String name Returns Type Description UInt32 View Source GetHash(String) Declaration public string GetHash(string name) Parameters Type Name Description String name Returns Type Description String View Source GetReference(String) Declaration public (string bundleName, string assetName)GetReference(string id) Parameters Type Name Description String id Returns Type Description ValueTuple < String , String > View Source GetSize(String) Declaration public long GetSize(string name) Parameters Type Name Description String name Returns Type Description Int64 Implements IBundleData"
  },
  "api/ILib.AssetBundles.ExManifest.Setting.html": {
    "href": "api/ILib.AssetBundles.ExManifest.Setting.html",
    "title": "Class Setting | Yazawa Ichio Unity Package Document",
    "keywords": "Class Setting Inheritance Object Setting Namespace : ILib.AssetBundles.ExManifest Assembly : ILib.AssetBundles.ExManifest.Editor.dll Syntax public class Setting Fields View Source BuildTarget Declaration public BuildTarget BuildTarget Field Value Type Description UnityEditor.BuildTarget View Source DefaultOptions Declaration public static readonly BuildAssetBundleOptions DefaultOptions Field Value Type Description UnityEditor.BuildAssetBundleOptions View Source IgnoreCacheManifest Declaration public bool IgnoreCacheManifest Field Value Type Description Boolean View Source ManifestAssetName Declaration public string ManifestAssetName Field Value Type Description String View Source ManifestAssetRootDir Declaration public string ManifestAssetRootDir Field Value Type Description String View Source ManifestBundleName Declaration public string ManifestBundleName Field Value Type Description String View Source Options Declaration public BuildAssetBundleOptions Options Field Value Type Description UnityEditor.BuildAssetBundleOptions View Source OutputPath Declaration public string OutputPath Field Value Type Description String Methods View Source CreateDefault(BuildTarget) Declaration public static Setting CreateDefault(BuildTarget target) Parameters Type Name Description UnityEditor.BuildTarget target Returns Type Description Setting"
  },
  "api/ILib.AssetBundles.ExManifest.TagInfo.html": {
    "href": "api/ILib.AssetBundles.ExManifest.TagInfo.html",
    "title": "Class TagInfo | Yazawa Ichio Unity Package Document",
    "keywords": "Class TagInfo Inheritance Object TagInfo Namespace : ILib.AssetBundles.ExManifest Assembly : ILib.AssetBundles.ExManifest.dll Syntax [Serializable] public class TagInfo Fields View Source Names Declaration public string[] Names Field Value Type Description String []"
  },
  "api/ILib.AssetBundles.ExManifest.Tools.ITagCollector.html": {
    "href": "api/ILib.AssetBundles.ExManifest.Tools.ITagCollector.html",
    "title": "Interface ITagCollector | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ITagCollector Namespace : ILib.AssetBundles.ExManifest.Tools Assembly : ILib.AssetBundles.ExManifest.Tools.dll Syntax public interface ITagCollector Methods View Source GetTags(String, String[]) Declaration IEnumerable<string> GetTags(string bundleName, string[] paths) Parameters Type Name Description String bundleName String [] paths Returns Type Description IEnumerable < String >"
  },
  "api/ILib.Audio.MusicData.html": {
    "href": "api/ILib.Audio.MusicData.html",
    "title": "Class MusicData | Yazawa Ichio Unity Package Document",
    "keywords": "Class MusicData Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject MusicData Inherited Members UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax [CreateAssetMenu(menuName = \"ILib/Audio/MusicData\")] public class MusicData : ScriptableObject Fields View Source Clip Declaration public AudioClip Clip Field Value Type Description UnityEngine.AudioClip View Source Group Declaration public string Group Field Value Type Description String View Source Pitch Declaration public float Pitch Field Value Type Description Single View Source Volume Declaration public float Volume Field Value Type Description Single Methods View Source CreateMusic(Func<String, AudioMixerGroup>) Declaration public MusicInfo CreateMusic(Func<string, AudioMixerGroup> getGroup = null) Parameters Type Name Description Func < String , UnityEngine.Audio.AudioMixerGroup > getGroup Returns Type Description MusicInfo"
  },
  "api/ILib.Audio.MusicPlayConfig.html": {
    "href": "api/ILib.Audio.MusicPlayConfig.html",
    "title": "Struct MusicPlayConfig | Yazawa Ichio Unity Package Document",
    "keywords": "Struct MusicPlayConfig Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public struct MusicPlayConfig Fields View Source FadeInTime フェードイン時間です Declaration public float FadeInTime Field Value Type Description Single View Source FadeOutTime フェードアウト時間です Declaration public float FadeOutTime Field Value Type Description Single View Source IsOverrideEqualParam 同一パラメーターの場合、上書せず音声を継続させます Declaration public bool IsOverrideEqualParam Field Value Type Description Boolean View Source NoLoop ループを無効にします Declaration public bool NoLoop Field Value Type Description Boolean View Source SkipLoadWait ロード待ちを無視して遷移処理を走らせます Declaration public bool SkipLoadWait Field Value Type Description Boolean Methods View Source Get(Single) Declaration public static MusicPlayConfig Get(float time) Parameters Type Name Description Single time Returns Type Description MusicPlayConfig"
  },
  "api/ILib.Audio.PlayingMusic.html": {
    "href": "api/ILib.Audio.PlayingMusic.html",
    "title": "Class PlayingMusic | Yazawa Ichio Unity Package Document",
    "keywords": "Class PlayingMusic Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour PlayingMusic Implements IDisposable Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax [AddComponentMenu(\"\")] public class PlayingMusic : MonoBehaviour, IDisposable Properties View Source MaxPoolCount Declaration public int MaxPoolCount { get; set; } Property Value Type Description Int32 Methods View Source Dispose() Declaration public void Dispose() Implements System.IDisposable Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.Audio.SoundControl.html": {
    "href": "api/ILib.Audio.SoundControl.html",
    "title": "Class SoundControl | Yazawa Ichio Unity Package Document",
    "keywords": "Class SoundControl オーディオソース等のを必要なゲームオブジェクトを確保し管理する用のクラスです。 使用しているプレイヤーが破棄されたときに自動的に削除されます。 また、Release関数を呼ぶと生成したすべてのプールを強制的に破棄します。 Inheritance Object SoundControl Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public static class SoundControl Properties View Source SharedPlayingList Declaration public static PlayingList SharedPlayingList { get; } Property Value Type Description PlayingList Methods View Source CreatePlayer(IMusicProvider, MusicPlayerConfig) 音声プレイヤーを作成します。 Declaration public static IMusicPlayer CreatePlayer(IMusicProvider provider, MusicPlayerConfig config = null) Parameters Type Name Description IMusicProvider provider MusicPlayerConfig config Returns Type Description IMusicPlayer View Source CreatePlayer(ISoundProvider<String>, SoundPlayerConfig) サウンドプレイヤーを作成します。 設定情報がnullの場合は共有リストを使用します。 Declaration public static ISoundPlayer CreatePlayer(ISoundProvider<string> provider, SoundPlayerConfig config = null) Parameters Type Name Description ISoundProvider < String > provider SoundPlayerConfig config Returns Type Description ISoundPlayer View Source CreatePlayer<T>(IMusicProvider<T>, MusicPlayerConfig) 音声プレイヤーを作成します。 Declaration public static IMusicPlayer<T> CreatePlayer<T>(IMusicProvider<T> provider, MusicPlayerConfig config = null) Parameters Type Name Description IMusicProvider <T> provider MusicPlayerConfig config Returns Type Description IMusicPlayer <T> Type Parameters Name Description T View Source CreatePlayer<T>(ISoundProvider<T>, SoundPlayerConfig) サウンドプレイヤーを作成します。 設定情報がnullの場合は共有リストを使用します。 Declaration public static ISoundPlayer<T> CreatePlayer<T>(ISoundProvider<T> provider, SoundPlayerConfig config = null) Parameters Type Name Description ISoundProvider <T> provider SoundPlayerConfig config Returns Type Description ISoundPlayer <T> Type Parameters Name Description T View Source CreatePlayingList(String) 再生リストを作成します。 デフォルトの共有リスト以外で、プレイヤーの再生リストを共有する際に利用します。 Declaration public static PlayingList CreatePlayingList(string name) Parameters Type Name Description String name Returns Type Description PlayingList View Source CreatePlayingMusic(String) 音声リストを作成します。 Declaration public static PlayingMusic CreatePlayingMusic(string name) Parameters Type Name Description String name Returns Type Description PlayingMusic View Source CreateRoot(String) Declaration public static GameObject CreateRoot(string name) Parameters Type Name Description String name Returns Type Description UnityEngine.GameObject View Source Initialize() プールをのルートオブジェクトを初期化します。 この処理は手動で実行しなくても自動で実行されます。 Declaration public static void Initialize() View Source Release() 管理しているオブジェクトを破棄します。 Declaration public static void Release()"
  },
  "api/ILib.Audio.SoundManagement.ConfigAsset.MusicConfig.html": {
    "href": "api/ILib.Audio.SoundManagement.ConfigAsset.MusicConfig.html",
    "title": "Class ConfigAsset.MusicConfig | Yazawa Ichio Unity Package Document",
    "keywords": "Class ConfigAsset.MusicConfig Inheritance Object ConfigAsset.MusicConfig Namespace : ILib.Audio.SoundManagement Assembly : ILib.SoundManager.dll Syntax [Serializable] public class MusicConfig Methods View Source CreateProvider(Func<String, Action<MusicInfo, Exception>, Boolean>) Declaration public MusicProvider CreateProvider(Func<string, Action<MusicInfo, Exception>, bool> load) Parameters Type Name Description Func < String , Action < MusicInfo , Exception >, Boolean > load Returns Type Description MusicProvider"
  },
  "api/ILib.Audio.SoundManagement.ConfigAsset.SoundConfig.html": {
    "href": "api/ILib.Audio.SoundManagement.ConfigAsset.SoundConfig.html",
    "title": "Class ConfigAsset.SoundConfig | Yazawa Ichio Unity Package Document",
    "keywords": "Class ConfigAsset.SoundConfig Inheritance Object ConfigAsset.SoundConfig Namespace : ILib.Audio.SoundManagement Assembly : ILib.SoundManager.dll Syntax [Serializable] public class SoundConfig Methods View Source CreateProvider(Func<String, Action<SoundInfo, Exception>, Boolean>) Declaration public SoundProvider CreateProvider(Func<string, Action<SoundInfo, Exception>, bool> load) Parameters Type Name Description Func < String , Action < SoundInfo , Exception >, Boolean > load Returns Type Description SoundProvider"
  },
  "api/ILib.Audio.SoundPlayerImpl-1.html": {
    "href": "api/ILib.Audio.SoundPlayerImpl-1.html",
    "title": "Class SoundPlayerImpl<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class SoundPlayerImpl<T> サウンドプレイヤーの実体です Inheritance Object SoundPlayerImpl<T> SoundPlayerImpl Implements ISoundPlayer <T> IDisposable Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class SoundPlayerImpl<T> : ISoundPlayer<T>, IDisposable Type Parameters Name Description T Constructors View Source SoundPlayerImpl(ISoundProvider<T>, SoundPlayerConfig) Declaration public SoundPlayerImpl(ISoundProvider<T> provider, SoundPlayerConfig config = null) Parameters Type Name Description ISoundProvider <T> provider SoundPlayerConfig config Properties View Source IsAddCacheIfLoad Declaration public bool IsAddCacheIfLoad { get; set; } Property Value Type Description Boolean View Source IsCreateIfNotEnough Declaration public bool IsCreateIfNotEnough { get; set; } Property Value Type Description Boolean View Source LoadTimeout Declaration public float LoadTimeout { get; set; } Property Value Type Description Single View Source MaxPoolCount Declaration public int MaxPoolCount { get; set; } Property Value Type Description Int32 Methods View Source AddCache(T, Action<Boolean, Exception>) Declaration public void AddCache(T prm, Action<bool, Exception> onLoad) Parameters Type Name Description T prm Action < Boolean , Exception > onLoad View Source ClearCache(Boolean) Declaration public void ClearCache(bool force = false) Parameters Type Name Description Boolean force View Source CreateCacheScope(T[]) Declaration public ICacheScope CreateCacheScope(T[] prms) Parameters Type Name Description T[] prms Returns Type Description ICacheScope View Source Dispose() Declaration public void Dispose() View Source Finalize() Declaration protected void Finalize() View Source GetCacheKey(T) Declaration protected string GetCacheKey(T prm) Parameters Type Name Description T prm Returns Type Description String View Source Play(T) Declaration public IPlayingSoundContext Play(T prm) Parameters Type Name Description T prm Returns Type Description IPlayingSoundContext View Source Play(SoundInfo) Declaration public IPlayingSoundContext Play(SoundInfo info) Parameters Type Name Description SoundInfo info Returns Type Description IPlayingSoundContext View Source PlayOneShot(T) Declaration public void PlayOneShot(T prm) Parameters Type Name Description T prm View Source PlayOneShot(SoundInfo) Declaration public void PlayOneShot(SoundInfo info) Parameters Type Name Description SoundInfo info View Source RemoveCache(T) Declaration public void RemoveCache(T prm) Parameters Type Name Description T prm View Source ReservePool(Int32) Declaration public void ReservePool(int count = -1) Parameters Type Name Description Int32 count Implements ISoundPlayer<T> System.IDisposable"
  },
  "api/ILib.Audio.SoundPlayerImpl.html": {
    "href": "api/ILib.Audio.SoundPlayerImpl.html",
    "title": "Class SoundPlayerImpl | Yazawa Ichio Unity Package Document",
    "keywords": "Class SoundPlayerImpl サウンドプレイヤーの実体です Inheritance Object SoundPlayerImpl < String > SoundPlayerImpl Implements ISoundPlayer ISoundPlayer < String > IDisposable Inherited Members SoundPlayerImpl<String>.LoadTimeout SoundPlayerImpl<String>.IsCreateIfNotEnough SoundPlayerImpl<String>.MaxPoolCount SoundPlayerImpl<String>.IsAddCacheIfLoad SoundPlayerImpl<String>.ReservePool(Int32) SoundPlayerImpl<String>.GetCacheKey(String) SoundPlayerImpl<String>.Play(String) SoundPlayerImpl<String>.Play(SoundInfo) SoundPlayerImpl<String>.PlayOneShot(String) SoundPlayerImpl<String>.PlayOneShot(SoundInfo) SoundPlayerImpl<String>.AddCache(String, Action<Boolean, Exception>) SoundPlayerImpl<String>.RemoveCache(String) SoundPlayerImpl<String>.CreateCacheScope(String[]) SoundPlayerImpl<String>.ClearCache(Boolean) SoundPlayerImpl<String>.Dispose() Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class SoundPlayerImpl : SoundPlayerImpl<string>, ISoundPlayer, ISoundPlayer<string>, IDisposable Constructors View Source SoundPlayerImpl(ISoundProvider<String>, SoundPlayerConfig) Declaration public SoundPlayerImpl(ISoundProvider<string> provider, SoundPlayerConfig config = null) Parameters Type Name Description ISoundProvider < String > provider SoundPlayerConfig config Implements ISoundPlayer ISoundPlayer<T> System.IDisposable"
  },
  "api/ILib.Audio.TimeoutException.html": {
    "href": "api/ILib.Audio.TimeoutException.html",
    "title": "Class TimeoutException | Yazawa Ichio Unity Package Document",
    "keywords": "Class TimeoutException Inheritance Object Exception TimeoutException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class TimeoutException : Exception, ISerializable Constructors View Source TimeoutException(String) Declaration public TimeoutException(string msg) Parameters Type Name Description String msg Implements System.Runtime.Serialization.ISerializable"
  },
  "api/ILib.Audio.ToolMenu.html": {
    "href": "api/ILib.Audio.ToolMenu.html",
    "title": "Class ToolMenu | Yazawa Ichio Unity Package Document",
    "keywords": "Class ToolMenu Inheritance Object ToolMenu Namespace : ILib.Audio Assembly : ILib.SoundControl.Editor.dll Syntax public static class ToolMenu"
  },
  "api/ILib.Caller.HandleAttribute.html": {
    "href": "api/ILib.Caller.HandleAttribute.html",
    "title": "Class HandleAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class HandleAttribute Inheritance Object Attribute HandleAttribute Namespace : ILib.Caller Assembly : ILib.dll Syntax public class HandleAttribute : Attribute Constructors View Source HandleAttribute(Object) Declaration public HandleAttribute(object obj) Parameters Type Name Description Object obj Properties View Source Key Declaration public string Key { get; } Property Value Type Description String"
  },
  "api/ILib.Caller.IDispatcher.html": {
    "href": "api/ILib.Caller.IDispatcher.html",
    "title": "Interface IDispatcher | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IDispatcher Namespace : ILib.Caller Assembly : ILib.dll Syntax public interface IDispatcher Methods View Source Broadcast(Object) Declaration bool Broadcast(object key) Parameters Type Name Description Object key Returns Type Description Boolean View Source Broadcast<T>(Object, T) Declaration bool Broadcast<T>(object key, T prm) Parameters Type Name Description Object key T prm Returns Type Description Boolean Type Parameters Name Description T View Source Message(Object) Declaration bool Message(object key) Parameters Type Name Description Object key Returns Type Description Boolean View Source Message<T>(Object, T) Declaration bool Message<T>(object key, T prm) Parameters Type Name Description Object key T prm Returns Type Description Boolean Type Parameters Name Description T"
  },
  "api/ILib.CodeEmit.FieldEmitter.html": {
    "href": "api/ILib.CodeEmit.FieldEmitter.html",
    "title": "Class FieldEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class FieldEmitter Inheritance Object EmitterBase MemberEmitter FieldEmitter Inherited Members MemberEmitter.Summary MemberEmitter.Accessibility MemberEmitter.Attributes MemberEmitter.AddAttribute(String) MemberEmitter.Emit(CodeWriter) Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public class FieldEmitter : MemberEmitter Fields View Source InitValue Declaration public string InitValue Field Value Type Description String View Source Name Declaration public string Name Field Value Type Description String View Source Type Declaration public string Type Field Value Type Description String Methods View Source EmitMember(CodeWriter) Declaration public override void EmitMember(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides MemberEmitter.EmitMember(CodeWriter)"
  },
  "api/ILib.CodeEmit.FunctionEmitter.Argument.html": {
    "href": "api/ILib.CodeEmit.FunctionEmitter.Argument.html",
    "title": "Class FunctionEmitter.Argument | Yazawa Ichio Unity Package Document",
    "keywords": "Class FunctionEmitter.Argument Inheritance Object FunctionEmitter.Argument Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public class Argument Fields View Source InitValue Declaration public string InitValue Field Value Type Description String View Source Name Declaration public string Name Field Value Type Description String View Source Type Declaration public string Type Field Value Type Description String"
  },
  "api/ILib.Contents.Content-1.html": {
    "href": "api/ILib.Contents.Content-1.html",
    "title": "Class Content<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class Content<T> Inheritance Object Content Content<T> Implements IHasDispatcher IHasRoutineOwner Inherited Members Content.Parent Content.Controller Content.HasChildren Content.IsModalContent Content.IsWaitModalContent Content.Running Content.IsSelfThrowErrorIfNeeded Content.IsUseSubCall Content.Call Content.Dispatcher Content.Modules Content.IHasRoutineOwner.RoutineOwner Content.OnBoot() Content.OnEnable() Content.OnRun() Content.OnCompleteRun() Content.OnSuspend() Content.OnDisable() Content.OnPreShutdown() Content.OnShutdown() Content.Append(IContentParam) Content.Append<T>(Object) Content.Append(Type, Object) Content.Modal<TResult>(IContentParam) Content.Modal<TResult, UContent>(Object) Content.Modal<TResult>(Type, Object) Content.Resume() Content.Suspend() Content.Shutdown() Content.ModalResult<T>(T) Content.ModalResult(Exception) Content.ModalResult<T>(T, Exception) Content.Switch(IContentParam) Content.Switch<T>(Object) Content.Switch(Type, Object) Content.Get<T>(Boolean) Content.GetAll<T>(Boolean) Content.ThrowException(Exception) Content.HandleException(Exception) Namespace : ILib.Contents Assembly : ILib.dll Syntax public abstract class Content<T> : Content, IHasDispatcher, IHasRoutineOwner where T : IContentParam Type Parameters Name Description T Properties View Source Param Declaration protected T Param { get; } Property Value Type Description T Implements IHasDispatcher IHasRoutineOwner Extension Methods DispatcherExtensions.Message(IHasDispatcher, Object) DispatcherExtensions.Message<T>(IHasDispatcher, Object, T) DispatcherExtensions.Broadcast(IHasDispatcher, Object) DispatcherExtensions.Broadcast<T>(IHasDispatcher, Object, T) RoutineExtensions.Routine(IHasRoutineOwner, IEnumerator) RoutineExtensions.RepeatRoutine(IHasRoutineOwner, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(IHasRoutineOwner, IEnumerator) RoutineExtensions.IterationTaskRoutine(IHasRoutineOwner, IEnumerator) RoutineExtensions.IterationTaskRoutine(IHasRoutineOwner, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(IHasRoutineOwner, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(IHasRoutineOwner, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(IHasRoutineOwner, Func<IEnumerator>)"
  },
  "api/ILib.Contents.Content.html": {
    "href": "api/ILib.Contents.Content.html",
    "title": "Class Content | Yazawa Ichio Unity Package Document",
    "keywords": "Class Content Inheritance Object Content Content<T> Implements IHasDispatcher IHasRoutineOwner Namespace : ILib.Contents Assembly : ILib.dll Syntax public abstract class Content : IHasDispatcher, IHasRoutineOwner Properties View Source Call イベントの発火装置です。 Declaration protected EventCall Call { get; } Property Value Type Description EventCall View Source Controller 所属するコントローラーです。 Declaration protected ContentsController Controller { get; } Property Value Type Description ContentsController View Source Dispatcher イベントの発火装置です。 Declaration public IDispatcher Dispatcher { get; } Property Value Type Description IDispatcher View Source HasChildren Declaration public bool HasChildren { get; } Property Value Type Description Boolean View Source IsModalContent モーダルコンテンツです。 Declaration protected bool IsModalContent { get; } Property Value Type Description Boolean View Source IsSelfThrowErrorIfNeeded コンテンツのイベントに関してエラー時に自身のハンドルに例外をスローします Declaration protected virtual bool IsSelfThrowErrorIfNeeded { get; set; } Property Value Type Description Boolean View Source IsUseSubCall 親のEventCallに親子関係を設定するか？ Declaration protected virtual bool IsUseSubCall { get; } Property Value Type Description Boolean View Source IsWaitModalContent モーダルコンテンツを待っています。 Declaration protected bool IsWaitModalContent { get; } Property Value Type Description Boolean View Source Modules 自身と子を対象とするモジュールです。 Declaration public ModuleCollection Modules { get; } Property Value Type Description ModuleCollection View Source Param Declaration protected object Param { get; } Property Value Type Description Object View Source Parent 親のコンテンツです。 Declaration protected Content Parent { get; } Property Value Type Description Content View Source Running 実行中か？ Declaration protected bool Running { get; } Property Value Type Description Boolean Methods View Source Append(IContentParam) 自身の子にコンテンツを追加します。 Declaration public ITriggerAction<Content> Append(IContentParam prm) Parameters Type Name Description IContentParam prm Returns Type Description ITriggerAction < Content > View Source Append(Type, Object) 自身の子にコンテンツを追加します。 Declaration public ITriggerAction<Content> Append(Type type, object prm) Parameters Type Name Description Type type Object prm Returns Type Description ITriggerAction < Content > View Source Append<T>(Object) 自身の子にコンテンツを追加します。 Declaration public ITriggerAction<Content> Append<T>(object prm) Parameters Type Name Description Object prm Returns Type Description ITriggerAction < Content > Type Parameters Name Description T View Source Get<T>(Boolean) 子に登録されている指定のタイプのコンテンツを取得します。 Declaration public T Get<T>(bool recursive = true) where T : Content Parameters Type Name Description Boolean recursive Returns Type Description T Type Parameters Name Description T View Source GetAll<T>(Boolean) 子に登録されている指定のタイプのコンテンツをすべて取得します。 Declaration public IEnumerable<T> GetAll<T>(bool recursive = true) Parameters Type Name Description Boolean recursive Returns Type Description IEnumerable <T> Type Parameters Name Description T View Source HandleException(Exception) Declaration protected virtual bool HandleException(Exception ex) Parameters Type Name Description Exception ex Returns Type Description Boolean View Source Modal<TResult>(IContentParam) モーダルとして子のコンテンツを追加します。 追加したコンテンツの結果を待ちます。 Declaration public ITriggerAction<TResult> Modal<TResult>(IContentParam prm) Parameters Type Name Description IContentParam prm Returns Type Description ITriggerAction <TResult> Type Parameters Name Description TResult View Source Modal<TResult>(Type, Object) モーダルとして子のコンテンツを追加します。 追加したコンテンツの結果を待ちます。 Declaration public ITriggerAction<TResult> Modal<TResult>(Type type, object prm) Parameters Type Name Description Type type Object prm Returns Type Description ITriggerAction <TResult> Type Parameters Name Description TResult View Source Modal<TResult, UContent>(Object) モーダルとして子のコンテンツを追加します。 追加したコンテンツの結果を待ちます。 Declaration public ITriggerAction<TResult> Modal<TResult, UContent>(object prm) Parameters Type Name Description Object prm Returns Type Description ITriggerAction <TResult> Type Parameters Name Description TResult UContent View Source ModalResult(Exception) モーダルの結果を通知します。 Declaration protected void ModalResult(Exception error) Parameters Type Name Description Exception error View Source ModalResult<T>(T) モーダルの結果を通知します。 Declaration protected void ModalResult<T>(T obj) Parameters Type Name Description T obj Type Parameters Name Description T View Source ModalResult<T>(T, Exception) モーダルの結果を通知します。 Declaration protected void ModalResult<T>(T obj, Exception error) Parameters Type Name Description T obj Exception error Type Parameters Name Description T View Source OnBoot() 起動処理です。 Declaration protected virtual IEnumerator OnBoot() Returns Type Description IEnumerator View Source OnCompleteRun() 実行処理が完了した際の処理です。 Declaration protected virtual void OnCompleteRun() View Source OnDisable() 無効時の処理です。 Declaration protected virtual IEnumerator OnDisable() Returns Type Description IEnumerator View Source OnEnable() 有効時の処理です。 Declaration protected virtual IEnumerator OnEnable() Returns Type Description IEnumerator View Source OnPreShutdown() 終了直前の処理です。 Declaration protected virtual void OnPreShutdown() View Source OnRun() 実行時の処理です。 Declaration protected virtual IEnumerator OnRun() Returns Type Description IEnumerator View Source OnShutdown() 終了時の処理です。 Declaration protected virtual IEnumerator OnShutdown() Returns Type Description IEnumerator View Source OnSuspend() 停止時の処理です。 Declaration protected virtual IEnumerator OnSuspend() Returns Type Description IEnumerator View Source Resume() 停止後の復帰処理を行います。 Declaration public ITriggerAction<bool> Resume() Returns Type Description ITriggerAction < Boolean > View Source Shutdown() 終了処理を開始します。 Declaration public ITriggerAction<bool> Shutdown() Returns Type Description ITriggerAction < Boolean > View Source Suspend() 停止処理を開始します。 Declaration public ITriggerAction<bool> Suspend() Returns Type Description ITriggerAction < Boolean > View Source Switch(IContentParam) 終了処理と指定コンテンツへの遷移を開始します。 Declaration public ITriggerAction<Content> Switch(IContentParam prm) Parameters Type Name Description IContentParam prm Returns Type Description ITriggerAction < Content > View Source Switch(Type, Object) 終了処理と指定コンテンツへの遷移を開始します。 Declaration public ITriggerAction<Content> Switch(Type type, object prm = null) Parameters Type Name Description Type type Object prm Returns Type Description ITriggerAction < Content > View Source Switch<T>(Object) 終了処理と指定コンテンツへの遷移を開始します。 Declaration public ITriggerAction<Content> Switch<T>(object prm = null) Parameters Type Name Description Object prm Returns Type Description ITriggerAction < Content > Type Parameters Name Description T View Source ThrowException(Exception) 例外をスローします。 ハンドリングされない場合、親へと投げられます。 Declaration protected void ThrowException(Exception exception) Parameters Type Name Description Exception exception Explicit Interface Implementations View Source IHasRoutineOwner.RoutineOwner Declaration MonoBehaviour IHasRoutineOwner.RoutineOwner { get; } Returns Type Description UnityEngine.MonoBehaviour Implements IHasDispatcher IHasRoutineOwner Extension Methods DispatcherExtensions.Message(IHasDispatcher, Object) DispatcherExtensions.Message<T>(IHasDispatcher, Object, T) DispatcherExtensions.Broadcast(IHasDispatcher, Object) DispatcherExtensions.Broadcast<T>(IHasDispatcher, Object, T) RoutineExtensions.Routine(IHasRoutineOwner, IEnumerator) RoutineExtensions.RepeatRoutine(IHasRoutineOwner, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(IHasRoutineOwner, IEnumerator) RoutineExtensions.IterationTaskRoutine(IHasRoutineOwner, IEnumerator) RoutineExtensions.IterationTaskRoutine(IHasRoutineOwner, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(IHasRoutineOwner, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(IHasRoutineOwner, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(IHasRoutineOwner, Func<IEnumerator>)"
  },
  "api/ILib.Contents.html": {
    "href": "api/ILib.Contents.html",
    "title": "Namespace ILib.Contents | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.Contents Classes BootParam Content Content<T> ContentParam<T> ContentsController アプリケーションの全体の制御を行います。 個々の制御はContentを継承したクラスに記述します。 LockCollection<T> 主にUnityのコルーチンでコレクションを扱うため 実行中の要素の追加・削除を安全に行うためのコレクション Module アプリケーションの共通で行いたい処理を実装します。 Typeで指定した関数しか実行されません。 ModuleCollection モジュールのコレクションです。 親が指定されている場合、親のモジュールも実行されます。 SimpleParam Interfaces IContentParam Enums ModuleType"
  },
  "api/ILib.Debugs.AutoRegisters.AutoRegisterAttribute.html": {
    "href": "api/ILib.Debugs.AutoRegisters.AutoRegisterAttribute.html",
    "title": "Class AutoRegisterAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class AutoRegisterAttribute Inheritance Object Attribute AutoRegisterAttribute DebugButtonAttribute DebugInputAttribute DebugLabelAttribute DebugSliderAttribute DebugToggleAttribute Namespace : ILib.Debugs.AutoRegisters Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class AutoRegisterAttribute : Attribute Constructors View Source AutoRegisterAttribute(String) Declaration public AutoRegisterAttribute(string name) Parameters Type Name Description String name Properties View Source Category Declaration public string Category { get; set; } Property Value Type Description String View Source CategoryPriority Declaration public int CategoryPriority { get; set; } Property Value Type Description Int32 View Source Name Declaration public string Name { get; } Property Value Type Description String View Source Path Declaration public string Path { get; set; } Property Value Type Description String View Source Priority Declaration public int Priority { get; set; } Property Value Type Description Int32"
  },
  "api/ILib.Debugs.AutoRegisters.html": {
    "href": "api/ILib.Debugs.AutoRegisters.html",
    "title": "Namespace ILib.Debugs.AutoRegisters | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.Debugs.AutoRegisters Classes AutoRegisterAttribute AutoRegisterTargetAttribute DebugButtonAttribute DebugInputAttribute DebugLabelAttribute DebugSliderAttribute DebugToggleAttribute"
  },
  "api/ILib.Debugs.ButtonContent-1.html": {
    "href": "api/ILib.Debugs.ButtonContent-1.html",
    "title": "Class ButtonContent<TContext> | Yazawa Ichio Unity Package Document",
    "keywords": "Class ButtonContent<TContext> Inheritance Object Content <TContext, DebugButtonItem > ButtonContent<TContext> Inherited Members Content<TContext, DebugButtonItem>.Menu Content<TContext, DebugButtonItem>.Context Content<TContext, DebugButtonItem>.Priority Content<TContext, DebugButtonItem>.Path Content<TContext, DebugButtonItem>.Category Content<TContext, DebugButtonItem>.CategoryPriority Content<TContext, DebugButtonItem>.Widget Content<TContext, DebugButtonItem>.Register(DebugButtonItem) Content<TContext, DebugButtonItem>.Update() Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class ButtonContent<TContext> : Content<TContext, DebugButtonItem>, IContent where TContext : class Type Parameters Name Description TContext Properties View Source ButtonText Declaration protected virtual string ButtonText { get; } Property Value Type Description String View Source Label Declaration protected abstract string Label { get; } Property Value Type Description String Methods View Source OnClick() Declaration protected abstract void OnClick() View Source Register(DebugButtonItem) Declaration protected override sealed void Register(DebugButtonItem widget) Parameters Type Name Description DebugButtonItem widget Overrides ILib.Debugs.Content<TContext, ILib.Debugs.Widgets.DebugButtonItem>.Register(ILib.Debugs.Widgets.DebugButtonItem)"
  },
  "api/ILib.Debugs.PageJumpContent-1.html": {
    "href": "api/ILib.Debugs.PageJumpContent-1.html",
    "title": "Class PageJumpContent<TContext> | Yazawa Ichio Unity Package Document",
    "keywords": "Class PageJumpContent<TContext> Inheritance Object Content <TContext, DebugPageItem > PageJumpContent<TContext> Inherited Members Content<TContext, DebugPageItem>.Menu Content<TContext, DebugPageItem>.Context Content<TContext, DebugPageItem>.Priority Content<TContext, DebugPageItem>.Path Content<TContext, DebugPageItem>.Category Content<TContext, DebugPageItem>.CategoryPriority Content<TContext, DebugPageItem>.Widget Content<TContext, DebugPageItem>.Register(DebugPageItem) Content<TContext, DebugPageItem>.Update() Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class PageJumpContent<TContext> : Content<TContext, DebugPageItem>, IContent where TContext : class Type Parameters Name Description TContext Properties View Source JumpPage Declaration protected virtual string JumpPage { get; } Property Value Type Description String View Source Label Declaration protected abstract string Label { get; } Property Value Type Description String Methods View Source Register(DebugPageItem) Declaration protected override sealed void Register(DebugPageItem widget) Parameters Type Name Description DebugPageItem widget Overrides ILib.Debugs.Content<TContext, ILib.Debugs.Widgets.DebugPageItem>.Register(ILib.Debugs.Widgets.DebugPageItem)"
  },
  "api/ILib.Debugs.RadioButtonContent-1.html": {
    "href": "api/ILib.Debugs.RadioButtonContent-1.html",
    "title": "Class RadioButtonContent<TContext> | Yazawa Ichio Unity Package Document",
    "keywords": "Class RadioButtonContent<TContext> Inheritance Object Content <TContext, DebugRadioButtonItem > RadioButtonContent<TContext> Inherited Members Content<TContext, DebugRadioButtonItem>.Menu Content<TContext, DebugRadioButtonItem>.Context Content<TContext, DebugRadioButtonItem>.Priority Content<TContext, DebugRadioButtonItem>.Path Content<TContext, DebugRadioButtonItem>.Category Content<TContext, DebugRadioButtonItem>.CategoryPriority Content<TContext, DebugRadioButtonItem>.Widget Content<TContext, DebugRadioButtonItem>.Register(DebugRadioButtonItem) Content<TContext, DebugRadioButtonItem>.Update() Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class RadioButtonContent<TContext> : Content<TContext, DebugRadioButtonItem>, IContent where TContext : class Type Parameters Name Description TContext Properties View Source Items Declaration protected abstract string[] Items { get; } Property Value Type Description String [] View Source Select Declaration protected abstract int Select { get; } Property Value Type Description Int32 Methods View Source OnChanged(Int32, String) Declaration protected abstract void OnChanged(int index, string name) Parameters Type Name Description Int32 index String name View Source Register(DebugRadioButtonItem) Declaration protected override sealed void Register(DebugRadioButtonItem widget) Parameters Type Name Description DebugRadioButtonItem widget Overrides ILib.Debugs.Content<TContext, ILib.Debugs.Widgets.DebugRadioButtonItem>.Register(ILib.Debugs.Widgets.DebugRadioButtonItem)"
  },
  "api/ILib.Debugs.ScDebugMenu.html": {
    "href": "api/ILib.Debugs.ScDebugMenu.html",
    "title": "Class ScDebugMenu | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScDebugMenu Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour ScDebugMenu Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public class ScDebugMenu : MonoBehaviour Properties View Source Category Declaration public string Category { get; set; } Property Value Type Description String View Source Contexts Declaration public Contexts Contexts { get; } Property Value Type Description Contexts View Source Skin Declaration public IMGUIWidgetSkin Skin { get; set; } Property Value Type Description IMGUIWidgetSkin Methods View Source Close() Declaration public void Close() View Source Open() Declaration public void Open() Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.Debugs.ScDebugMenuEditor.html": {
    "href": "api/ILib.Debugs.ScDebugMenuEditor.html",
    "title": "Class ScDebugMenuEditor | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScDebugMenuEditor Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.Editor ScDebugMenuEditor Inherited Members UnityEditor.Editor.CreateEditorWithContext(UnityEngine.Object[], UnityEngine.Object) UnityEditor.Editor.CreateCachedEditorWithContext(UnityEngine.Object, UnityEngine.Object, System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateCachedEditorWithContext(UnityEngine.Object[], UnityEngine.Object, System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateCachedEditor(UnityEngine.Object, System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateCachedEditor(UnityEngine.Object[], System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateEditor(UnityEngine.Object) UnityEditor.Editor.CreateEditor(UnityEngine.Object, System.Type) UnityEditor.Editor.CreateEditor(UnityEngine.Object[]) UnityEditor.Editor.CreateEditor(UnityEngine.Object[], System.Type) UnityEditor.Editor.DrawPropertiesExcluding(UnityEditor.SerializedObject, System.String[]) UnityEditor.Editor.DrawDefaultInspector() UnityEditor.Editor.Repaint() UnityEditor.Editor.RequiresConstantRepaint() UnityEditor.Editor.DrawHeader() UnityEditor.Editor.OnHeaderGUI() UnityEditor.Editor.ShouldHideOpenButton() UnityEditor.Editor.HasPreviewGUI() UnityEditor.Editor.GetPreviewTitle() UnityEditor.Editor.RenderStaticPreview(System.String, UnityEngine.Object[], System.Int32, System.Int32) UnityEditor.Editor.OnPreviewGUI(UnityEngine.Rect, UnityEngine.GUIStyle) UnityEditor.Editor.OnInteractivePreviewGUI(UnityEngine.Rect, UnityEngine.GUIStyle) UnityEditor.Editor.OnPreviewSettings() UnityEditor.Editor.GetInfoString() UnityEditor.Editor.DrawPreview(UnityEngine.Rect) UnityEditor.Editor.ReloadPreviewInstances() UnityEditor.Editor.UseDefaultMargins() UnityEditor.Editor.Initialize(UnityEngine.Object[]) UnityEditor.Editor.MoveNextTarget() UnityEditor.Editor.ResetTarget() UnityEditor.Editor.CreateEditorWithContext(UnityEngine.Object[], UnityEngine.Object, System.Type) UnityEditor.Editor.target UnityEditor.Editor.targets UnityEditor.Editor.serializedObject UnityEditor.Editor.finishedDefaultHeaderGUI UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.Editor.dll Syntax [CustomEditor(typeof(ScDebugMenu))] public class ScDebugMenuEditor : Editor, IPreviewable, IToolModeOwner Methods View Source OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/ILib.MVVM.Drawer.LightBindHolderDrawer.html": {
    "href": "api/ILib.MVVM.Drawer.LightBindHolderDrawer.html",
    "title": "Class LightBindHolderDrawer | Yazawa Ichio Unity Package Document",
    "keywords": "Class LightBindHolderDrawer Inheritance Object UnityEditor.GUIDrawer UnityEditor.PropertyDrawer LightBindHolderDrawer Inherited Members UnityEditor.PropertyDrawer.CanCacheInspectorGUI(UnityEditor.SerializedProperty) UnityEditor.PropertyDrawer.attribute UnityEditor.PropertyDrawer.fieldInfo Namespace : ILib.MVVM.Drawer Assembly : IchioLib.MVVM.Editor.dll Syntax [CustomPropertyDrawer(typeof(LightBindHolder))] public class LightBindHolderDrawer : PropertyDrawer Methods View Source GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description UnityEditor.SerializedProperty property UnityEngine.GUIContent label Returns Type Description Single Overrides UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty, UnityEngine.GUIContent) View Source OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description UnityEngine.Rect position UnityEditor.SerializedProperty property UnityEngine.GUIContent label Overrides UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect, UnityEditor.SerializedProperty, UnityEngine.GUIContent)"
  },
  "api/ILib.MVVM.Drawer.LightBindUtil.html": {
    "href": "api/ILib.MVVM.Drawer.LightBindUtil.html",
    "title": "Class LightBindUtil | Yazawa Ichio Unity Package Document",
    "keywords": "Class LightBindUtil Inheritance Object LightBindUtil Namespace : ILib.MVVM.Drawer Assembly : IchioLib.MVVM.Editor.dll Syntax public static class LightBindUtil Fields View Source DispNames Declaration public static readonly string[] DispNames Field Value Type Description String [] View Source TargetTypes Declaration public static readonly Type[] TargetTypes Field Value Type Description Type [] View Source TypeNames Declaration public static readonly string[] TypeNames Field Value Type Description String [] Methods View Source AddCreateMenuItem(GenericMenu, SerializedProperty, Action<Int32>, Boolean) Declaration public static void AddCreateMenuItem(GenericMenu menu, SerializedProperty arrayProp, Action<int> onCreate, bool cancel = false) Parameters Type Name Description UnityEditor.GenericMenu menu UnityEditor.SerializedProperty arrayProp Action < Int32 > onCreate Boolean cancel"
  },
  "api/ILib.MVVM.Drawer.LightBindViewer.html": {
    "href": "api/ILib.MVVM.Drawer.LightBindViewer.html",
    "title": "Class LightBindViewer | Yazawa Ichio Unity Package Document",
    "keywords": "Class LightBindViewer Inheritance Object LightBindViewer Implements IElementViewer Namespace : ILib.MVVM.Drawer Assembly : IchioLib.MVVM.Editor.dll Syntax public class LightBindViewer : IElementViewer Constructors View Source LightBindViewer(View, SerializedProperty, Int32) Declaration public LightBindViewer(View view, SerializedProperty root, int index) Parameters Type Name Description View view UnityEditor.SerializedProperty root Int32 index Methods View Source CanRemove() Declaration public bool CanRemove() Returns Type Description Boolean View Source DrawBinding(Boolean) Declaration public bool DrawBinding(bool selected) Parameters Type Name Description Boolean selected Returns Type Description Boolean View Source DrawInspector() Declaration public void DrawInspector() View Source GetName() Declaration public string GetName() Returns Type Description String View Source IsBindable() Declaration public bool IsBindable() Returns Type Description Boolean View Source Remove() Declaration public void Remove() Implements IElementViewer"
  },
  "api/ILib.MVVM.Drawer.ViewDrawer.html": {
    "href": "api/ILib.MVVM.Drawer.ViewDrawer.html",
    "title": "Class ViewDrawer | Yazawa Ichio Unity Package Document",
    "keywords": "Class ViewDrawer Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.Editor ViewDrawer Inherited Members UnityEditor.Editor.CreateEditorWithContext(UnityEngine.Object[], UnityEngine.Object) UnityEditor.Editor.CreateCachedEditorWithContext(UnityEngine.Object, UnityEngine.Object, System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateCachedEditorWithContext(UnityEngine.Object[], UnityEngine.Object, System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateCachedEditor(UnityEngine.Object, System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateCachedEditor(UnityEngine.Object[], System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateEditor(UnityEngine.Object) UnityEditor.Editor.CreateEditor(UnityEngine.Object, System.Type) UnityEditor.Editor.CreateEditor(UnityEngine.Object[]) UnityEditor.Editor.CreateEditor(UnityEngine.Object[], System.Type) UnityEditor.Editor.DrawPropertiesExcluding(UnityEditor.SerializedObject, System.String[]) UnityEditor.Editor.DrawDefaultInspector() UnityEditor.Editor.Repaint() UnityEditor.Editor.RequiresConstantRepaint() UnityEditor.Editor.DrawHeader() UnityEditor.Editor.OnHeaderGUI() UnityEditor.Editor.ShouldHideOpenButton() UnityEditor.Editor.HasPreviewGUI() UnityEditor.Editor.GetPreviewTitle() UnityEditor.Editor.RenderStaticPreview(System.String, UnityEngine.Object[], System.Int32, System.Int32) UnityEditor.Editor.OnPreviewGUI(UnityEngine.Rect, UnityEngine.GUIStyle) UnityEditor.Editor.OnInteractivePreviewGUI(UnityEngine.Rect, UnityEngine.GUIStyle) UnityEditor.Editor.OnPreviewSettings() UnityEditor.Editor.GetInfoString() UnityEditor.Editor.DrawPreview(UnityEngine.Rect) UnityEditor.Editor.ReloadPreviewInstances() UnityEditor.Editor.UseDefaultMargins() UnityEditor.Editor.Initialize(UnityEngine.Object[]) UnityEditor.Editor.MoveNextTarget() UnityEditor.Editor.ResetTarget() UnityEditor.Editor.CreateEditorWithContext(UnityEngine.Object[], UnityEngine.Object, System.Type) UnityEditor.Editor.target UnityEditor.Editor.targets UnityEditor.Editor.serializedObject UnityEditor.Editor.finishedDefaultHeaderGUI UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() Namespace : ILib.MVVM.Drawer Assembly : IchioLib.MVVM.Editor.dll Syntax [CustomEditor(typeof(View), true)] public class ViewDrawer : Editor, IPreviewable, IToolModeOwner Methods View Source OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/ILib.MVVM.IBindingProperty-1.html": {
    "href": "api/ILib.MVVM.IBindingProperty-1.html",
    "title": "Interface IBindingProperty<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IBindingProperty<T> Inherited Members IBindingProperty.Path IBindingProperty.Hash IBindingProperty.GetValue<T>() IBindingProperty.SetValue<T>(Object) IBindingProperty.GetBindType() IBindingProperty.IsAssignable<T>() IBindingProperty.SetDirty() Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IBindingProperty<T> : IBindingProperty Type Parameters Name Description T Properties View Source Value Declaration T Value { get; set; } Property Value Type Description T Events View Source OnChanged Declaration event Action<T> OnChanged Event Type Type Description Action <T>"
  },
  "api/ILib.MVVM.IBindingProperty.html": {
    "href": "api/ILib.MVVM.IBindingProperty.html",
    "title": "Interface IBindingProperty | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IBindingProperty Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IBindingProperty Properties View Source Hash Declaration int Hash { get; } Property Value Type Description Int32 View Source Path Declaration string Path { get; } Property Value Type Description String Methods View Source GetBindType() Declaration Type GetBindType() Returns Type Description Type View Source GetValue<T>() Declaration T GetValue<T>() where T : class Returns Type Description T Type Parameters Name Description T View Source IsAssignable<T>() Declaration bool IsAssignable<T>() where T : class Returns Type Description Boolean Type Parameters Name Description T View Source SetDirty() Declaration void SetDirty() View Source SetValue<T>(Object) Declaration void SetValue<T>(object val) where T : class Parameters Type Name Description Object val Type Parameters Name Description T"
  },
  "api/ILib.MVVM.ICommand-1.html": {
    "href": "api/ILib.MVVM.ICommand-1.html",
    "title": "Interface ICommand<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ICommand<T> Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface ICommand<T> Type Parameters Name Description T Properties View Source CanExecute Declaration bool CanExecute { get; } Property Value Type Description Boolean Methods View Source Execute(T) Declaration void Execute(T args) Parameters Type Name Description T args"
  },
  "api/ILib.MVVM.ICommand.html": {
    "href": "api/ILib.MVVM.ICommand.html",
    "title": "Interface ICommand | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ICommand Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface ICommand Properties View Source CanExecute Declaration bool CanExecute { get; } Property Value Type Description Boolean Methods View Source Execute() Declaration void Execute()"
  },
  "api/ILib.MVVM.StaticVM.Generator.html": {
    "href": "api/ILib.MVVM.StaticVM.Generator.html",
    "title": "Class Generator | Yazawa Ichio Unity Package Document",
    "keywords": "Class Generator Inheritance Object Generator Namespace : ILib.MVVM.StaticVM Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class Generator Constructors View Source Generator(IView, String, Config) Declaration public Generator(IView view, string name, Config config) Parameters Type Name Description IView view String name Config config Methods View Source DryRun() Declaration public string DryRun() Returns Type Description String View Source GetGenericTypeString(Type) Declaration public static string GetGenericTypeString(Type type) Parameters Type Name Description Type type Returns Type Description String View Source GetTypeString(Type) Declaration public static string GetTypeString(Type type) Parameters Type Name Description Type type Returns Type Description String View Source IsList(Type) Declaration public static bool IsList(Type type) Parameters Type Name Description Type type Returns Type Description Boolean View Source Run(String) Declaration public void Run(string path) Parameters Type Name Description String path"
  },
  "api/ILib.MVVM.StaticVM.ToolMenu.html": {
    "href": "api/ILib.MVVM.StaticVM.ToolMenu.html",
    "title": "Class ToolMenu | Yazawa Ichio Unity Package Document",
    "keywords": "Class ToolMenu Inheritance Object ToolMenu Namespace : ILib.MVVM.StaticVM Assembly : ILib.MVVM.StaticViewModel.dll Syntax public static class ToolMenu Methods View Source AllQuickGenerate(String[]) Declaration public static void AllQuickGenerate(string[] paths) Parameters Type Name Description String [] paths"
  },
  "api/ILib.MVVM.StaticVM.html": {
    "href": "api/ILib.MVVM.StaticVM.html",
    "title": "Namespace ILib.MVVM.StaticVM | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.MVVM.StaticVM Classes Config ConfigAsset GenerateWizard Generator ToolMenu"
  },
  "api/ILib.MVVM.StringEventButtonBind.html": {
    "href": "api/ILib.MVVM.StringEventButtonBind.html",
    "title": "Class StringEventButtonBind | Yazawa Ichio Unity Package Document",
    "keywords": "Class StringEventButtonBind Inheritance Object LightBind < String , UnityEngine.UI.Button > LightEventBind < String , UnityEngine.UI.Button > StringEventButtonBind Implements ILightBind IBindable < String > IBindable IViewEvent IViewElement Inherited Members LightEventBind<String, Button>.IViewEvent.Name LightEventBind<String, Button>.IViewEvent.Bind(IViewEventHandler) LightEventBind<String, Button>.EventType() LightEventBind<String, Button>.Event() LightEventBind<String, Button>.Event(String) LightEventBind<String, Button>.Event<T>(String, T) LightEventBind<String, Button>.Event(EventArgument) LightBind<String, Button>.Path LightBind<String, Button>.IsActive LightBind<String, Button>.m_Target LightBind<String, Button>.m_Hash LightBind<String, Button>.Value LightBind<String, Button>.BindType() LightBind<String, Button>.Set(String, Boolean) LightBind<String, Button>.Init(Object, String) LightBind<String, Button>.OnInit() LightBind<String, Button>.IBindable.Bind(IBindingProperty) LightBind<String, Button>.IBindable<String>.Bind(IBindingProperty<String>) LightBind<String, Button>.IBindable.Unbind(IBindingProperty) LightBind<String, Button>.OnUnbind() LightBind<String, Button>.IBindable.TryUpdate() LightBind<String, Button>.UpdateValue(String) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class StringEventButtonBind : LightEventBind<string, Button>, ILightBind, IBindable<string>, IBindable, IViewEvent, IViewElement Methods View Source OnInit() Declaration protected override void OnInit() Overrides ILib.MVVM.LightBind<System.String, UnityEngine.UI.Button>.OnInit() View Source UpdateValue(String) Declaration protected override void UpdateValue(string val) Parameters Type Name Description String val Overrides ILib.MVVM.LightBind<System.String, UnityEngine.UI.Button>.UpdateValue(System.String) Implements ILightBind IBindable<T> IBindable IViewEvent IViewElement"
  },
  "api/ILib.Save.Data.html": {
    "href": "api/ILib.Save.Data.html",
    "title": "Class Data | Yazawa Ichio Unity Package Document",
    "keywords": "Class Data 保存するデータを持つクラスです。 [SaveKey(Enum.Type)]の用に保存用のKeyを設定してください。 バージョンを埋め込み差分を検知できます。 継承して利用してください。 Inheritance Object Data Implements UnityEngine.ISerializationCallbackReceiver Namespace : ILib.Save Assembly : ILib.Save.dll Syntax [Serializable] public abstract class Data : ISerializationCallbackReceiver Properties View Source Version データのバージョンです。 互換性のない変更があった際に上げることで古いバージョンのイベントを受け取れます。 Declaration protected virtual int Version { get; } Property Value Type Description Int32 Methods View Source OnChangeVersion(Int32) 保存されたバージョンと現在のバージョンに呼び出されます。 Declaration protected virtual void OnChangeVersion(int oldVersion) Parameters Type Name Description Int32 oldVersion View Source OnDeserialize() デシリアライズ直後に実行されます Declaration protected virtual void OnDeserialize() View Source OnInit() セーブデータになく初回に生成された際に実行されます Declaration protected virtual void OnInit() View Source OnSerialize() シリアライズ直前に実行されます Declaration protected virtual void OnSerialize() View Source SetDitry(Boolean) 親へデータの更新を行います。 saveフラグを有効にすると永続化します。 Declaration public void SetDitry(bool save = false) Parameters Type Name Description Boolean save Explicit Interface Implementations View Source ISerializationCallbackReceiver.OnAfterDeserialize() Declaration void ISerializationCallbackReceiver.OnAfterDeserialize() View Source ISerializationCallbackReceiver.OnBeforeSerialize() Declaration void ISerializationCallbackReceiver.OnBeforeSerialize() Implements UnityEngine.ISerializationCallbackReceiver"
  },
  "api/ILib.Save.Encrypter.html": {
    "href": "api/ILib.Save.Encrypter.html",
    "title": "Class Encrypter | Yazawa Ichio Unity Package Document",
    "keywords": "Class Encrypter Inheritance Object Encrypter Namespace : ILib.Save Assembly : ILib.Save.dll Syntax public class Encrypter Constructors View Source Encrypter(String, String, CipherMode, PaddingMode, Func<String, String>) Declaration public Encrypter(string iv, string key, CipherMode mode = CipherMode.CBC, PaddingMode padding = PaddingMode.PKCS7, Func<string, string> hashProvider = null) Parameters Type Name Description String iv String key CipherMode mode PaddingMode padding Func < String , String > hashProvider Methods View Source Decrypt(Byte[]) Declaration public byte[] Decrypt(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description Byte [] View Source DecryptString(String) Declaration public string DecryptString(string text) Parameters Type Name Description String text Returns Type Description String View Source Encrypt(Byte[]) Declaration public byte[] Encrypt(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description Byte [] View Source EncryptString(String) Declaration public string EncryptString(string text) Parameters Type Name Description String text Returns Type Description String View Source ToHash(String) Declaration public string ToHash(string text) Parameters Type Name Description String text Returns Type Description String"
  },
  "api/ILib.Save.ISaveData.html": {
    "href": "api/ILib.Save.ISaveData.html",
    "title": "Interface ISaveData | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ISaveData Namespace : ILib.Save Assembly : ILib.Save.dll Syntax public interface ISaveData Methods View Source DeleteKeys() Declaration void DeleteKeys() View Source Get<U>() Declaration U Get<U>() where U : Data, new() Returns Type Description U Type Parameters Name Description U View Source Save() Declaration void Save() View Source Set(Data) Declaration void Set(Data value) Parameters Type Name Description Data value View Source TryGet<U>(out U) Declaration bool TryGet<U>(out U data) where U : Data, new() Parameters Type Name Description U data Returns Type Description Boolean Type Parameters Name Description U"
  },
  "api/ILib.Save.ISaveDataStore.html": {
    "href": "api/ILib.Save.ISaveDataStore.html",
    "title": "Interface ISaveDataStore | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ISaveDataStore Namespace : ILib.Save Assembly : ILib.Save.dll Syntax public interface ISaveDataStore Methods View Source Delete(String) Declaration void Delete(string key) Parameters Type Name Description String key View Source DeleteAll() Declaration void DeleteAll() View Source GetBool(String, Boolean) Declaration bool GetBool(string key, bool def = false) Parameters Type Name Description String key Boolean def Returns Type Description Boolean View Source GetBytes(String) Declaration byte[] GetBytes(string key) Parameters Type Name Description String key Returns Type Description Byte [] View Source GetFloat(String, Single) Declaration float GetFloat(string key, float def = 0F) Parameters Type Name Description String key Single def Returns Type Description Single View Source GetInt(String, Int32) Declaration int GetInt(string key, int def = 0) Parameters Type Name Description String key Int32 def Returns Type Description Int32 View Source GetString(String, String) Declaration string GetString(string key, string def = \"\") Parameters Type Name Description String key String def Returns Type Description String View Source HasKey(String) Declaration bool HasKey(string key) Parameters Type Name Description String key Returns Type Description Boolean View Source Save() Declaration void Save() View Source Set(String, Boolean) Declaration void Set(string key, bool value) Parameters Type Name Description String key Boolean value View Source Set(String, Byte[]) Declaration void Set(string key, byte[] value) Parameters Type Name Description String key Byte [] value View Source Set(String, Int32) Declaration void Set(string key, int value) Parameters Type Name Description String key Int32 value View Source Set(String, Single) Declaration void Set(string key, float value) Parameters Type Name Description String key Single value View Source Set(String, String) Declaration void Set(string key, string value) Parameters Type Name Description String key String value"
  },
  "api/ILib.ScWidgets.IScrollViewLayout.html": {
    "href": "api/ILib.ScWidgets.IScrollViewLayout.html",
    "title": "Interface IScrollViewLayout | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IScrollViewLayout Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public interface IScrollViewLayout Methods View Source CalcContentsRect(ScScrollView, List<IScWidget>) Declaration Rect CalcContentsRect(ScScrollView widget, List<IScWidget> children) Parameters Type Name Description ScScrollView widget List < IScWidget > children Returns Type Description UnityEngine.Rect"
  },
  "api/ILib.ScWidgets.IScWidget.html": {
    "href": "api/ILib.ScWidgets.IScWidget.html",
    "title": "Interface IScWidget | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IScWidget Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public interface IScWidget Properties View Source Extends Declaration IExtend[] Extends { get; set; } Property Value Type Description IExtend [] View Source IsDirty Declaration bool IsDirty { get; } Property Value Type Description Boolean View Source Layout Declaration ILayout Layout { get; set; } Property Value Type Description ILayout View Source Name Declaration string Name { get; set; } Property Value Type Description String View Source Parent Declaration IScWidget Parent { get; } Property Value Type Description IScWidget Methods View Source CalcLayout(Rect) Declaration void CalcLayout(Rect rect) Parameters Type Name Description UnityEngine.Rect rect View Source GetChildren() Declaration List<IScWidget> GetChildren() Returns Type Description List < IScWidget > View Source GetMaskColor() Declaration Color GetMaskColor() Returns Type Description UnityEngine.Color View Source GetRect() Declaration Rect GetRect() Returns Type Description UnityEngine.Rect View Source GetRelativeRect() Declaration Rect GetRelativeRect() Returns Type Description UnityEngine.Rect View Source GetViewRectWithoutClip() Declaration Rect GetViewRectWithoutClip() Returns Type Description UnityEngine.Rect View Source SetDitry() Declaration void SetDitry() View Source SetParent(IScWidget) Declaration void SetParent(IScWidget widget) Parameters Type Name Description IScWidget widget Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.Layout.html": {
    "href": "api/ILib.ScWidgets.Layout.html",
    "title": "Class Layout | Yazawa Ichio Unity Package Document",
    "keywords": "Class Layout Inheritance Object LayoutBase Layout Implements ILayout IFixedWidth IFixedHeight Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class Layout : LayoutBase, ILayout, IFixedWidth, IFixedHeight Constructors View Source Layout() Declaration public Layout() View Source Layout(Vector2, Vector2, LayoutAnchor) Declaration public Layout(Vector2 pos, Vector2 size, LayoutAnchor anchor = LayoutAnchor.None) Parameters Type Name Description UnityEngine.Vector2 pos UnityEngine.Vector2 size LayoutAnchor anchor Properties View Source Anchor Declaration public LayoutAnchor Anchor { get; set; } Property Value Type Description LayoutAnchor View Source Pos Declaration public Vector2 Pos { get; set; } Property Value Type Description UnityEngine.Vector2 View Source Size Declaration public Vector2 Size { get; set; } Property Value Type Description UnityEngine.Vector2 Methods View Source CalcRect(Rect) Declaration public override Rect CalcRect(Rect viewRect) Parameters Type Name Description UnityEngine.Rect viewRect Returns Type Description UnityEngine.Rect Overrides LayoutBase.CalcRect(Rect) Explicit Interface Implementations View Source IFixedHeight.Height Declaration float IFixedHeight.Height { get; } Returns Type Description Single View Source IFixedWidth.Width Declaration float IFixedWidth.Width { get; } Returns Type Description Single Implements ILayout IFixedWidth IFixedHeight"
  },
  "api/ILib.ScWidgets.LayoutAnchor.html": {
    "href": "api/ILib.ScWidgets.LayoutAnchor.html",
    "title": "Enum LayoutAnchor | Yazawa Ichio Unity Package Document",
    "keywords": "Enum LayoutAnchor Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax [Flags] public enum LayoutAnchor Fields Name Description Bottom Left LeftBottom LeftTop None Right RightBottom RightTop Top"
  },
  "api/ILib.ScWidgets.ScGraphic.html": {
    "href": "api/ILib.ScWidgets.ScGraphic.html",
    "title": "Class ScGraphic | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScGraphic Inheritance Object ScWidget ScGraphic ScClipMask ScImange ScProgressBar ScText ScTexture Implements IScWidget IScGraphic Inherited Members ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public abstract class ScGraphic : ScWidget, IScWidget, IScGraphic Properties View Source Color Declaration public Color Color { get; set; } Property Value Type Description UnityEngine.Color View Source MaskColor Declaration public Color MaskColor { get; set; } Property Value Type Description UnityEngine.Color Methods View Source GetColor() Declaration public virtual Color GetColor() Returns Type Description UnityEngine.Color View Source GetMaskColor() Declaration public override Color GetMaskColor() Returns Type Description UnityEngine.Color Overrides ScWidget.GetMaskColor() Implements IScWidget IScGraphic Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScGrid.html": {
    "href": "api/ILib.ScWidgets.ScGrid.html",
    "title": "Class ScGrid | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScGrid Inheritance Object ScWidget ScGrid Implements IScWidget Inherited Members ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.GetMaskColor() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScGrid : ScWidget, IScWidget Properties View Source HorizontalCount Declaration public int HorizontalCount { get; set; } Property Value Type Description Int32 View Source Padding Declaration public Vector2 Padding { get; set; } Property Value Type Description UnityEngine.Vector2 View Source VerticalCount Declaration public int VerticalCount { get; set; } Property Value Type Description Int32 Methods View Source CalcLayout(Rect) Declaration public override void CalcLayout(Rect rect) Parameters Type Name Description UnityEngine.Rect rect Overrides ScWidget.CalcLayout(Rect) Implements IScWidget Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScGridBySize.html": {
    "href": "api/ILib.ScWidgets.ScGridBySize.html",
    "title": "Class ScGridBySize | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScGridBySize Inheritance Object ScWidget ScGridBySize Implements IScWidget Inherited Members ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.GetMaskColor() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScGridBySize : ScWidget, IScWidget Properties View Source CellHeight Declaration public float CellHeight { get; set; } Property Value Type Description Single View Source CellSize Declaration public Vector2 CellSize { get; set; } Property Value Type Description UnityEngine.Vector2 View Source CellWidth Declaration public float CellWidth { get; set; } Property Value Type Description Single View Source UseHeightPercentage Declaration public bool UseHeightPercentage { get; set; } Property Value Type Description Boolean View Source UsePercentage Declaration public bool UsePercentage { set; } Property Value Type Description Boolean View Source UseWidthPercentage Declaration public bool UseWidthPercentage { get; set; } Property Value Type Description Boolean Methods View Source CalcLayout(Rect) Declaration public override void CalcLayout(Rect rect) Parameters Type Name Description UnityEngine.Rect rect Overrides ScWidget.CalcLayout(Rect) Implements IScWidget Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScHorizontalRatioSplitter.html": {
    "href": "api/ILib.ScWidgets.ScHorizontalRatioSplitter.html",
    "title": "Class ScHorizontalRatioSplitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScHorizontalRatioSplitter Inheritance Object ScMinimumWidget ScRatioSplitterBase ScHorizontalRatioSplitter Implements IScWidget Inherited Members ScRatioSplitterBase.m_List ScRatioSplitterBase.Set(IScWidget, Int32) ScRatioSplitterBase.Remove(IScWidget) ScRatioSplitterBase.Clear() ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScHorizontalRatioSplitter : ScRatioSplitterBase, IScWidget Methods View Source CalcLayout(Rect) Declaration public override void CalcLayout(Rect rect) Parameters Type Name Description UnityEngine.Rect rect Overrides ScMinimumWidget.CalcLayout(Rect) Implements IScWidget Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScWidget.html": {
    "href": "api/ILib.ScWidgets.ScWidget.html",
    "title": "Class ScWidget | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScWidget Inheritance Object ScWidget CategoryTab ScFunction ScGraphic ScGrid ScGridBySize ScScrollView ScWindow Implements IScWidget Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScWidget : IScWidget Fields View Source m_Children Declaration protected List<IScWidget> m_Children Field Value Type Description List < IScWidget > View Source m_ParentRect Declaration protected Rect m_ParentRect Field Value Type Description UnityEngine.Rect View Source m_Rect Declaration protected Rect m_Rect Field Value Type Description UnityEngine.Rect Properties View Source Child Declaration public IScWidget Child { set; } Property Value Type Description IScWidget View Source Children Declaration public IScWidget[] Children { set; } Property Value Type Description IScWidget [] View Source Extend Declaration public IExtend Extend { set; } Property Value Type Description IExtend View Source Extends Declaration public IExtend[] Extends { get; set; } Property Value Type Description IExtend [] View Source IsDirty Declaration public bool IsDirty { get; protected set; } Property Value Type Description Boolean View Source Layout Declaration public ILayout Layout { protected get; set; } Property Value Type Description ILayout View Source Name Declaration public string Name { get; set; } Property Value Type Description String View Source Parent Declaration public IScWidget Parent { get; } Property Value Type Description IScWidget View Source Revision Declaration public int Revision { get; protected set; } Property Value Type Description Int32 Methods View Source Add(IScWidget) Declaration public void Add(IScWidget widget) Parameters Type Name Description IScWidget widget View Source CalcLayout(Rect) Declaration public virtual void CalcLayout(Rect rect) Parameters Type Name Description UnityEngine.Rect rect View Source GetChildren() Declaration public List<IScWidget> GetChildren() Returns Type Description List < IScWidget > View Source GetMaskColor() Declaration public virtual Color GetMaskColor() Returns Type Description UnityEngine.Color View Source GetRect() Declaration public Rect GetRect() Returns Type Description UnityEngine.Rect View Source GetRelativeRect() Declaration public Rect GetRelativeRect() Returns Type Description UnityEngine.Rect View Source GetViewRectWithoutClip() Declaration public Rect GetViewRectWithoutClip() Returns Type Description UnityEngine.Rect View Source IsOutsideClip() Declaration public bool IsOutsideClip() Returns Type Description Boolean View Source Remove(IScWidget) Declaration public bool Remove(IScWidget widget) Parameters Type Name Description IScWidget widget Returns Type Description Boolean View Source SetDitry() Declaration public void SetDitry() Explicit Interface Implementations View Source IScWidget.Layout Declaration ILayout IScWidget.Layout { get; set; } Returns Type Description ILayout View Source IScWidget.SetParent(IScWidget) Declaration void IScWidget.SetParent(IScWidget widget) Parameters Type Name Description IScWidget widget Implements IScWidget Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScWindow.html": {
    "href": "api/ILib.ScWidgets.ScWindow.html",
    "title": "Class ScWindow | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScWindow Inheritance Object ScWidget ScWindow Implements IScWidget IOrderWidget Inherited Members ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScWindow : ScWidget, IScWidget, IOrderWidget Properties View Source Color Declaration public Color Color { get; set; } Property Value Type Description UnityEngine.Color View Source Order Declaration public int Order { get; set; } Property Value Type Description Int32 Methods View Source GetMaskColor() Declaration public override Color GetMaskColor() Returns Type Description UnityEngine.Color Overrides ScWidget.GetMaskColor() Implements IScWidget IOrderWidget Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.MVVM.ViewModel.html": {
    "href": "api/ILib.MVVM.ViewModel.html",
    "title": "Class ViewModel | Yazawa Ichio Unity Package Document",
    "keywords": "Class ViewModel Inheritance Object ViewModelBase ViewModel Implements IViewModel Inherited Members ViewModelBase.Messenger ViewModelBase.IViewModel.Get<T>(String) ViewModelBase.GetImpl<T>(String) ViewModelBase.IViewModel.Set<T>(String, T) ViewModelBase.SetImpl<T>(String, T) ViewModelBase.SetDirty(String) ViewModelBase.SetAllDirty() ViewModelBase.IViewModel.Register(IBinding) ViewModelBase.IViewModel.Unregister(IBinding) ViewModelBase.IViewModel.SubscribeChanged<T>(String, Action<T>) ViewModelBase.SubscribeChanged<T>(String, Action<T>) ViewModelBase.IViewModel.UnsubscribeChanged<T>(String, Action<T>) ViewModelBase.UnsubscribeChanged<T>(String, Action<T>) ViewModelBase.IViewModel.SubscribeViewEvent(String, Action) ViewModelBase.SubscribeViewEvent(String, Action) ViewModelBase.IViewModel.UnsubscribeViewEvent(String, Action) ViewModelBase.UnsubscribeViewEvent(String, Action) ViewModelBase.IViewModel.SubscribeViewEvent<T>(String, Action<T>) ViewModelBase.SubscribeViewEvent<T>(String, Action<T>) ViewModelBase.IViewModel.UnsubscribeViewEvent<T>(String, Action<T>) ViewModelBase.UnsubscribeViewEvent<T>(String, Action<T>) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class ViewModel : ViewModelBase, IViewModel Methods View Source Command(String, ICommand) Declaration public BindingCommand Command(string name, ICommand cmd) Parameters Type Name Description String name ICommand cmd Returns Type Description BindingCommand View Source Command(String, Action, Func<Boolean>) Declaration public BindingCommand Command(string name, Action onViewEvent, Func<bool> canExecute = null) Parameters Type Name Description String name Action onViewEvent Func < Boolean > canExecute Returns Type Description BindingCommand View Source Command<T>(String, ICommand<T>) Declaration public BindingCommand<T> Command<T>(string name, ICommand<T> cmd) Parameters Type Name Description String name ICommand <T> cmd Returns Type Description BindingCommand <T> Type Parameters Name Description T View Source Command<T>(String, Action<T>, Func<Boolean>) Declaration public BindingCommand<T> Command<T>(string name, Action<T> onViewEvent, Func<bool> canExecute = null) Parameters Type Name Description String name Action <T> onViewEvent Func < Boolean > canExecute Returns Type Description BindingCommand <T> Type Parameters Name Description T View Source Get<T>(String) Declaration public T Get<T>(string path) Parameters Type Name Description String path Returns Type Description T Type Parameters Name Description T View Source Set<T>(String, T) Declaration public void Set<T>(string path, T val) Parameters Type Name Description String path T val Type Parameters Name Description T Implements IViewModel Extension Methods EventExtensions.SubscribeViewEvent<T>(IViewModel, T, Action) EventExtensions.UnsubscribeViewEvent<T>(IViewModel, T, Action) EventExtensions.SubscribeViewEvent<T, U>(IViewModel, T, Action<U>) EventExtensions.UnsubscribeViewEvent<T, U>(IViewModel, T, Action<U>)"
  },
  "api/ILib.MVVM.ViewModelBase.html": {
    "href": "api/ILib.MVVM.ViewModelBase.html",
    "title": "Class ViewModelBase | Yazawa Ichio Unity Package Document",
    "keywords": "Class ViewModelBase Inheritance Object ViewModelBase ViewModel Implements IViewModel Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public abstract class ViewModelBase : IViewModel Properties View Source Messenger Declaration public IMessenger Messenger { get; set; } Property Value Type Description IMessenger Methods View Source GetImpl<T>(String) Declaration protected T GetImpl<T>(string path) Parameters Type Name Description String path Returns Type Description T Type Parameters Name Description T View Source SetAllDirty() Declaration public void SetAllDirty() View Source SetDirty(String) Declaration public void SetDirty(string path) Parameters Type Name Description String path View Source SetImpl<T>(String, T) Declaration protected void SetImpl<T>(string path, T val) Parameters Type Name Description String path T val Type Parameters Name Description T View Source SubscribeChanged<T>(String, Action<T>) Declaration protected void SubscribeChanged<T>(string path, Action<T> notify) Parameters Type Name Description String path Action <T> notify Type Parameters Name Description T View Source SubscribeViewEvent(String, Action) Declaration protected void SubscribeViewEvent(string name, Action onViewEvent) Parameters Type Name Description String name Action onViewEvent View Source SubscribeViewEvent<T>(String, Action<T>) Declaration protected void SubscribeViewEvent<T>(string name, Action<T> onViewEvent) Parameters Type Name Description String name Action <T> onViewEvent Type Parameters Name Description T View Source UnsubscribeChanged<T>(String, Action<T>) Declaration protected void UnsubscribeChanged<T>(string path, Action<T> notify) Parameters Type Name Description String path Action <T> notify Type Parameters Name Description T View Source UnsubscribeViewEvent(String, Action) Declaration protected void UnsubscribeViewEvent(string name, Action onViewEvent) Parameters Type Name Description String name Action onViewEvent View Source UnsubscribeViewEvent<T>(String, Action<T>) Declaration protected void UnsubscribeViewEvent<T>(string name, Action<T> onViewEvent) Parameters Type Name Description String name Action <T> onViewEvent Type Parameters Name Description T Explicit Interface Implementations View Source IViewModel.Get<T>(String) Declaration T IViewModel.Get<T>(string path) Parameters Type Name Description String path Returns Type Description T Type Parameters Name Description T View Source IViewModel.Register(IBinding) Declaration void IViewModel.Register(IBinding binding) Parameters Type Name Description IBinding binding View Source IViewModel.Set<T>(String, T) Declaration void IViewModel.Set<T>(string path, T val) Parameters Type Name Description String path T val Type Parameters Name Description T View Source IViewModel.SubscribeChanged<T>(String, Action<T>) Declaration void IViewModel.SubscribeChanged<T>(string path, Action<T> notify) Parameters Type Name Description String path Action <T> notify Type Parameters Name Description T View Source IViewModel.SubscribeViewEvent(String, Action) Declaration void IViewModel.SubscribeViewEvent(string name, Action onViewEvent) Parameters Type Name Description String name Action onViewEvent View Source IViewModel.SubscribeViewEvent<T>(String, Action<T>) Declaration void IViewModel.SubscribeViewEvent<T>(string name, Action<T> onViewEvent) Parameters Type Name Description String name Action <T> onViewEvent Type Parameters Name Description T View Source IViewModel.Unregister(IBinding) Declaration void IViewModel.Unregister(IBinding binding) Parameters Type Name Description IBinding binding View Source IViewModel.UnsubscribeChanged<T>(String, Action<T>) Declaration void IViewModel.UnsubscribeChanged<T>(string path, Action<T> notify) Parameters Type Name Description String path Action <T> notify Type Parameters Name Description T View Source IViewModel.UnsubscribeViewEvent(String, Action) Declaration void IViewModel.UnsubscribeViewEvent(string name, Action onViewEvent) Parameters Type Name Description String name Action onViewEvent View Source IViewModel.UnsubscribeViewEvent<T>(String, Action<T>) Declaration void IViewModel.UnsubscribeViewEvent<T>(string name, Action<T> onViewEvent) Parameters Type Name Description String name Action <T> onViewEvent Type Parameters Name Description T Implements IViewModel Extension Methods EventExtensions.SubscribeViewEvent<T>(IViewModel, T, Action) EventExtensions.UnsubscribeViewEvent<T>(IViewModel, T, Action) EventExtensions.SubscribeViewEvent<T, U>(IViewModel, T, Action<U>) EventExtensions.UnsubscribeViewEvent<T, U>(IViewModel, T, Action<U>)"
  },
  "api/ILib.MVVM.html": {
    "href": "api/ILib.MVVM.html",
    "title": "Namespace ILib.MVVM | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.MVVM Classes ActiveBind AssignableBindBase<T> Behavior BindableView BindBase<T> Binding BindingCommand BindingCommand<T> BindingEventCollection BindingEventHandler BindingPropertyCollection ButtonBind ButtonToggleBind CollectionBind ColorBind ComponentEnabledArgument DelegateCommand DelegateCommand<T> EventArgument EventArgument<T> EventButton EventExtensions EventKeyAttribute EventKeyToStrConv EventNameAttribute GraphicColorArgument ImageBind InputFieldArgument InputFieldBind IntEventButtonBind LightBind<TValue, UTarget> LightBindEntry LightBindHolder LightEventBind<TValue, UTarget> Messenger PostionBind ReactiveListProperty<T> ReactiveProperty<T> SliderBind StringEventButtonBind TextArgument TextBind ToggleBind View ViewModel ViewModelBase Interfaces IBehavior IBindable IBindable<T> IBinding IBindingEvent IBindingProperty IBindingProperty<T> ICommand ICommand<T> ILightBind IMessenger IMultipleBindable IView IViewElement IViewEvent IViewEventHandler IViewModel"
  },
  "api/ILib.NoResultTaskRoutineException.html": {
    "href": "api/ILib.NoResultTaskRoutineException.html",
    "title": "Class NoResultTaskRoutineException | Yazawa Ichio Unity Package Document",
    "keywords": "Class NoResultTaskRoutineException Inheritance Object Exception NoResultTaskRoutineException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Namespace : ILib Assembly : ILib.dll Syntax public class NoResultTaskRoutineException : Exception, ISerializable Constructors View Source NoResultTaskRoutineException(String) Declaration public NoResultTaskRoutineException(string message) Parameters Type Name Description String message Implements System.Runtime.Serialization.ISerializable"
  },
  "api/ILib.Save.PlayerPrefsStore.html": {
    "href": "api/ILib.Save.PlayerPrefsStore.html",
    "title": "Class PlayerPrefsStore | Yazawa Ichio Unity Package Document",
    "keywords": "Class PlayerPrefsStore Inheritance Object PlayerPrefsStore Implements ISaveDataStore Namespace : ILib.Save Assembly : ILib.Save.dll Syntax public class PlayerPrefsStore : ISaveDataStore Constructors View Source PlayerPrefsStore(Encrypter) Declaration public PlayerPrefsStore(Encrypter encrypter) Parameters Type Name Description Encrypter encrypter Methods View Source Delete(String) Declaration public void Delete(string key) Parameters Type Name Description String key View Source DeleteAll() Declaration public void DeleteAll() View Source GetBool(String, Boolean) Declaration public bool GetBool(string key, bool def = false) Parameters Type Name Description String key Boolean def Returns Type Description Boolean View Source GetBytes(String) Declaration public byte[] GetBytes(string key) Parameters Type Name Description String key Returns Type Description Byte [] View Source GetFloat(String, Single) Declaration public float GetFloat(string key, float def = 0F) Parameters Type Name Description String key Single def Returns Type Description Single View Source GetInt(String, Int32) Declaration public int GetInt(string key, int def = 0) Parameters Type Name Description String key Int32 def Returns Type Description Int32 View Source GetString(String, String) Declaration public string GetString(string key, string def = \"\") Parameters Type Name Description String key String def Returns Type Description String View Source HasKey(String) Declaration public bool HasKey(string key) Parameters Type Name Description String key Returns Type Description Boolean View Source Save() Declaration public void Save() View Source Set(String, Boolean) Declaration public void Set(string key, bool value) Parameters Type Name Description String key Boolean value View Source Set(String, Byte[]) Declaration public void Set(string key, byte[] value) Parameters Type Name Description String key Byte [] value View Source Set(String, Int32) Declaration public void Set(string key, int value) Parameters Type Name Description String key Int32 value View Source Set(String, Single) Declaration public void Set(string key, float value) Parameters Type Name Description String key Single value View Source Set(String, String) Declaration public void Set(string key, string value) Parameters Type Name Description String key String value Implements ISaveDataStore"
  },
  "api/ILib.Save.SaveData-1.html": {
    "href": "api/ILib.Save.SaveData-1.html",
    "title": "Class SaveData<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class SaveData<T> セーブデータを保存するためのクラスです。 TにはEnumを指定してください。 Inheritance Object SaveData<T> Implements ISaveData Namespace : ILib.Save Assembly : ILib.Save.dll Syntax public class SaveData<T> : ISaveData where T : struct, IConvertible Type Parameters Name Description T Constructors View Source SaveData(ISaveDataStore, Func<String>) Declaration public SaveData(ISaveDataStore store, Func<string> keyPrefix) Parameters Type Name Description ISaveDataStore store Func < String > keyPrefix View Source SaveData(String, String, Func<String>) PlayerPrefsに対してキー難読化し文字列を暗号化して保存する方式で作成します。 Declaration public SaveData(string iv, string key, Func<string> keyPrefix) Parameters Type Name Description String iv String key Func < String > keyPrefix Methods View Source Delete(T) 指定のキーを削除します。 Declaration public void Delete(T key) Parameters Type Name Description T key View Source DeleteKeys() EnumのKeyをすべて削除します。 Declaration public void DeleteKeys() View Source Get<U>() データを取得します Declaration public U Get<U>() where U : Data, new() Returns Type Description U Type Parameters Name Description U View Source GetBool(T, Boolean) Declaration public bool GetBool(T key, bool def = false) Parameters Type Name Description T key Boolean def Returns Type Description Boolean View Source GetBytes(T) Declaration public byte[] GetBytes(T key) Parameters Type Name Description T key Returns Type Description Byte [] View Source GetFloat(T, Single) Declaration public float GetFloat(T key, float def = 0F) Parameters Type Name Description T key Single def Returns Type Description Single View Source GetInt(T, Int32) Declaration public int GetInt(T key, int def = 0) Parameters Type Name Description T key Int32 def Returns Type Description Int32 View Source GetString(T, String) Declaration public string GetString(T key, string def = \"\") Parameters Type Name Description T key String def Returns Type Description String View Source Save() データを永続化します。 Declaration public void Save() View Source Set(T, Boolean) Declaration public void Set(T key, bool value) Parameters Type Name Description T key Boolean value View Source Set(T, Byte[]) Declaration public void Set(T key, byte[] value) Parameters Type Name Description T key Byte [] value View Source Set(T, Int32) Declaration public void Set(T key, int value) Parameters Type Name Description T key Int32 value View Source Set(T, Single) Declaration public void Set(T key, float value) Parameters Type Name Description T key Single value View Source Set(T, String) Declaration public void Set(T key, string value) Parameters Type Name Description T key String value View Source Set(Data) Declaration public void Set(Data value) Parameters Type Name Description Data value View Source TryGet<U>(out U) データを取得します。 読み取りに失敗した場合は新しく生成します。 Declaration public bool TryGet<U>(out U data) where U : Data, new() Parameters Type Name Description U data Returns Type Description Boolean Type Parameters Name Description U Implements ISaveData"
  },
  "api/ILib.Save.SaveKeyAttribute.html": {
    "href": "api/ILib.Save.SaveKeyAttribute.html",
    "title": "Class SaveKeyAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class SaveKeyAttribute Dataクラスを保存する際の型を指定する属性です Inheritance Object Attribute SaveKeyAttribute Namespace : ILib.Save Assembly : ILib.Save.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class SaveKeyAttribute : Attribute Constructors View Source SaveKeyAttribute(Object) Declaration public SaveKeyAttribute(object key) Parameters Type Name Description Object key Properties View Source Key Declaration public string Key { get; } Property Value Type Description String View Source KeyRawType Declaration public Type KeyRawType { get; } Property Value Type Description Type Methods View Source ToKey(Object) Declaration public static string ToKey(object key) Parameters Type Name Description Object key Returns Type Description String"
  },
  "api/ILib.Save.html": {
    "href": "api/ILib.Save.html",
    "title": "Namespace ILib.Save | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.Save Classes Data 保存するデータを持つクラスです。 [SaveKey(Enum.Type)]の用に保存用のKeyを設定してください。 バージョンを埋め込み差分を検知できます。 継承して利用してください。 Encrypter PlayerPrefsStore SaveData<T> セーブデータを保存するためのクラスです。 TにはEnumを指定してください。 SaveKeyAttribute Dataクラスを保存する際の型を指定する属性です Interfaces ISaveData ISaveDataStore"
  },
  "api/ILib.ScWidgets.IMGUIWidgetSkin.ContentsColor.html": {
    "href": "api/ILib.ScWidgets.IMGUIWidgetSkin.ContentsColor.html",
    "title": "Class IMGUIWidgetSkin.ContentsColor | Yazawa Ichio Unity Package Document",
    "keywords": "Class IMGUIWidgetSkin.ContentsColor Inheritance Object IMGUIWidgetSkin.ContentsColor Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax [Serializable] public class ContentsColor Fields View Source Active Declaration public Color Active Field Value Type Description UnityEngine.Color View Source Base Declaration public Color Base Field Value Type Description UnityEngine.Color View Source Disable Declaration public Color Disable Field Value Type Description UnityEngine.Color View Source Line Declaration public Color Line Field Value Type Description UnityEngine.Color View Source Main Declaration public Color Main Field Value Type Description UnityEngine.Color View Source Text Declaration public Color Text Field Value Type Description UnityEngine.Color View Source TextOnActive Declaration public Color TextOnActive Field Value Type Description UnityEngine.Color View Source TextOnDisable Declaration public Color TextOnDisable Field Value Type Description UnityEngine.Color"
  },
  "api/ILib.ScWidgets.IMGUIWidgetSkin.html": {
    "href": "api/ILib.ScWidgets.IMGUIWidgetSkin.html",
    "title": "Class IMGUIWidgetSkin | Yazawa Ichio Unity Package Document",
    "keywords": "Class IMGUIWidgetSkin Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject IMGUIWidgetSkin Implements UnityEngine.ISerializationCallbackReceiver Inherited Members UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class IMGUIWidgetSkin : ScriptableObject, ISerializationCallbackReceiver Fields View Source Arrow Declaration public Sprite Arrow Field Value Type Description UnityEngine.Sprite View Source Box Declaration public Sprite Box Field Value Type Description UnityEngine.Sprite View Source Button Declaration public Sprite Button Field Value Type Description UnityEngine.Sprite View Source Check Declaration public Sprite Check Field Value Type Description UnityEngine.Sprite View Source Circle Declaration public Sprite Circle Field Value Type Description UnityEngine.Sprite View Source Color Declaration public IMGUIWidgetSkin.ContentsColor Color Field Value Type Description IMGUIWidgetSkin.ContentsColor View Source Font Declaration public Font Font Field Value Type Description UnityEngine.Font View Source Line Declaration public Sprite Line Field Value Type Description UnityEngine.Sprite Properties View Source WhiteTexture Declaration public Texture2D WhiteTexture { get; } Property Value Type Description UnityEngine.Texture2D Methods View Source GetCustomSkin(String) Declaration public Object GetCustomSkin(string name) Parameters Type Name Description String name Returns Type Description UnityEngine.Object Explicit Interface Implementations View Source ISerializationCallbackReceiver.OnAfterDeserialize() Declaration void ISerializationCallbackReceiver.OnAfterDeserialize() View Source ISerializationCallbackReceiver.OnBeforeSerialize() Declaration void ISerializationCallbackReceiver.OnBeforeSerialize() Implements UnityEngine.ISerializationCallbackReceiver"
  },
  "api/ILib.ScWidgets.IOrderWidget.html": {
    "href": "api/ILib.ScWidgets.IOrderWidget.html",
    "title": "Interface IOrderWidget | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IOrderWidget Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public interface IOrderWidget Properties View Source Order Declaration int Order { get; } Property Value Type Description Int32"
  },
  "api/ILib.ScWidgets.IScGraphic.html": {
    "href": "api/ILib.ScWidgets.IScGraphic.html",
    "title": "Interface IScGraphic | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IScGraphic Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public interface IScGraphic Properties View Source Color Declaration Color Color { get; set; } Property Value Type Description UnityEngine.Color View Source MaskColor Declaration Color MaskColor { get; set; } Property Value Type Description UnityEngine.Color Methods View Source GetColor() Declaration Color GetColor() Returns Type Description UnityEngine.Color"
  },
  "api/ILib.UI.IQueueEntry.html": {
    "href": "api/ILib.UI.IQueueEntry.html",
    "title": "Interface IQueueEntry | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IQueueEntry UIQueueのリクエストです。 awaitした場合はCloseを待ちます Inherited Members IDisposable.Dispose() Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public interface IQueueEntry : IDisposable Properties View Source IsClosed Declaration bool IsClosed { get; } Property Value Type Description Boolean Methods View Source Close() Declaration Task Close() Returns Type Description Task View Source GetAwaiter() Declaration TaskAwaiter GetAwaiter() Returns Type Description TaskAwaiter View Source WaitClose(CancellationToken) Declaration Task WaitClose(CancellationToken token) Parameters Type Name Description CancellationToken token Returns Type Description Task"
  },
  "api/ILib.UI.IStackEntry.html": {
    "href": "api/ILib.UI.IStackEntry.html",
    "title": "Interface IStackEntry | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IStackEntry UIStackのリクエストです。 Pushの完了を受け取れます。 Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public interface IStackEntry Properties View Source IsActive Declaration bool IsActive { get; } Property Value Type Description Boolean View Source IsFornt Declaration bool IsFornt { get; } Property Value Type Description Boolean Methods View Source Execute<T>(Action<T>, Boolean) Declaration void Execute<T>(Action<T> action, bool immediate = false) Parameters Type Name Description Action <T> action Boolean immediate Type Parameters Name Description T View Source GetAwaiter() Declaration TaskAwaiter<IStackEntry> GetAwaiter() Returns Type Description TaskAwaiter < IStackEntry > View Source Pop() Declaration Task Pop() Returns Type Description Task"
  },
  "api/ILib.UI.ITransition.html": {
    "href": "api/ILib.UI.ITransition.html",
    "title": "Interface ITransition | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ITransition アニメーションの遷移を行います。 Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public interface ITransition Methods View Source Hide(Boolean) UIの非表示アニメーションです。 Declaration Task Hide(bool close) Parameters Type Name Description Boolean close Returns Type Description Task View Source OnPreCreated() UIのOnCreated実行前に実行されます。 初期表示をHide状態にするなどに利用します。 Declaration void OnPreCreated() View Source Show(Boolean) UIの表示アニメーションです。 Declaration Task Show(bool open) Parameters Type Name Description Boolean open Returns Type Description Task"
  },
  "api/ILib.UI.UIControl-1.html": {
    "href": "api/ILib.UI.UIControl-1.html",
    "title": "Class UIControl<TParam> | Yazawa Ichio Unity Package Document",
    "keywords": "Class UIControl<TParam> UIの表示制御を行うクラスです。 Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour UIControl<TParam> Implements IControl <TParam> IControl Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public abstract class UIControl<TParam> : MonoBehaviour, IControl<TParam>, IControl Type Parameters Name Description TParam Properties View Source Controller 自身を管理する親のコントローラーです。 Declaration protected IController Controller { get; } Property Value Type Description IController View Source IsActive UIが有効かどうかです。 デフォルトの動作は自身のゲームオブジェクトのアクティブと同じ値になります。 Declaration public virtual bool IsActive { get; } Property Value Type Description Boolean View Source IsDeactivateInBehind Behind時に自身のゲームオブジェクトを非アクティブにするか？ Declaration public virtual bool IsDeactivateInBehind { get; } Property Value Type Description Boolean View Source IsHideInBehind Behind時に非表示アニメーション処理を実行するか？ デフォルトの動作はIsDeactivateInBehindと同じ値になります。 Declaration public virtual bool IsHideInBehind { get; } Property Value Type Description Boolean View Source Transition アニメーションによる遷移を行うクラスです。 Declaration protected ITransition Transition { get; } Property Value Type Description ITransition Methods View Source Close() Declaration public void Close() View Source GetTransition() アニメーションによる遷移を行うクラスを返します。 返さない場合も正常に動きます。 Declaration protected virtual ITransition GetTransition() Returns Type Description ITransition View Source OnBehind() UIが最前面から後ろになった際に実行されます。Close時は実行されません。 デフォルトでは可能であれば開くアニメーションを実行します。 Declaration protected virtual Task OnBehind() Returns Type Description Task View Source OnClose() UIを削除する直前に実行されます。 デフォルトでは可能であれば閉じるアニメーションを実行します。 アクティブではない場合は何も行いません。 Declaration protected virtual Task OnClose() Returns Type Description Task View Source OnCreated(TParam) UIが作成された直後に実行されます。 Declaration protected virtual Task OnCreated(TParam prm) Parameters Type Name Description TParam prm Returns Type Description Task View Source OnFront(Boolean) UIが最前面に来た際に実行されます。オープン処理かどうかは引数で確認できます。 デフォルトでは可能であれば開くアニメーションを実行します。 Declaration protected virtual Task OnFront(bool open) Parameters Type Name Description Boolean open Returns Type Description Task Explicit Interface Implementations View Source IControl.OnBehind() Declaration Task IControl.OnBehind() Returns Type Description Task View Source IControl.OnClose() Declaration Task IControl.OnClose() Returns Type Description Task View Source IControl.OnCreated(Object) Declaration Task IControl.OnCreated(object prm) Parameters Type Name Description Object prm Returns Type Description Task View Source IControl.OnFront(Boolean) Declaration Task IControl.OnFront(bool open) Parameters Type Name Description Boolean open Returns Type Description Task View Source IControl.SetController(IController) Declaration void IControl.SetController(IController controller) Parameters Type Name Description IController controller Implements IControl<TParam> IControl Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.AssetBundles.ExManifest.ExManifest.html": {
    "href": "api/ILib.AssetBundles.ExManifest.ExManifest.html",
    "title": "Class ExManifest | Yazawa Ichio Unity Package Document",
    "keywords": "Class ExManifest Inheritance Object ExManifest Implements IBundleData Namespace : ILib.AssetBundles.ExManifest Assembly : ILib.AssetBundles.ExManifest.dll Syntax public class ExManifest : IBundleData Constructors View Source ExManifest(ExManifestAsset) Declaration public ExManifest(ExManifestAsset manifestAsset) Parameters Type Name Description ExManifestAsset manifestAsset Methods View Source GetAllDepends(String, out String[]) Declaration public int GetAllDepends(string name, out string[] deps) Parameters Type Name Description String name String [] deps Returns Type Description Int32 View Source GetAllNames() Declaration public string[] GetAllNames() Returns Type Description String [] View Source GetBundleNames(String) Declaration public IEnumerable<string> GetBundleNames(string tag) Parameters Type Name Description String tag Returns Type Description IEnumerable < String > View Source GetCRC(String) Declaration public uint GetCRC(string name) Parameters Type Name Description String name Returns Type Description UInt32 View Source GetDepends(String, out String[]) Declaration public int GetDepends(string name, out string[] deps) Parameters Type Name Description String name String [] deps Returns Type Description Int32 View Source GetHash(String) Declaration public string GetHash(string name) Parameters Type Name Description String name Returns Type Description String View Source GetReference(String) Declaration public (string bundleName, string assetName)GetReference(string id) Parameters Type Name Description String id Returns Type Description ValueTuple < String , String > View Source GetSize(String) Declaration public long GetSize(string name) Parameters Type Name Description String name Returns Type Description Int64 Implements IBundleData"
  },
  "api/ILib.AssetBundles.ExManifest.ManifestBuilder.html": {
    "href": "api/ILib.AssetBundles.ExManifest.ManifestBuilder.html",
    "title": "Class ManifestBuilder | Yazawa Ichio Unity Package Document",
    "keywords": "Class ManifestBuilder Inheritance Object ManifestBuilder Namespace : ILib.AssetBundles.ExManifest Assembly : ILib.AssetBundles.ExManifest.Editor.dll Syntax public class ManifestBuilder Constructors View Source ManifestBuilder(Setting) Declaration public ManifestBuilder(Setting setting) Parameters Type Name Description Setting setting Fields View Source Extension Declaration public IExDataProvider Extension Field Value Type Description IExDataProvider View Source TargetProvider Declaration public ITargetProvider TargetProvider Field Value Type Description ITargetProvider Methods View Source Run() Declaration public void Run()"
  },
  "api/ILib.AssetBundles.ExManifest.Tools.GUIDReferenceSetterContext.html": {
    "href": "api/ILib.AssetBundles.ExManifest.Tools.GUIDReferenceSetterContext.html",
    "title": "Class GUIDReferenceSetterContext | Yazawa Ichio Unity Package Document",
    "keywords": "Class GUIDReferenceSetterContext Inheritance Object SetterContext GUIDReferenceSetterContext Implements IReferenceCollector Inherited Members SetterContext.Directory SetterContext.SetDirectory(String) Namespace : ILib.AssetBundles.ExManifest.Tools Assembly : ILib.AssetBundles.ExManifest.Tools.dll Syntax public class GUIDReferenceSetterContext : SetterContext, IReferenceCollector Fields View Source ApplyChildrenFolder Declaration public bool ApplyChildrenFolder Field Value Type Description Boolean View Source TargetExt Declaration public string TargetExt Field Value Type Description String Properties View Source Description Declaration public override string Description { get; } Property Value Type Description String Overrides SetterContext.Description Methods View Source GetId(String, String) Declaration public string GetId(string bundleName, string path) Parameters Type Name Description String bundleName String path Returns Type Description String View Source OnGUI() Declaration public override void OnGUI() Overrides SetterContext.OnGUI() Implements IReferenceCollector"
  },
  "api/ILib.AssetBundles.ExManifest.html": {
    "href": "api/ILib.AssetBundles.ExManifest.html",
    "title": "Namespace ILib.AssetBundles.ExManifest | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.AssetBundles.ExManifest Classes ABInfo DataEntry DepInfo ExManifest ExManifestAsset ManifestBuilder RefInfo Setting StashFileScope TagInfo TargetProvider Interfaces IExDataProvider ITargetProvider"
  },
  "api/ILib.AssetBundles.ILoadOperator.html": {
    "href": "api/ILib.AssetBundles.ILoadOperator.html",
    "title": "Interface ILoadOperator | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ILoadOperator Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public interface ILoadOperator Methods View Source GetCacheRoot() Declaration string GetCacheRoot() Returns Type Description String View Source Init() Declaration Initializer Init() Returns Type Description Initializer View Source IsDownload(String, String) Declaration bool IsDownload(string name, string hash) Parameters Type Name Description String name String hash Returns Type Description Boolean View Source Load(String, String) Declaration LoadOperation Load(string name, string hash) Parameters Type Name Description String name String hash Returns Type Description LoadOperation View Source LoadPath(String, String) Declaration string LoadPath(string name, string hash) Parameters Type Name Description String name String hash Returns Type Description String View Source RequestUrl(String, String) Declaration string RequestUrl(string name, string hash) Parameters Type Name Description String name String hash Returns Type Description String"
  },
  "api/ILib.AssetBundles.NameSetter.PathToNameContext.Mode.html": {
    "href": "api/ILib.AssetBundles.NameSetter.PathToNameContext.Mode.html",
    "title": "Enum PathToNameContext.Mode | Yazawa Ichio Unity Package Document",
    "keywords": "Enum PathToNameContext.Mode Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax public enum Mode Fields Name Description AssetName AssetNameWithExt DirName"
  },
  "api/ILib.AssetBundles.NameSetter.SetterAssetEditor.html": {
    "href": "api/ILib.AssetBundles.NameSetter.SetterAssetEditor.html",
    "title": "Class SetterAssetEditor | Yazawa Ichio Unity Package Document",
    "keywords": "Class SetterAssetEditor Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.Editor SetterAssetEditor Inherited Members UnityEditor.Editor.CreateEditorWithContext(UnityEngine.Object[], UnityEngine.Object) UnityEditor.Editor.CreateCachedEditorWithContext(UnityEngine.Object, UnityEngine.Object, System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateCachedEditorWithContext(UnityEngine.Object[], UnityEngine.Object, System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateCachedEditor(UnityEngine.Object, System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateCachedEditor(UnityEngine.Object[], System.Type, UnityEditor.Editor) UnityEditor.Editor.CreateEditor(UnityEngine.Object) UnityEditor.Editor.CreateEditor(UnityEngine.Object, System.Type) UnityEditor.Editor.CreateEditor(UnityEngine.Object[]) UnityEditor.Editor.CreateEditor(UnityEngine.Object[], System.Type) UnityEditor.Editor.DrawPropertiesExcluding(UnityEditor.SerializedObject, System.String[]) UnityEditor.Editor.DrawDefaultInspector() UnityEditor.Editor.Repaint() UnityEditor.Editor.RequiresConstantRepaint() UnityEditor.Editor.DrawHeader() UnityEditor.Editor.OnHeaderGUI() UnityEditor.Editor.ShouldHideOpenButton() UnityEditor.Editor.HasPreviewGUI() UnityEditor.Editor.GetPreviewTitle() UnityEditor.Editor.RenderStaticPreview(System.String, UnityEngine.Object[], System.Int32, System.Int32) UnityEditor.Editor.OnPreviewGUI(UnityEngine.Rect, UnityEngine.GUIStyle) UnityEditor.Editor.OnInteractivePreviewGUI(UnityEngine.Rect, UnityEngine.GUIStyle) UnityEditor.Editor.OnPreviewSettings() UnityEditor.Editor.GetInfoString() UnityEditor.Editor.DrawPreview(UnityEngine.Rect) UnityEditor.Editor.ReloadPreviewInstances() UnityEditor.Editor.UseDefaultMargins() UnityEditor.Editor.Initialize(UnityEngine.Object[]) UnityEditor.Editor.MoveNextTarget() UnityEditor.Editor.ResetTarget() UnityEditor.Editor.CreateEditorWithContext(UnityEngine.Object[], UnityEngine.Object, System.Type) UnityEditor.Editor.target UnityEditor.Editor.targets UnityEditor.Editor.serializedObject UnityEditor.Editor.finishedDefaultHeaderGUI UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax [CustomEditor(typeof(SetterAsset))] public class SetterAssetEditor : Editor, IPreviewable, IToolModeOwner Methods View Source OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides UnityEditor.Editor.OnInspectorGUI()"
  },
  "api/ILib.AssetBundles.html": {
    "href": "api/ILib.AssetBundles.html",
    "title": "Namespace ILib.AssetBundles | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.AssetBundles Classes ABLoader アセットバンドルのローダーです。 開始時にInitializeで初期化してから利用してください。 AutoUnloader BundleContainerRef 指定のアセットバンドルと依存先のバンドルをを保持したコンテナへの参照です。 バンドルが不要になった際はDisposeを実行します。 すべての参照がDisposeされた際に実際にアンロードされます。Disposeを忘れた場合リークします。 BundleData FileLoadOperation Initializer InternalInitializer InternalLoadOperator LoadOperation NetworkInitializer NetworkLoadOperator Interfaces IBundleData IBundleDataProvider ILoadOperator Enums UnloadMode"
  },
  "api/ILib.Audio.GeneralSoundProvider-1.html": {
    "href": "api/ILib.Audio.GeneralSoundProvider-1.html",
    "title": "Class GeneralSoundProvider<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class GeneralSoundProvider<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します Inheritance Object SoundProviderBase <T> GeneralSoundProvider<T> Implements ISoundProvider <T> Inherited Members SoundProviderBase<T>.MixerGroup SoundProviderBase<T>.PathConversion SoundProviderBase<T>.CustomLoad SoundProviderBase<T>.SetPathFormat(String) SoundProviderBase<T>.GetPath(T) SoundProviderBase<T>.ISoundProvider<T>.Load(T, Action<SoundInfo, Exception>) SoundProviderBase<T>.Load(T, Action<SoundInfo, Exception>) Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class GeneralSoundProvider<T> : SoundProviderBase<T>, ISoundProvider<T> Type Parameters Name Description T Constructors View Source GeneralSoundProvider() Declaration public GeneralSoundProvider() View Source GeneralSoundProvider(AudioMixerGroup, String) Declaration public GeneralSoundProvider(AudioMixerGroup group, string format) Parameters Type Name Description UnityEngine.Audio.AudioMixerGroup group String format Methods View Source GetCacheKey(T) Declaration public override string GetCacheKey(T prm) Parameters Type Name Description T prm Returns Type Description String Overrides ILib.Audio.SoundProviderBase<T>.GetCacheKey(T) Implements ISoundProvider<T> Extension Methods ISoundProviderEx.Create<T>(ISoundProvider<T>, SoundPlayerConfig)"
  },
  "api/ILib.Audio.ICacheKey.html": {
    "href": "api/ILib.Audio.ICacheKey.html",
    "title": "Interface ICacheKey | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ICacheKey キャッシュ用のキーへの変換機能を提供します Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public interface ICacheKey Methods View Source GetCacheKey() キャッシュ用のキーを取得 Declaration string GetCacheKey() Returns Type Description String"
  },
  "api/ILib.CodeEmit.AttributeEmitter.html": {
    "href": "api/ILib.CodeEmit.AttributeEmitter.html",
    "title": "Class AttributeEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class AttributeEmitter Inheritance Object EmitterBase AttributeEmitter Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public class AttributeEmitter : EmitterBase Fields View Source Args Declaration public List<string> Args Field Value Type Description List < String > View Source Name Declaration public string Name Field Value Type Description String Methods View Source AddArg(String) Declaration public void AddArg(string val) Parameters Type Name Description String val View Source AddProp(String, String) Declaration public void AddProp(string prop, string value) Parameters Type Name Description String prop String value View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter)"
  },
  "api/ILib.CodeEmit.ClassEmitter.html": {
    "href": "api/ILib.CodeEmit.ClassEmitter.html",
    "title": "Class ClassEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class ClassEmitter Inheritance Object EmitterBase ClassEmitter Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public class ClassEmitter : EmitterBase Fields View Source Accessibility Declaration public string Accessibility Field Value Type Description String View Source Attributes Declaration public List<AttributeEmitter> Attributes Field Value Type Description List < AttributeEmitter > View Source Extends Declaration public List<string> Extends Field Value Type Description List < String > View Source Functions Declaration public List<FunctionEmitter> Functions Field Value Type Description List < FunctionEmitter > View Source Members Declaration public List<MemberEmitter> Members Field Value Type Description List < MemberEmitter > View Source Name Declaration public string Name Field Value Type Description String View Source Summary Declaration public string Summary Field Value Type Description String Methods View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter)"
  },
  "api/ILib.CodeEmit.html": {
    "href": "api/ILib.CodeEmit.html",
    "title": "Namespace ILib.CodeEmit | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.CodeEmit Classes AppendEmitter AttributeEmitter ClassEmitter CodeEmitter CodeWriter DelegateEmitter EmitterBase FieldEmitter FunctionEmitter FunctionEmitter.Argument LazyPropertyEmitter MemberEmitter PropertyEmitter ShortPropertyEmitter WriteLineEmitter"
  },
  "api/ILib.Contents.BootParam.html": {
    "href": "api/ILib.Contents.BootParam.html",
    "title": "Class BootParam | Yazawa Ichio Unity Package Document",
    "keywords": "Class BootParam Inheritance Object BootParam Implements IContentParam Namespace : ILib.Contents Assembly : ILib.dll Syntax public class BootParam : IContentParam Properties View Source BootContents Declaration public List<IContentParam> BootContents { get; set; } Property Value Type Description List < IContentParam > View Source ParallelBoot Declaration public bool ParallelBoot { get; set; } Property Value Type Description Boolean Methods View Source Add<T>(Object) Declaration public void Add<T>(object prm = null) where T : Content Parameters Type Name Description Object prm Type Parameters Name Description T Explicit Interface Implementations View Source IContentParam.GetContentType() Declaration Type IContentParam.GetContentType() Returns Type Description Type Implements IContentParam"
  },
  "api/ILib.Debugs.AutoRegisters.AutoRegisterTargetAttribute.html": {
    "href": "api/ILib.Debugs.AutoRegisters.AutoRegisterTargetAttribute.html",
    "title": "Class AutoRegisterTargetAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class AutoRegisterTargetAttribute Inheritance Object Attribute AutoRegisterTargetAttribute Namespace : ILib.Debugs.AutoRegisters Assembly : IchioLib.ScDebugMenu.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class AutoRegisterTargetAttribute : Attribute Properties View Source Category Declaration public string Category { get; set; } Property Value Type Description String View Source CategoryPriority Declaration public int CategoryPriority { get; set; } Property Value Type Description Int32 View Source Path Declaration public string Path { get; set; } Property Value Type Description String"
  },
  "api/ILib.Audio.ISoundProvider-1.html": {
    "href": "api/ILib.Audio.ISoundProvider-1.html",
    "title": "Interface ISoundProvider<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ISoundProvider<T> Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public interface ISoundProvider<T> Type Parameters Name Description T Properties View Source MixerGroup Declaration AudioMixerGroup MixerGroup { get; } Property Value Type Description UnityEngine.Audio.AudioMixerGroup Methods View Source GetCacheKey(T) Declaration string GetCacheKey(T prm) Parameters Type Name Description T prm Returns Type Description String View Source Load(T, Action<SoundInfo, Exception>) Declaration bool Load(T prm, Action<SoundInfo, Exception> onComplete) Parameters Type Name Description T prm Action < SoundInfo , Exception > onComplete Returns Type Description Boolean Extension Methods ISoundProviderEx.Create<T>(ISoundProvider<T>, SoundPlayerConfig)"
  },
  "api/ILib.Audio.MusicProvider.html": {
    "href": "api/ILib.Audio.MusicProvider.html",
    "title": "Class MusicProvider | Yazawa Ichio Unity Package Document",
    "keywords": "Class MusicProvider パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します Inheritance Object MusicProviderBase < String > MusicProvider Implements IMusicProvider IMusicProvider < String > Inherited Members MusicProviderBase<String>.PathConversion MusicProviderBase<String>.GroupSelector MusicProviderBase<String>.CustomLoad MusicProviderBase<String>.SetGroup(AudioMixerGroup) MusicProviderBase<String>.SetPathFormat(String) MusicProviderBase<String>.GetPath(String) MusicProviderBase<String>.IMusicProvider<String>.Load(String, Action<MusicInfo, Exception>) MusicProviderBase<String>.Load(String, Action<MusicInfo, Exception>) Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class MusicProvider : MusicProviderBase<string>, IMusicProvider, IMusicProvider<string> Constructors View Source MusicProvider() Declaration public MusicProvider() View Source MusicProvider(AudioMixerGroup, String) Declaration public MusicProvider(AudioMixerGroup group, string format) Parameters Type Name Description UnityEngine.Audio.AudioMixerGroup group String format Methods View Source GetString(String) Declaration protected override string GetString(string prm) Parameters Type Name Description String prm Returns Type Description String Overrides ILib.Audio.MusicProviderBase<System.String>.GetString(System.String) Implements IMusicProvider IMusicProvider<T> Extension Methods IMusicProviderEx.Create(IMusicProvider, MusicPlayerConfig) IMusicProviderEx.Create<T>(IMusicProvider<T>, MusicPlayerConfig)"
  },
  "api/ILib.Audio.MusicProviderBase-1.html": {
    "href": "api/ILib.Audio.MusicProviderBase-1.html",
    "title": "Class MusicProviderBase<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class MusicProviderBase<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します Inheritance Object MusicProviderBase<T> GeneralMusicProvider<T> IntKeyMusicProvider<T> MusicProvider MusicProvider<T> Implements IMusicProvider <T> Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public abstract class MusicProviderBase<T> : IMusicProvider<T> Type Parameters Name Description T Constructors View Source MusicProviderBase() Declaration public MusicProviderBase() View Source MusicProviderBase(AudioMixerGroup, String) Declaration public MusicProviderBase(AudioMixerGroup group, string format) Parameters Type Name Description UnityEngine.Audio.AudioMixerGroup group String format Properties View Source CustomLoad Declaration public Func<T, Action<MusicInfo, Exception>, bool> CustomLoad { set; } Property Value Type Description Func <T, Action < MusicInfo , Exception >, Boolean > View Source GroupSelector Declaration public Func<string, AudioMixerGroup> GroupSelector { set; } Property Value Type Description Func < String , UnityEngine.Audio.AudioMixerGroup > View Source PathConversion Declaration public Func<string, string> PathConversion { set; } Property Value Type Description Func < String , String > Methods View Source GetPath(T) Declaration protected string GetPath(T prm) Parameters Type Name Description T prm Returns Type Description String View Source GetString(T) Declaration protected abstract string GetString(T prm) Parameters Type Name Description T prm Returns Type Description String View Source Load(T, Action<MusicInfo, Exception>) Declaration protected virtual bool Load(T prm, Action<MusicInfo, Exception> onComplete) Parameters Type Name Description T prm Action < MusicInfo , Exception > onComplete Returns Type Description Boolean View Source SetGroup(AudioMixerGroup) Declaration public MusicProviderBase<T> SetGroup(AudioMixerGroup group) Parameters Type Name Description UnityEngine.Audio.AudioMixerGroup group Returns Type Description MusicProviderBase <T> View Source SetPathFormat(String) Declaration public MusicProviderBase<T> SetPathFormat(string format) Parameters Type Name Description String format Returns Type Description MusicProviderBase <T> Explicit Interface Implementations View Source IMusicProvider<T>.Load(T, Action<MusicInfo, Exception>) Declaration bool IMusicProvider<T>.Load(T prm, Action<MusicInfo, Exception> onComplete) Parameters Type Name Description T prm Action < MusicInfo , Exception > onComplete Returns Type Description Boolean Implements IMusicProvider<T> Extension Methods IMusicProviderEx.Create<T>(IMusicProvider<T>, MusicPlayerConfig)"
  },
  "api/ILib.Audio.SoundManagement.ConfigAsset.html": {
    "href": "api/ILib.Audio.SoundManagement.ConfigAsset.html",
    "title": "Class ConfigAsset | Yazawa Ichio Unity Package Document",
    "keywords": "Class ConfigAsset Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject ConfigAsset Inherited Members UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() Namespace : ILib.Audio.SoundManagement Assembly : ILib.SoundManager.dll Syntax [CreateAssetMenu(menuName = \"ILib/Audio/SoundManagerConfig\")] public class ConfigAsset : ScriptableObject Methods View Source GetConfig(ISoundLoader) Declaration public Config GetConfig(ISoundLoader loader = null) Parameters Type Name Description ISoundLoader loader Returns Type Description Config"
  },
  "api/ILib.Audio.SoundManagement.ISoundLoader.html": {
    "href": "api/ILib.Audio.SoundManagement.ISoundLoader.html",
    "title": "Interface ISoundLoader | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ISoundLoader Namespace : ILib.Audio.SoundManagement Assembly : ILib.SoundManager.dll Syntax public interface ISoundLoader Methods View Source LoadMusic(String, Action<MusicInfo, Exception>) Declaration bool LoadMusic(string path, Action<MusicInfo, Exception> onLoad) Parameters Type Name Description String path Action < MusicInfo , Exception > onLoad Returns Type Description Boolean View Source LoadSound(String, Action<SoundInfo, Exception>) Declaration bool LoadSound(string path, Action<SoundInfo, Exception> onLoad) Parameters Type Name Description String path Action < SoundInfo , Exception > onLoad Returns Type Description Boolean View Source LoadVoice(String, Action<SoundInfo, Exception>) Declaration bool LoadVoice(string path, Action<SoundInfo, Exception> onLoad) Parameters Type Name Description String path Action < SoundInfo , Exception > onLoad Returns Type Description Boolean"
  },
  "api/ILib.Audio.SoundProvider-1.html": {
    "href": "api/ILib.Audio.SoundProvider-1.html",
    "title": "Class SoundProvider<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class SoundProvider<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します Inheritance Object SoundProviderBase <T> SoundProvider<T> Implements ISoundProvider <T> Inherited Members SoundProviderBase<T>.MixerGroup SoundProviderBase<T>.PathConversion SoundProviderBase<T>.CustomLoad SoundProviderBase<T>.SetPathFormat(String) SoundProviderBase<T>.GetPath(T) SoundProviderBase<T>.ISoundProvider<T>.Load(T, Action<SoundInfo, Exception>) SoundProviderBase<T>.Load(T, Action<SoundInfo, Exception>) Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class SoundProvider<T> : SoundProviderBase<T>, ISoundProvider<T> where T : ICacheKey Type Parameters Name Description T Constructors View Source SoundProvider() Declaration public SoundProvider() View Source SoundProvider(AudioMixerGroup, String) Declaration public SoundProvider(AudioMixerGroup group, string format) Parameters Type Name Description UnityEngine.Audio.AudioMixerGroup group String format Methods View Source GetCacheKey(T) Declaration public override string GetCacheKey(T prm) Parameters Type Name Description T prm Returns Type Description String Overrides ILib.Audio.SoundProviderBase<T>.GetCacheKey(T) Implements ISoundProvider<T> Extension Methods ISoundProviderEx.Create<T>(ISoundProvider<T>, SoundPlayerConfig)"
  },
  "api/ILib.Audio.SoundProvider.html": {
    "href": "api/ILib.Audio.SoundProvider.html",
    "title": "Class SoundProvider | Yazawa Ichio Unity Package Document",
    "keywords": "Class SoundProvider パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します Inheritance Object SoundProviderBase < String > SoundProvider Implements ISoundProvider < String > Inherited Members SoundProviderBase<String>.MixerGroup SoundProviderBase<String>.PathConversion SoundProviderBase<String>.CustomLoad SoundProviderBase<String>.SetPathFormat(String) SoundProviderBase<String>.GetPath(String) SoundProviderBase<String>.ISoundProvider<String>.Load(String, Action<SoundInfo, Exception>) SoundProviderBase<String>.Load(String, Action<SoundInfo, Exception>) Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class SoundProvider : SoundProviderBase<string>, ISoundProvider<string> Constructors View Source SoundProvider() Declaration public SoundProvider() View Source SoundProvider(AudioMixerGroup, String) Declaration public SoundProvider(AudioMixerGroup group, string format) Parameters Type Name Description UnityEngine.Audio.AudioMixerGroup group String format Methods View Source GetCacheKey(String) Declaration public override string GetCacheKey(string prm) Parameters Type Name Description String prm Returns Type Description String Overrides ILib.Audio.SoundProviderBase<System.String>.GetCacheKey(System.String) Implements ISoundProvider<T> Extension Methods ISoundProviderEx.Create(ISoundProvider<String>, SoundPlayerConfig) ISoundProviderEx.Create<T>(ISoundProvider<T>, SoundPlayerConfig)"
  },
  "api/ILib.Audio.ValueTweener.html": {
    "href": "api/ILib.Audio.ValueTweener.html",
    "title": "Class ValueTweener | Yazawa Ichio Unity Package Document",
    "keywords": "Class ValueTweener Inheritance Object ValueTweener Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class ValueTweener Constructors View Source ValueTweener(Single, Func<Single, Single>) Declaration public ValueTweener(float initValue, Func<float, float> easing = null) Parameters Type Name Description Single initValue Func < Single , Single > easing Fields View Source CurrentValue Declaration public float CurrentValue Field Value Type Description Single View Source IsRunning Declaration public bool IsRunning Field Value Type Description Boolean Methods View Source Get(Single) Declaration public float Get(float delta) Parameters Type Name Description Single delta Returns Type Description Single View Source Start(Single, Single, Action) Declaration public void Start(float end, float time, Action onComplete = null) Parameters Type Name Description Single end Single time Action onComplete View Source Start(Single, Single, Single, Action) Declaration public void Start(float start, float end, float time, Action onComplete = null) Parameters Type Name Description Single start Single end Single time Action onComplete View Source Stop(Boolean) Declaration public void Stop(bool complete = false) Parameters Type Name Description Boolean complete"
  },
  "api/ILib.Audio.html": {
    "href": "api/ILib.Audio.html",
    "title": "Namespace ILib.Audio | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.Audio Classes AbortException Cache CacheScope GeneralMusicProvider<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します GeneralSoundProvider<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します IMusicProviderEx IntKeyMusicProvider<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します IntKeySoundProvider<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します ISoundProviderEx MusicData MusicInfo MusicPlayerConfig MusicPlayerImpl ミュージックプレイヤーの実体です MusicPlayerImpl<T> ミュージックプレイヤーの実体です MusicProvider パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します MusicProvider<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します MusicProviderBase<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します NotPoolException PlayingList PlayingMusic SoundControl オーディオソース等のを必要なゲームオブジェクトを確保し管理する用のクラスです。 使用しているプレイヤーが破棄されたときに自動的に削除されます。 また、Release関数を呼ぶと生成したすべてのプールを強制的に破棄します。 SoundData SoundInfo SoundManager ISoundPlayerとIMusicPlayerを利用した標準的なサウンドマネージャーのリファレンス実装です。 SoundPlayerConfig SoundPlayerImpl サウンドプレイヤーの実体です SoundPlayerImpl<T> サウンドプレイヤーの実体です SoundProvider パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します SoundProvider<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します SoundProviderBase<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します SoundUtil StartControl TimeoutException ToolMenu ValueTweener Structs MusicPlayConfig Interfaces ICacheKey キャッシュ用のキーへの変換機能を提供します ICacheScope IMusicPlayer IMusicPlayer<T> IMusicProvider IMusicProvider<T> IPlayingList IPlayingSoundContext 再生中のSEのコントローラーです。 キャッシュがなく遅延再生時でも再生開始時に設定が適応されます。 再生停止後は一切の操作が反映されなくなります。 ISoundPlayer サウンドプレイヤーです。 不要になった際はDisposeを実行してください。 ISoundPlayer<T> サウンドプレイヤーです。 不要になった際はDisposeを実行してください。 ISoundProvider<T> IStartControl Enums StartControl.Result StartControl.Type"
  },
  "api/ILib.Caller.IHasDispatcher.html": {
    "href": "api/ILib.Caller.IHasDispatcher.html",
    "title": "Interface IHasDispatcher | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IHasDispatcher Namespace : ILib.Caller Assembly : ILib.dll Syntax public interface IHasDispatcher Properties View Source Dispatcher Declaration IDispatcher Dispatcher { get; } Property Value Type Description IDispatcher Extension Methods DispatcherExtensions.Message(IHasDispatcher, Object) DispatcherExtensions.Message<T>(IHasDispatcher, Object, T) DispatcherExtensions.Broadcast(IHasDispatcher, Object) DispatcherExtensions.Broadcast<T>(IHasDispatcher, Object, T)"
  },
  "api/ILib.Caller.IPath.html": {
    "href": "api/ILib.Caller.IPath.html",
    "title": "Interface IPath | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IPath Callに登録したイベントのハンドラーです。 Inherited Members IDisposable.Dispose() Namespace : ILib.Caller Assembly : ILib.dll Syntax public interface IPath : IDisposable Properties View Source Key Declaration string Key { get; } Property Value Type Description String"
  },
  "api/ILib.Caller.html": {
    "href": "api/ILib.Caller.html",
    "title": "Namespace ILib.Caller | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.Caller Classes Call Dispatcher EventCall 登録したイベントの呼び出し手続きを行うクラスです。 階層構造を持つことが出来ます。 Handle Callに登録したオブジェクトのハンドルです。 HandleAttribute Interfaces IDispatcher IHasDispatcher IPath Callに登録したイベントのハンドラーです。"
  },
  "api/ILib.CL.ArgAttribute.html": {
    "href": "api/ILib.CL.ArgAttribute.html",
    "title": "Class ArgAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class ArgAttribute Inheritance Object Attribute ArgAttribute Namespace : ILib.CL Assembly : ILib.CL.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Field, AllowMultiple = true, Inherited = true)] public class ArgAttribute : Attribute Constructors View Source ArgAttribute(Char) Declaration public ArgAttribute(char shortName) Parameters Type Name Description Char shortName View Source ArgAttribute(Char, String) Declaration public ArgAttribute(char shortName, string longName) Parameters Type Name Description Char shortName String longName View Source ArgAttribute(String) Declaration public ArgAttribute(string longName) Parameters Type Name Description String longName Properties View Source LongName Declaration public string LongName { get; } Property Value Type Description String View Source Required Declaration public bool Required { get; set; } Property Value Type Description Boolean View Source ShortName Declaration public char ShortName { get; } Property Value Type Description Char"
  },
  "api/ILib.Contents.ContentParam-1.html": {
    "href": "api/ILib.Contents.ContentParam-1.html",
    "title": "Class ContentParam<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class ContentParam<T> Inheritance Object ContentParam<T> Implements IContentParam Namespace : ILib.Contents Assembly : ILib.dll Syntax public abstract class ContentParam<T> : IContentParam where T : Content Type Parameters Name Description T Methods View Source GetContentType() Declaration public virtual Type GetContentType() Returns Type Description Type Implements IContentParam"
  },
  "api/ILib.Contents.ContentsController.html": {
    "href": "api/ILib.Contents.ContentsController.html",
    "title": "Class ContentsController | Yazawa Ichio Unity Package Document",
    "keywords": "Class ContentsController アプリケーションの全体の制御を行います。 個々の制御はContentを継承したクラスに記述します。 Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour ContentsController Implements IHasDispatcher Namespace : ILib.Contents Assembly : ILib.dll Syntax public class ContentsController : MonoBehaviour, IHasDispatcher Properties View Source Call イベントの Declaration public EventCall Call { get; } Property Value Type Description EventCall View Source Dispatcher コンテンツに実行されるイベントの発火装置 Declaration public IDispatcher Dispatcher { get; } Property Value Type Description IDispatcher View Source Modules コンテンツを跨ぐ機能を提供するモジュールを管理します Declaration public ModuleCollection Modules { get; } Property Value Type Description ModuleCollection View Source Root ルートコンテンツ Declaration public Content Root { get; } Property Value Type Description Content Methods View Source Boot(BootParam, Boolean) コントローラーを起動します。 BootParamで指定したコンテンツが起動します。 Declaration public ITriggerAction<bool> Boot(BootParam param, bool throwError = true) Parameters Type Name Description BootParam param Boolean throwError Returns Type Description ITriggerAction < Boolean > View Source Boot<T>(Object, Boolean) 指定したコンテンツでコントローラーを起動します。 Declaration public ITriggerAction<bool> Boot<T>(object prm, bool throwError = true) where T : Content, new() Parameters Type Name Description Object prm Boolean throwError Returns Type Description ITriggerAction < Boolean > Type Parameters Name Description T View Source Get<T>() 指定のタイプのコンテンツを取得します。 Declaration public T Get<T>() where T : Content Returns Type Description T Type Parameters Name Description T View Source GetAll<T>() 指定のタイプのコンテンツをすべて取得します。 Declaration public IEnumerable<T> GetAll<T>() where T : Content Returns Type Description IEnumerable <T> Type Parameters Name Description T View Source HandleException(Exception) Declaration protected virtual bool HandleException(Exception ex) Parameters Type Name Description Exception ex Returns Type Description Boolean View Source OnDestroyEvent() Declaration protected virtual void OnDestroyEvent() View Source Shutdown() コントローラーを終了します。 Declaration public ITriggerAction<bool> Shutdown() Returns Type Description ITriggerAction < Boolean > View Source ThrowException(Exception) コントローラーに例外をスローします Declaration public void ThrowException(Exception ex) Parameters Type Name Description Exception ex Events View Source OnException コンテンツの例外をハンドリングします Declaration public event Action<Exception> OnException Event Type Type Description Action < Exception > Implements IHasDispatcher Extension Methods DispatcherExtensions.Message(IHasDispatcher, Object) DispatcherExtensions.Message<T>(IHasDispatcher, Object, T) DispatcherExtensions.Broadcast(IHasDispatcher, Object) DispatcherExtensions.Broadcast<T>(IHasDispatcher, Object, T) RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.Debugs.Widgets.DebugFloatFieldItem.html": {
    "href": "api/ILib.Debugs.Widgets.DebugFloatFieldItem.html",
    "title": "Class DebugFloatFieldItem | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugFloatFieldItem Inheritance Object ScMinimumWidget DebugItemBase DebugInputFieldItemBase DebugValueFieldItem < Single > DebugFloatFieldItem Implements IScWidget Inherited Members DebugValueFieldItem<Single>.m_Value DebugValueFieldItem<Single>.Value DebugValueFieldItem<Single>.OnChanged DebugInputFieldItemBase.m_InputField DebugInputFieldItemBase.DefContentsWeight DebugInputFieldItemBase.Create() DebugItemBase.Label DebugItemBase.LabelWeight DebugItemBase.ContentsWeight ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugFloatFieldItem : DebugValueFieldItem<float>, IScWidget Methods View Source OnChangedInput(String) Declaration protected override void OnChangedInput(string val) Parameters Type Name Description String val Overrides DebugInputFieldItemBase.OnChangedInput(String) Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.DebugInputFieldItem.html": {
    "href": "api/ILib.Debugs.Widgets.DebugInputFieldItem.html",
    "title": "Class DebugInputFieldItem | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugInputFieldItem Inheritance Object ScMinimumWidget DebugItemBase DebugInputFieldItemBase DebugInputFieldItem Implements IScWidget Inherited Members DebugInputFieldItemBase.m_InputField DebugInputFieldItemBase.DefContentsWeight DebugInputFieldItemBase.Create() DebugInputFieldItemBase.OnChangedInput(String) DebugItemBase.Label DebugItemBase.LabelWeight DebugItemBase.ContentsWeight ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugInputFieldItem : DebugInputFieldItemBase, IScWidget Properties View Source Input Declaration public string Input { get; set; } Property Value Type Description String View Source OnChanged Declaration public Action<string> OnChanged { set; } Property Value Type Description Action < String > Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.DebugRadioButtonItem.html": {
    "href": "api/ILib.Debugs.Widgets.DebugRadioButtonItem.html",
    "title": "Class DebugRadioButtonItem | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugRadioButtonItem Inheritance Object ScMinimumWidget DebugRadioButtonItem Implements IScWidget IFixedHeight Inherited Members ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugRadioButtonItem : ScMinimumWidget, IScWidget, IFixedHeight Constructors View Source DebugRadioButtonItem() Declaration public DebugRadioButtonItem() Properties View Source Height Declaration public float Height { get; } Property Value Type Description Single View Source Items Declaration public string[] Items { set; } Property Value Type Description String [] View Source OnChanged Declaration public Action<int, string> OnChanged { set; } Property Value Type Description Action < Int32 , String > Methods View Source CalcLayout(Rect) Declaration public override void CalcLayout(Rect rect) Parameters Type Name Description UnityEngine.Rect rect Overrides ScMinimumWidget.CalcLayout(Rect) View Source SetItems(String[], Int32) Declaration public void SetItems(string[] items, int select = -1) Parameters Type Name Description String [] items Int32 select Implements IScWidget IFixedHeight"
  },
  "api/ILib.Debugs.Widgets.DebugSliderItem.html": {
    "href": "api/ILib.Debugs.Widgets.DebugSliderItem.html",
    "title": "Class DebugSliderItem | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugSliderItem Inheritance Object ScMinimumWidget DebugItemBase DebugSliderItemBase DebugSliderItem Implements IScWidget Inherited Members DebugSliderItemBase.m_ContentsSplitter DebugSliderItemBase.m_Slider DebugSliderItemBase.m_InputField DebugSliderItemBase.DefContentsWeight DebugSliderItemBase.InputWeight DebugSliderItemBase.SliderWeight DebugSliderItemBase.Create() DebugItemBase.Label DebugItemBase.LabelWeight DebugItemBase.ContentsWeight ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugSliderItem : DebugSliderItemBase, IScWidget Properties View Source MaxValue Declaration public float MaxValue { get; set; } Property Value Type Description Single View Source MinValue Declaration public float MinValue { get; set; } Property Value Type Description Single View Source OnChanged Declaration public Action<float> OnChanged { set; } Property Value Type Description Action < Single > View Source Value Declaration public float Value { get; set; } Property Value Type Description Single Methods View Source OnChange(Single) Declaration protected override sealed void OnChange(float val) Parameters Type Name Description Single val Overrides DebugSliderItemBase.OnChange(Single) View Source OnChange(String) Declaration protected override void OnChange(string val) Parameters Type Name Description String val Overrides DebugSliderItemBase.OnChange(String) Implements IScWidget"
  },
  "api/ILib.IRoutine.html": {
    "href": "api/ILib.IRoutine.html",
    "title": "Interface IRoutine | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IRoutine Inherited Members IDisposable.Dispose() Namespace : ILib Assembly : ILib.dll Syntax public interface IRoutine : IDisposable Properties View Source IsRunning Declaration bool IsRunning { get; } Property Value Type Description Boolean View Source Restartable Declaration bool Restartable { get; } Property Value Type Description Boolean Methods View Source Cancel() Declaration void Cancel() View Source Start() Declaration void Start()"
  },
  "api/ILib.IterationTaskRoutine-1.html": {
    "href": "api/ILib.IterationTaskRoutine-1.html",
    "title": "Class IterationTaskRoutine<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class IterationTaskRoutine<T> Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Inheritance Object UnityEngine.CustomYieldInstruction RoutineBase IterationTaskRoutine<T> Implements IEnumerator IRoutine <T> IHasTriggerAction <T> IHasTriggerAction IRoutine IDisposable Inherited Members RoutineBase.IsRunning RoutineBase.Restartable RoutineBase.keepWaiting RoutineBase.Start() RoutineBase.Cancel() RoutineBase.IDisposable.Dispose() UnityEngine.CustomYieldInstruction.MoveNext() UnityEngine.CustomYieldInstruction.Reset() UnityEngine.CustomYieldInstruction.Current Namespace : ILib Assembly : ILib.dll Syntax public class IterationTaskRoutine<T> : RoutineBase, IEnumerator, IRoutine<T>, IHasTriggerAction<T>, IHasTriggerAction, IRoutine, IDisposable Type Parameters Name Description T Constructors View Source IterationTaskRoutine(MonoBehaviour, IEnumerator) Declaration public IterationTaskRoutine(MonoBehaviour behaviour, IEnumerator routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour IEnumerator routine View Source IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) Declaration public IterationTaskRoutine(MonoBehaviour behaviour, Func<IEnumerator> routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour Func < IEnumerator > routine Properties View Source Action Declaration public ITriggerAction<T> Action { get; } Property Value Type Description ITriggerAction <T> View Source Complete Declaration public ITriggerAction<bool> Complete { get; } Property Value Type Description ITriggerAction < Boolean > Methods View Source Fail(Exception) Declaration protected override void Fail(Exception ex) Parameters Type Name Description Exception ex Overrides RoutineBase.Fail(Exception) View Source Result(IHasResult) Declaration protected override bool Result(IHasResult result) Parameters Type Name Description IHasResult result Returns Type Description Boolean Overrides RoutineBase.Result(IHasResult) View Source Success() Declaration protected override void Success() Overrides RoutineBase.Success() Explicit Interface Implementations View Source IHasTriggerAction.Action Declaration ITriggerAction IHasTriggerAction.Action { get; } Returns Type Description ITriggerAction Implements System.Collections.IEnumerator IRoutine<T> IHasTriggerAction<T> IHasTriggerAction IRoutine System.IDisposable Extension Methods TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T, Exception>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Trigger<T>) TriggerExtensions.AddFail<T>(IHasTriggerAction<T>, Action<Exception>) TriggerExtensions.Wait<T>(IHasTriggerAction<T>) TriggerExtensions.Select<T, U>(IHasTriggerAction<T>, Func<T, U>, Boolean) TriggerExtensions.Where<T>(IHasTriggerAction<T>, Func<T, Boolean>) TriggerExtensions.Any<T>(IHasTriggerAction<T>) TriggerExtensions.Then<T, U>(IHasTriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) TriggerExtensions.Then<T>(IHasTriggerAction<T>, Func<T, ITriggerAction>, Boolean) TriggerExtensions.Time<T>(IHasTriggerAction<T>, Single) TriggerExtensions.Realtime<T>(IHasTriggerAction<T>, Single) TriggerExtensions.GetAwaiter(IHasTriggerAction) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>, CancellationToken)"
  },
  "api/ILib.IterationTaskRoutine.html": {
    "href": "api/ILib.IterationTaskRoutine.html",
    "title": "Class IterationTaskRoutine | Yazawa Ichio Unity Package Document",
    "keywords": "Class IterationTaskRoutine Unityのコルーチンのラッパーです。 IHasResult型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 Inheritance Object UnityEngine.CustomYieldInstruction RoutineBase IterationTaskRoutine Implements IEnumerator IRoutine < Object > IHasTriggerAction < Object > IHasTriggerAction IRoutine IDisposable Inherited Members RoutineBase.IsRunning RoutineBase.Restartable RoutineBase.keepWaiting RoutineBase.Start() RoutineBase.Cancel() RoutineBase.IDisposable.Dispose() UnityEngine.CustomYieldInstruction.MoveNext() UnityEngine.CustomYieldInstruction.Reset() UnityEngine.CustomYieldInstruction.Current Namespace : ILib Assembly : ILib.dll Syntax public class IterationTaskRoutine : RoutineBase, IEnumerator, IRoutine<object>, IHasTriggerAction<object>, IHasTriggerAction, IRoutine, IDisposable Constructors View Source IterationTaskRoutine(MonoBehaviour, IEnumerator) Declaration public IterationTaskRoutine(MonoBehaviour behaviour, IEnumerator routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour IEnumerator routine View Source IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) Declaration public IterationTaskRoutine(MonoBehaviour behaviour, Func<IEnumerator> routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour Func < IEnumerator > routine Properties View Source Action Declaration public ITriggerAction<object> Action { get; } Property Value Type Description ITriggerAction < Object > View Source Complete Declaration public ITriggerAction<bool> Complete { get; } Property Value Type Description ITriggerAction < Boolean > Methods View Source Fail(Exception) Declaration protected override void Fail(Exception ex) Parameters Type Name Description Exception ex Overrides RoutineBase.Fail(Exception) View Source Result(IHasResult) Declaration protected override bool Result(IHasResult result) Parameters Type Name Description IHasResult result Returns Type Description Boolean Overrides RoutineBase.Result(IHasResult) View Source Success() Declaration protected override void Success() Overrides RoutineBase.Success() Explicit Interface Implementations View Source IHasTriggerAction.Action Declaration ITriggerAction IHasTriggerAction.Action { get; } Returns Type Description ITriggerAction Implements System.Collections.IEnumerator IRoutine<T> IHasTriggerAction<T> IHasTriggerAction IRoutine System.IDisposable Extension Methods TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T, Exception>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Trigger<T>) TriggerExtensions.AddFail<T>(IHasTriggerAction<T>, Action<Exception>) TriggerExtensions.Wait<T>(IHasTriggerAction<T>) TriggerExtensions.Select<T, U>(IHasTriggerAction<T>, Func<T, U>, Boolean) TriggerExtensions.Where<T>(IHasTriggerAction<T>, Func<T, Boolean>) TriggerExtensions.Any<T>(IHasTriggerAction<T>) TriggerExtensions.Then<T, U>(IHasTriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) TriggerExtensions.Then<T>(IHasTriggerAction<T>, Func<T, ITriggerAction>, Boolean) TriggerExtensions.Time<T>(IHasTriggerAction<T>, Single) TriggerExtensions.Realtime<T>(IHasTriggerAction<T>, Single) TriggerExtensions.GetAwaiter(IHasTriggerAction) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>, CancellationToken)"
  },
  "api/ILib.ITriggerAction-1.html": {
    "href": "api/ILib.ITriggerAction-1.html",
    "title": "Interface ITriggerAction<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ITriggerAction<T> Inherited Members ITriggerAction.OnFail ITriggerAction.OnCancel ITriggerAction.OnComplete ITriggerAction.Fired ITriggerAction.Error ITriggerAction.Canceled ITriggerAction.OneShot ITriggerAction.Add(Action) ITriggerAction.Clear() ITriggerAction.Cancel() IDisposable.Dispose() IEnumerator.MoveNext() IEnumerator.Reset() IEnumerator.Current Namespace : ILib Assembly : ILib.dll Syntax public interface ITriggerAction<T> : ITriggerAction, IDisposable, IEnumerator Type Parameters Name Description T Properties View Source Result Declaration T Result { get; } Property Value Type Description T Methods View Source Add(Action<T, Exception>) 成功と失敗のコールバックを実装します。 Clear関数以外で解除はできません。 Declaration ITriggerAction<T> Add(Action<T, Exception> action) Parameters Type Name Description Action <T, Exception > action Returns Type Description ITriggerAction <T> View Source Add(Action<T>) 成功時のコールバックを追加します。 Declaration ITriggerAction<T> Add(Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description ITriggerAction <T> View Source AddComplete(Action<Boolean>) 完了時のコールバックを追加します。 キャンセル時はfalseが返ります。 Declaration ITriggerAction<T> AddComplete(Action<bool> action) Parameters Type Name Description Action < Boolean > action Returns Type Description ITriggerAction <T> View Source AddFail(Action<Exception>) 失敗時のコールバックを追加します。 Declaration ITriggerAction<T> AddFail(Action<Exception> action) Parameters Type Name Description Action < Exception > action Returns Type Description ITriggerAction <T> View Source GetAwaiter() Awaiterを返します。 Declaration TriggerActionAwaiter<T> GetAwaiter() Returns Type Description TriggerActionAwaiter <T> View Source Remove(Action<T>) 成功時のコールバックを解除します。 Declaration ITriggerAction<T> Remove(Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description ITriggerAction <T> View Source RemoveComplete(Action<Boolean>) 完了時のコールバックを解除します。 Declaration ITriggerAction<T> RemoveComplete(Action<bool> action) Parameters Type Name Description Action < Boolean > action Returns Type Description ITriggerAction <T> View Source RemoveFail(Action<Exception>) 失敗時のコールバックを解除します。 Declaration ITriggerAction<T> RemoveFail(Action<Exception> action) Parameters Type Name Description Action < Exception > action Returns Type Description ITriggerAction <T> Events View Source OnFire 発火時のコールバックです。 内部的にAddとRemoveが実行されます。 Declaration event Action<T> OnFire Event Type Type Description Action <T> Extension Methods TriggerExtensions.Add<T>(ITriggerAction<T>, Trigger<T>) TriggerExtensions.Select<T>(ITriggerAction, Func<T>, Boolean) TriggerExtensions.Select<T, U>(ITriggerAction<T>, Func<T, U>, Boolean) TriggerExtensions.Where<T>(ITriggerAction<T>, Func<T, Boolean>) TriggerExtensions.Any<T>(ITriggerAction<T>) TriggerExtensions.Then<T, U>(ITriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) TriggerExtensions.Then<T>(ITriggerAction<T>, Func<T, ITriggerAction>, Boolean) TriggerExtensions.Time<T>(ITriggerAction<T>, Single) TriggerExtensions.Realtime<T>(ITriggerAction<T>, Single) TriggerExtensions.Timeout<T>(ITriggerAction<T>, Single, Boolean) TriggerExtensions.GetAwaiter(ITriggerAction) TriggerExtensions.GetAwaiter<T>(ITriggerAction<T>, CancellationToken)"
  },
  "api/ILib.MVVM.BindingEventHandler.html": {
    "href": "api/ILib.MVVM.BindingEventHandler.html",
    "title": "Class BindingEventHandler | Yazawa Ichio Unity Package Document",
    "keywords": "Class BindingEventHandler Inheritance Object BindingEventHandler Implements IViewEventHandler IViewElement Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class BindingEventHandler : IViewEventHandler, IViewElement Methods View Source Add(IViewEventHandler) Declaration public void Add(IViewEventHandler handler) Parameters Type Name Description IViewEventHandler handler View Source Remove(IViewEventHandler) Declaration public void Remove(IViewEventHandler handler) Parameters Type Name Description IViewEventHandler handler Explicit Interface Implementations View Source IViewEventHandler.OnViewEvent(String) Declaration void IViewEventHandler.OnViewEvent(string name) Parameters Type Name Description String name View Source IViewEventHandler.OnViewEvent<T>(String, T) Declaration void IViewEventHandler.OnViewEvent<T>(string name, T args) Parameters Type Name Description String name T args Type Parameters Name Description T Implements IViewEventHandler IViewElement"
  },
  "api/ILib.MVVM.BindingPropertyCollection.html": {
    "href": "api/ILib.MVVM.BindingPropertyCollection.html",
    "title": "Class BindingPropertyCollection | Yazawa Ichio Unity Package Document",
    "keywords": "Class BindingPropertyCollection Inheritance Object BindingPropertyCollection Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class BindingPropertyCollection Methods View Source Bind(IBinding) Declaration public void Bind(IBinding binding) Parameters Type Name Description IBinding binding View Source Get<T>(String) Declaration public T Get<T>(string path) Parameters Type Name Description String path Returns Type Description T Type Parameters Name Description T View Source Set<T>(String, T, out IBindingProperty<T>) Declaration public bool Set<T>(string path, T val, out IBindingProperty<T> newProperty) Parameters Type Name Description String path T val IBindingProperty <T> newProperty Returns Type Description Boolean Type Parameters Name Description T View Source SetAllDirty() Declaration public void SetAllDirty() View Source SetDirty(String) Declaration public void SetDirty(string path) Parameters Type Name Description String path View Source Subscribe<T>(String, Action<T>) Declaration public void Subscribe<T>(string path, Action<T> notify) Parameters Type Name Description String path Action <T> notify Type Parameters Name Description T View Source Unbind(IBinding) Declaration public void Unbind(IBinding binding) Parameters Type Name Description IBinding binding View Source Unsubscribe<T>(String, Action<T>) Declaration public void Unsubscribe<T>(string path, Action<T> notify) Parameters Type Name Description String path Action <T> notify Type Parameters Name Description T"
  },
  "api/ILib.MVVM.ButtonBind.html": {
    "href": "api/ILib.MVVM.ButtonBind.html",
    "title": "Class ButtonBind | Yazawa Ichio Unity Package Document",
    "keywords": "Class ButtonBind Inheritance Object LightBind < Boolean , UnityEngine.UI.Button > LightEventBind < Boolean , UnityEngine.UI.Button > ButtonBind Implements ILightBind IBindable < Boolean > IBindable IViewEvent IViewElement Inherited Members LightEventBind<Boolean, Button>.IViewEvent.Name LightEventBind<Boolean, Button>.IViewEvent.Bind(IViewEventHandler) LightEventBind<Boolean, Button>.EventType() LightEventBind<Boolean, Button>.Event() LightEventBind<Boolean, Button>.Event(String) LightEventBind<Boolean, Button>.Event(Boolean) LightEventBind<Boolean, Button>.Event<T>(String, T) LightEventBind<Boolean, Button>.Event(EventArgument) LightBind<Boolean, Button>.Path LightBind<Boolean, Button>.IsActive LightBind<Boolean, Button>.m_Target LightBind<Boolean, Button>.m_Hash LightBind<Boolean, Button>.Value LightBind<Boolean, Button>.BindType() LightBind<Boolean, Button>.Set(Boolean, Boolean) LightBind<Boolean, Button>.Init(Object, String) LightBind<Boolean, Button>.OnInit() LightBind<Boolean, Button>.IBindable.Bind(IBindingProperty) LightBind<Boolean, Button>.IBindable<Boolean>.Bind(IBindingProperty<Boolean>) LightBind<Boolean, Button>.IBindable.Unbind(IBindingProperty) LightBind<Boolean, Button>.OnUnbind() LightBind<Boolean, Button>.IBindable.TryUpdate() LightBind<Boolean, Button>.UpdateValue(Boolean) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class ButtonBind : LightEventBind<bool, Button>, ILightBind, IBindable<bool>, IBindable, IViewEvent, IViewElement Methods View Source EventType() Declaration public override Type EventType() Returns Type Description Type Overrides ILib.MVVM.LightEventBind<System.Boolean, UnityEngine.UI.Button>.EventType() View Source OnInit() Declaration protected override void OnInit() Overrides ILib.MVVM.LightBind<System.Boolean, UnityEngine.UI.Button>.OnInit() View Source UpdateValue(Boolean) Declaration protected override void UpdateValue(bool val) Parameters Type Name Description Boolean val Overrides ILib.MVVM.LightBind<System.Boolean, UnityEngine.UI.Button>.UpdateValue(System.Boolean) Implements ILightBind IBindable<T> IBindable IViewEvent IViewElement"
  },
  "api/ILib.MVVM.ButtonToggleBind.html": {
    "href": "api/ILib.MVVM.ButtonToggleBind.html",
    "title": "Class ButtonToggleBind | Yazawa Ichio Unity Package Document",
    "keywords": "Class ButtonToggleBind Inheritance Object LightBind < Boolean , UnityEngine.UI.Button > ButtonToggleBind Implements ILightBind IBindable < Boolean > IBindable IViewElement Inherited Members LightBind<Boolean, Button>.Path LightBind<Boolean, Button>.IsActive LightBind<Boolean, Button>.m_Target LightBind<Boolean, Button>.m_Hash LightBind<Boolean, Button>.Value LightBind<Boolean, Button>.BindType() LightBind<Boolean, Button>.Set(Boolean, Boolean) LightBind<Boolean, Button>.Init(Object, String) LightBind<Boolean, Button>.OnInit() LightBind<Boolean, Button>.IBindable.Bind(IBindingProperty) LightBind<Boolean, Button>.IBindable<Boolean>.Bind(IBindingProperty<Boolean>) LightBind<Boolean, Button>.IBindable.Unbind(IBindingProperty) LightBind<Boolean, Button>.OnUnbind() LightBind<Boolean, Button>.IBindable.TryUpdate() LightBind<Boolean, Button>.UpdateValue(Boolean) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class ButtonToggleBind : LightBind<bool, Button>, ILightBind, IBindable<bool>, IBindable, IViewElement Methods View Source OnInit() Declaration protected override void OnInit() Overrides ILib.MVVM.LightBind<System.Boolean, UnityEngine.UI.Button>.OnInit() View Source UpdateValue(Boolean) Declaration protected override void UpdateValue(bool val) Parameters Type Name Description Boolean val Overrides ILib.MVVM.LightBind<System.Boolean, UnityEngine.UI.Button>.UpdateValue(System.Boolean) Implements ILightBind IBindable<T> IBindable IViewElement"
  },
  "api/ILib.MVVM.DelegateCommand.html": {
    "href": "api/ILib.MVVM.DelegateCommand.html",
    "title": "Class DelegateCommand | Yazawa Ichio Unity Package Document",
    "keywords": "Class DelegateCommand Inheritance Object DelegateCommand Implements ICommand Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class DelegateCommand : ICommand Constructors View Source DelegateCommand(Action, Func<Boolean>) Declaration public DelegateCommand(Action action, Func<bool> canExecute = null) Parameters Type Name Description Action action Func < Boolean > canExecute Properties View Source CanExecute Declaration public bool CanExecute { get; } Property Value Type Description Boolean Explicit Interface Implementations View Source ICommand.Execute() Declaration void ICommand.Execute() Implements ICommand"
  },
  "api/ILib.MVVM.Drawer.BindingViewer.html": {
    "href": "api/ILib.MVVM.Drawer.BindingViewer.html",
    "title": "Class BindingViewer | Yazawa Ichio Unity Package Document",
    "keywords": "Class BindingViewer Inheritance Object BindingViewer Namespace : ILib.MVVM.Drawer Assembly : IchioLib.MVVM.Editor.dll Syntax [Serializable] public class BindingViewer Methods View Source Draw() Declaration public void Draw() View Source Setup(View) Declaration public void Setup(View view) Parameters Type Name Description View view View Source UpdateList() Declaration public void UpdateList()"
  },
  "api/ILib.MVVM.Drawer.ComponentElementViewer.html": {
    "href": "api/ILib.MVVM.Drawer.ComponentElementViewer.html",
    "title": "Class ComponentElementViewer | Yazawa Ichio Unity Package Document",
    "keywords": "Class ComponentElementViewer Inheritance Object ComponentElementViewer Implements IElementViewer Namespace : ILib.MVVM.Drawer Assembly : IchioLib.MVVM.Editor.dll Syntax public class ComponentElementViewer : IElementViewer Constructors View Source ComponentElementViewer(MonoBehaviour) Declaration public ComponentElementViewer(MonoBehaviour element) Parameters Type Name Description UnityEngine.MonoBehaviour element Methods View Source CanRemove() Declaration public bool CanRemove() Returns Type Description Boolean View Source DrawBinding(Boolean) Declaration public bool DrawBinding(bool selected) Parameters Type Name Description Boolean selected Returns Type Description Boolean View Source DrawInspector() Declaration public void DrawInspector() View Source GetName() Declaration public string GetName() Returns Type Description String View Source IsBindable() Declaration public bool IsBindable() Returns Type Description Boolean View Source Remove() Declaration public void Remove() Implements IElementViewer"
  },
  "api/ILib.MVVM.Drawer.IElementViewer.html": {
    "href": "api/ILib.MVVM.Drawer.IElementViewer.html",
    "title": "Interface IElementViewer | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IElementViewer Namespace : ILib.MVVM.Drawer Assembly : IchioLib.MVVM.Editor.dll Syntax public interface IElementViewer Methods View Source CanRemove() Declaration bool CanRemove() Returns Type Description Boolean View Source DrawBinding(Boolean) Declaration bool DrawBinding(bool selected) Parameters Type Name Description Boolean selected Returns Type Description Boolean View Source DrawInspector() Declaration void DrawInspector() View Source GetName() Declaration string GetName() Returns Type Description String View Source IsBindable() Declaration bool IsBindable() Returns Type Description Boolean View Source Remove() Declaration void Remove()"
  },
  "api/ILib.MVVM.LightBindHolder.html": {
    "href": "api/ILib.MVVM.LightBindHolder.html",
    "title": "Class LightBindHolder | Yazawa Ichio Unity Package Document",
    "keywords": "Class LightBindHolder Inheritance Object LightBindHolder Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax [Serializable] public class LightBindHolder Properties View Source Path Declaration public string Path { get; set; } Property Value Type Description String View Source Target Declaration public Object Target { get; } Property Value Type Description UnityEngine.Object View Source Type Declaration public Type Type { get; set; } Property Value Type Description Type Methods View Source Resolve() Declaration public IBindable Resolve() Returns Type Description IBindable"
  },
  "api/ILib.MVVM.LightEventBind-2.html": {
    "href": "api/ILib.MVVM.LightEventBind-2.html",
    "title": "Class LightEventBind<TValue, UTarget> | Yazawa Ichio Unity Package Document",
    "keywords": "Class LightEventBind<TValue, UTarget> Inheritance Object LightBind <TValue, UTarget> LightEventBind<TValue, UTarget> ButtonBind InputFieldBind IntEventButtonBind SliderBind StringEventButtonBind Implements ILightBind IBindable <TValue> IBindable IViewEvent IViewElement Inherited Members LightBind<TValue, UTarget>.Path LightBind<TValue, UTarget>.IsActive LightBind<TValue, UTarget>.m_Target LightBind<TValue, UTarget>.m_Hash LightBind<TValue, UTarget>.Value LightBind<TValue, UTarget>.BindType() LightBind<TValue, UTarget>.Set(TValue, Boolean) LightBind<TValue, UTarget>.Init(Object, String) LightBind<TValue, UTarget>.OnInit() LightBind<TValue, UTarget>.IBindable.Bind(IBindingProperty) LightBind<TValue, UTarget>.IBindable<TValue>.Bind(IBindingProperty<TValue>) LightBind<TValue, UTarget>.IBindable.Unbind(IBindingProperty) LightBind<TValue, UTarget>.OnUnbind() LightBind<TValue, UTarget>.IBindable.TryUpdate() LightBind<TValue, UTarget>.UpdateValue(TValue) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public abstract class LightEventBind<TValue, UTarget> : LightBind<TValue, UTarget>, ILightBind, IBindable<TValue>, IBindable, IViewEvent, IViewElement where UTarget : Object Type Parameters Name Description TValue UTarget Methods View Source Event() Declaration protected void Event() View Source Event(TValue) Declaration protected void Event(TValue val) Parameters Type Name Description TValue val View Source Event(EventArgument) Declaration protected void Event(EventArgument argument) Parameters Type Name Description EventArgument argument View Source Event(String) Declaration protected void Event(string name) Parameters Type Name Description String name View Source Event<T>(String, T) Declaration protected void Event<T>(string name, T val) Parameters Type Name Description String name T val Type Parameters Name Description T View Source EventType() Declaration public virtual Type EventType() Returns Type Description Type Explicit Interface Implementations View Source IViewEvent.Bind(IViewEventHandler) Declaration void IViewEvent.Bind(IViewEventHandler handler) Parameters Type Name Description IViewEventHandler handler View Source IViewEvent.Name Declaration string IViewEvent.Name { get; } Returns Type Description String Implements ILightBind IBindable<T> IBindable IViewEvent IViewElement"
  },
  "api/ILib.MVVM.Messenger.html": {
    "href": "api/ILib.MVVM.Messenger.html",
    "title": "Class Messenger | Yazawa Ichio Unity Package Document",
    "keywords": "Class Messenger Inheritance Object Messenger Implements IMessenger Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class Messenger : IMessenger Properties View Source Default Declaration public static IMessenger Default { get; } Property Value Type Description IMessenger Methods View Source Refresh() Declaration public void Refresh() View Source Register<T>(Object, String, Action<T>) Declaration public void Register<T>(object recipient, string name, Action<T> action) Parameters Type Name Description Object recipient String name Action <T> action Type Parameters Name Description T View Source Send<T>(String, T) Declaration public void Send<T>(string name, T message) Parameters Type Name Description String name T message Type Parameters Name Description T View Source Unregister(Object) Declaration public void Unregister(object recipient) Parameters Type Name Description Object recipient View Source Unregister<T>(Object, String, Action<T>) Declaration public void Unregister<T>(object recipient, string name, Action<T> action) Parameters Type Name Description Object recipient String name Action <T> action Type Parameters Name Description T Implements IMessenger"
  },
  "api/ILib.MVVM.PostionBind.html": {
    "href": "api/ILib.MVVM.PostionBind.html",
    "title": "Class PostionBind | Yazawa Ichio Unity Package Document",
    "keywords": "Class PostionBind Inheritance Object LightBind < UnityEngine.Vector3 , UnityEngine.Transform > PostionBind Implements ILightBind IBindable < UnityEngine.Vector3 > IBindable IViewElement Inherited Members LightBind<Vector3, Transform>.Path LightBind<Vector3, Transform>.IsActive LightBind<Vector3, Transform>.m_Target LightBind<Vector3, Transform>.m_Hash LightBind<Vector3, Transform>.Value LightBind<Vector3, Transform>.BindType() LightBind<Vector3, Transform>.Set(Vector3, Boolean) LightBind<Vector3, Transform>.Init(Object, String) LightBind<Vector3, Transform>.OnInit() LightBind<Vector3, Transform>.IBindable.Bind(IBindingProperty) LightBind<Vector3, Transform>.IBindable<Vector3>.Bind(IBindingProperty<Vector3>) LightBind<Vector3, Transform>.IBindable.Unbind(IBindingProperty) LightBind<Vector3, Transform>.OnUnbind() LightBind<Vector3, Transform>.IBindable.TryUpdate() LightBind<Vector3, Transform>.UpdateValue(Vector3) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class PostionBind : LightBind<Vector3, Transform>, ILightBind, IBindable<Vector3>, IBindable, IViewElement Methods View Source UpdateValue(Vector3) Declaration protected override void UpdateValue(Vector3 val) Parameters Type Name Description UnityEngine.Vector3 val Overrides ILib.MVVM.LightBind<UnityEngine.Vector3, UnityEngine.Transform>.UpdateValue(UnityEngine.Vector3) Implements ILightBind IBindable<T> IBindable IViewElement"
  },
  "api/ILib.Routines.Result-1.html": {
    "href": "api/ILib.Routines.Result-1.html",
    "title": "Class Result<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class Result<T> T型のRoutineの結果を保持しています Inheritance Object Result<T> Implements IHasResult <T> IHasResult Namespace : ILib.Routines Assembly : ILib.dll Syntax public class Result<T> : IHasResult<T>, IHasResult Type Parameters Name Description T Constructors View Source Result(T, Boolean) Declaration public Result(T value, bool next) Parameters Type Name Description T value Boolean next Properties View Source Next Declaration public bool Next { get; } Property Value Type Description Boolean View Source Value Declaration public T Value { get; } Property Value Type Description T Methods View Source Create(T, Boolean) Declaration public static IHasResult<T> Create(T obj, bool next = true) Parameters Type Name Description T obj Boolean next Returns Type Description IHasResult <T> Explicit Interface Implementations View Source IHasResult.Value Declaration object IHasResult.Value { get; } Returns Type Description Object Implements IHasResult<T> IHasResult"
  },
  "api/ILib.Routines.ResultBase-1.html": {
    "href": "api/ILib.Routines.ResultBase-1.html",
    "title": "Class ResultBase<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class ResultBase<T> 自信をそのままIHasResultとして扱いたい場合に継承します。 Inheritance Object ResultBase<T> Implements IHasResult <T> IHasResult Namespace : ILib.Routines Assembly : ILib.dll Syntax public class ResultBase<T> : IHasResult<T>, IHasResult where T : ResultBase<T> Type Parameters Name Description T Properties View Source Next Declaration public virtual bool Next { get; set; } Property Value Type Description Boolean Explicit Interface Implementations View Source IHasResult.Value Declaration object IHasResult.Value { get; } Returns Type Description Object View Source IHasResult<T>.Value Declaration T IHasResult<T>.Value { get; } Returns Type Description T Implements IHasResult<T> IHasResult"
  },
  "api/ILib.Routines.RoutineBase.html": {
    "href": "api/ILib.Routines.RoutineBase.html",
    "title": "Class RoutineBase | Yazawa Ichio Unity Package Document",
    "keywords": "Class RoutineBase Inheritance Object UnityEngine.CustomYieldInstruction RoutineBase IterationTaskRoutine IterationTaskRoutine<T> RepeatRoutine RepeatTaskRoutine<T> Routine TaskRoutine<T> Implements IEnumerator IDisposable Inherited Members UnityEngine.CustomYieldInstruction.MoveNext() UnityEngine.CustomYieldInstruction.Reset() UnityEngine.CustomYieldInstruction.Current Namespace : ILib.Routines Assembly : ILib.dll Syntax public abstract class RoutineBase : CustomYieldInstruction, IEnumerator, IDisposable Constructors View Source RoutineBase(MonoBehaviour, IEnumerator, Boolean) Declaration public RoutineBase(MonoBehaviour behaviour, IEnumerator routine, bool autoStart = true) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour IEnumerator routine Boolean autoStart View Source RoutineBase(MonoBehaviour, Func<IEnumerator>, Boolean) Declaration public RoutineBase(MonoBehaviour behaviour, Func<IEnumerator> routine, bool autoStart = true) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour Func < IEnumerator > routine Boolean autoStart Properties View Source IsRunning Declaration public bool IsRunning { get; } Property Value Type Description Boolean View Source keepWaiting Declaration public override sealed bool keepWaiting { get; } Property Value Type Description Boolean Overrides UnityEngine.CustomYieldInstruction.keepWaiting View Source Restartable Declaration public bool Restartable { get; } Property Value Type Description Boolean Methods View Source Cancel() Declaration public void Cancel() View Source Fail(Exception) Declaration protected abstract void Fail(Exception ex) Parameters Type Name Description Exception ex View Source Result(IHasResult) Declaration protected virtual bool Result(IHasResult result) Parameters Type Name Description IHasResult result Returns Type Description Boolean View Source Start() Declaration public void Start() View Source Success() Declaration protected abstract void Success() Explicit Interface Implementations View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.Collections.IEnumerator System.IDisposable"
  },
  "api/ILib.Routines.html": {
    "href": "api/ILib.Routines.html",
    "title": "Namespace ILib.Routines | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.Routines Classes Result<T> T型のRoutineの結果を保持しています ResultBase<T> 自信をそのままIHasResultとして扱いたい場合に継承します。 RoutineBase Interfaces IHasResult Routineによる結果を渡す際に使用します。 IHasResult<T> 指定の型の結果をRoutineで返す際に利用します。"
  },
  "api/ILib.ScWidgets.IFixedHeight.html": {
    "href": "api/ILib.ScWidgets.IFixedHeight.html",
    "title": "Interface IFixedHeight | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IFixedHeight Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public interface IFixedHeight Properties View Source Height Declaration float Height { get; } Property Value Type Description Single"
  },
  "api/ILib.ScWidgets.IFixedWidth.html": {
    "href": "api/ILib.ScWidgets.IFixedWidth.html",
    "title": "Interface IFixedWidth | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IFixedWidth Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public interface IFixedWidth Properties View Source Width Declaration float Width { get; } Property Value Type Description Single"
  },
  "api/ILib.ScWidgets.IFunction.html": {
    "href": "api/ILib.ScWidgets.IFunction.html",
    "title": "Interface IFunction | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IFunction Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public interface IFunction Properties View Source Interactable Declaration bool Interactable { get; } Property Value Type Description Boolean"
  },
  "api/ILib.ScWidgets.ILayout.html": {
    "href": "api/ILib.ScWidgets.ILayout.html",
    "title": "Interface ILayout | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ILayout Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public interface ILayout Methods View Source CalcRect(Rect) Declaration Rect CalcRect(Rect viewRect) Parameters Type Name Description UnityEngine.Rect viewRect Returns Type Description UnityEngine.Rect"
  },
  "api/ILib.ScWidgets.ScButton.html": {
    "href": "api/ILib.ScWidgets.ScButton.html",
    "title": "Class ScButton | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScButton Inheritance Object ScWidget ScFunction ScButton Implements IScWidget IFunction Inherited Members ScFunction.Interactable ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.GetMaskColor() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScButton : ScFunction, IScWidget, IFunction Properties View Source OnClick Declaration public Action OnClick { set; } Property Value Type Description Action Methods View Source Invoke() Declaration public void Invoke() Implements IScWidget IFunction Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScCheckBox.html": {
    "href": "api/ILib.ScWidgets.ScCheckBox.html",
    "title": "Class ScCheckBox | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScCheckBox Inheritance Object ScWidget ScFunction ScCheckBox Implements IScWidget IFunction Inherited Members ScFunction.Interactable ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.GetMaskColor() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScCheckBox : ScFunction, IScWidget, IFunction Properties View Source OnChange Declaration public Action<bool> OnChange { set; } Property Value Type Description Action < Boolean > View Source Value Declaration public bool Value { get; set; } Property Value Type Description Boolean Methods View Source Invoke() Declaration public void Invoke() Implements IScWidget IFunction Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScClipMask.html": {
    "href": "api/ILib.ScWidgets.ScClipMask.html",
    "title": "Class ScClipMask | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScClipMask Inheritance Object ScWidget ScGraphic ScClipMask Implements IScWidget IScGraphic IClipWidget Inherited Members ScGraphic.Color ScGraphic.MaskColor ScGraphic.GetColor() ScGraphic.GetMaskColor() ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScClipMask : ScGraphic, IScWidget, IScGraphic, IClipWidget Methods View Source GetClipRect() Declaration public Rect GetClipRect() Returns Type Description UnityEngine.Rect Implements IScWidget IScGraphic IClipWidget Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScFunction.html": {
    "href": "api/ILib.ScWidgets.ScFunction.html",
    "title": "Class ScFunction | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScFunction Inheritance Object ScWidget ScFunction ScButton ScCheckBox ScInputField ScRadioButton ScRadioButtonRoot ScSlider ScToggle Implements IScWidget IFunction Inherited Members ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.GetMaskColor() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public abstract class ScFunction : ScWidget, IScWidget, IFunction Properties View Source Interactable Declaration public bool Interactable { get; set; } Property Value Type Description Boolean Implements IScWidget IFunction Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.SkinIMGUIDrawer.html": {
    "href": "api/ILib.ScWidgets.SkinIMGUIDrawer.html",
    "title": "Class SkinIMGUIDrawer | Yazawa Ichio Unity Package Document",
    "keywords": "Class SkinIMGUIDrawer Inheritance Object ConductorBase < SkinIMGUIDrawer > Conductor < SkinIMGUIDrawer , SkinIMGUIDrawer.Entry > SkinIMGUIDrawer Inherited Members Conductor<SkinIMGUIDrawer, SkinIMGUIDrawer.Entry>.GetEntry() Conductor<SkinIMGUIDrawer, SkinIMGUIDrawer.Entry>.GetEntry(IScWidget) Conductor<SkinIMGUIDrawer, SkinIMGUIDrawer.Entry>.CreateEntry() Conductor<SkinIMGUIDrawer, SkinIMGUIDrawer.Entry>.RemoveUnusedEntry() ConductorBase<SkinIMGUIDrawer>.s_Handler ConductorBase<SkinIMGUIDrawer>.Root ConductorBase<SkinIMGUIDrawer>.Context ConductorBase<SkinIMGUIDrawer>.m_Action ConductorBase<SkinIMGUIDrawer>.SetContext(SkinIMGUIDrawer) ConductorBase<SkinIMGUIDrawer>.SetRootWidget(IScWidget) ConductorBase<SkinIMGUIDrawer>.CalcLayout(Rect) ConductorBase<SkinIMGUIDrawer>.Prepare(IScWidget) ConductorBase<SkinIMGUIDrawer>.FallbackPrepare(SkinIMGUIDrawer, IScWidget) ConductorBase<SkinIMGUIDrawer>.Run(IScWidget) ConductorBase<SkinIMGUIDrawer>.FallbackRun(SkinIMGUIDrawer, IScWidget) ConductorBase<SkinIMGUIDrawer>.FallbackFinish(SkinIMGUIDrawer, IScWidget) ConductorBase<SkinIMGUIDrawer>.Run<T>(Action<SkinIMGUIDrawer, IScWidget, T>) ConductorBase<SkinIMGUIDrawer>.Run<T>(Func<SkinIMGUIDrawer, IScWidget, T, IDisposable>) ConductorBase<SkinIMGUIDrawer>.Schedule(Action) ConductorBase<SkinIMGUIDrawer>.InvokeAction() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class SkinIMGUIDrawer : Conductor<SkinIMGUIDrawer, SkinIMGUIDrawer.Entry> Constructors View Source SkinIMGUIDrawer(IMGUIWidgetSkin) Declaration public SkinIMGUIDrawer(IMGUIWidgetSkin skin) Parameters Type Name Description IMGUIWidgetSkin skin View Source SkinIMGUIDrawer(IScWidget, IMGUIWidgetSkin) Declaration public SkinIMGUIDrawer(IScWidget root, IMGUIWidgetSkin skin) Parameters Type Name Description IScWidget root IMGUIWidgetSkin skin Properties View Source IsEditorGUI Declaration public bool IsEditorGUI { get; set; } Property Value Type Description Boolean View Source Scale Declaration public float Scale { get; set; } Property Value Type Description Single View Source Skin Declaration public IMGUIWidgetSkin Skin { get; set; } Property Value Type Description IMGUIWidgetSkin Methods View Source Draw(Rect, Single) Declaration public void Draw(Rect rect, float scale = 1F) Parameters Type Name Description UnityEngine.Rect rect Single scale View Source Draw(Vector2, Vector2) Declaration public void Draw(Vector2 target, Vector2 screen) Parameters Type Name Description UnityEngine.Vector2 target UnityEngine.Vector2 screen View Source DrawScreen(Vector2) Declaration public void DrawScreen(Vector2 target) Parameters Type Name Description UnityEngine.Vector2 target View Source IsDisableDrag() Declaration public bool IsDisableDrag() Returns Type Description Boolean"
  },
  "api/ILib.ScWidgets.StretchLayout.html": {
    "href": "api/ILib.ScWidgets.StretchLayout.html",
    "title": "Class StretchLayout | Yazawa Ichio Unity Package Document",
    "keywords": "Class StretchLayout Inheritance Object LayoutBase StretchLayout Implements ILayout Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class StretchLayout : LayoutBase, ILayout Properties View Source Margin Declaration public RectOffset Margin { get; set; } Property Value Type Description UnityEngine.RectOffset Methods View Source CalcRect(Rect) Declaration public override Rect CalcRect(Rect viewRect) Parameters Type Name Description UnityEngine.Rect viewRect Returns Type Description UnityEngine.Rect Overrides LayoutBase.CalcRect(Rect) Implements ILayout"
  },
  "api/ILib.ScWidgets.uGUIBuilder.Entry.html": {
    "href": "api/ILib.ScWidgets.uGUIBuilder.Entry.html",
    "title": "Class uGUIBuilder.Entry | Yazawa Ichio Unity Package Document",
    "keywords": "Class uGUIBuilder.Entry Inheritance Object uGUIBuilder.Entry Implements IEntryEventCallback Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class Entry : IEntryEventCallback Fields View Source ChildRoot Declaration public RectTransform ChildRoot Field Value Type Description UnityEngine.RectTransform View Source Component Declaration public Component Component Field Value Type Description UnityEngine.Component View Source Obj Declaration public GameObject Obj Field Value Type Description UnityEngine.GameObject Explicit Interface Implementations View Source IEntryEventCallback.OnRegister(IScWidget) Declaration void IEntryEventCallback.OnRegister(IScWidget widget) Parameters Type Name Description IScWidget widget View Source IEntryEventCallback.OnRemove() Declaration void IEntryEventCallback.OnRemove() Implements IEntryEventCallback"
  },
  "api/ILib.ScWidgets.uGUIBuilder.uGUIHandler-2.html": {
    "href": "api/ILib.ScWidgets.uGUIBuilder.uGUIHandler-2.html",
    "title": "Class uGUIBuilder.uGUIHandler<T, UComponent> | Yazawa Ichio Unity Package Document",
    "keywords": "Class uGUIBuilder.uGUIHandler<T, UComponent> Inheritance Object ConductorBase.Handler <T> uGUIBuilder.uGUIHandler<T, UComponent> Implements ConductorBase.IHandler <> Inherited Members ConductorBase<uGUIBuilder>.Handler<T>.Priority ConductorBase<uGUIBuilder>.Handler<T>.Finish(uGUIBuilder, T) Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public abstract class uGUIHandler<T, UComponent> : ConductorBase<uGUIBuilder>.Handler<T>, ConductorBase<uGUIBuilder>.IHandler where T : IScWidget where UComponent : Component Type Parameters Name Description T UComponent Methods View Source Create(uGUIBuilder, IScWidget) Declaration protected UComponent Create(uGUIBuilder context, IScWidget widget) Parameters Type Name Description uGUIBuilder context IScWidget widget Returns Type Description UComponent View Source GetComponent(uGUIBuilder, IScWidget) Declaration protected UComponent GetComponent(uGUIBuilder context, IScWidget widget) Parameters Type Name Description uGUIBuilder context IScWidget widget Returns Type Description UComponent View Source Prepare(uGUIBuilder, T) Declaration protected override void Prepare(uGUIBuilder context, T widget) Parameters Type Name Description uGUIBuilder context T widget Overrides ILib.ScWidgets.ConductorBase<ILib.ScWidgets.uGUIBuilder>.Handler<T>.Prepare(ILib.ScWidgets.uGUIBuilder, T) View Source Prepare(uGUIBuilder, T, UComponent) Declaration protected virtual void Prepare(uGUIBuilder context, T widget, UComponent component) Parameters Type Name Description uGUIBuilder context T widget UComponent component View Source Run(uGUIBuilder, T) Declaration protected override void Run(uGUIBuilder context, T widget) Parameters Type Name Description uGUIBuilder context T widget Overrides ILib.ScWidgets.ConductorBase<ILib.ScWidgets.uGUIBuilder>.Handler<T>.Run(ILib.ScWidgets.uGUIBuilder, T) View Source Run(uGUIBuilder, T, UComponent) Declaration protected virtual void Run(uGUIBuilder context, T widget, UComponent component) Parameters Type Name Description uGUIBuilder context T widget UComponent component Implements ConductorBase<TContext>.IHandler"
  },
  "api/ILib.TriggerExtensions.html": {
    "href": "api/ILib.TriggerExtensions.html",
    "title": "Class TriggerExtensions | Yazawa Ichio Unity Package Document",
    "keywords": "Class TriggerExtensions Inheritance Object TriggerExtensions Namespace : ILib Assembly : ILib.dll Syntax public static class TriggerExtensions Methods View Source Add<T>(IHasTriggerAction<T>, Trigger<T>) Declaration public static ITriggerAction<T> Add<T>(this IHasTriggerAction<T> self, Trigger<T> trigger) Parameters Type Name Description IHasTriggerAction <T> self Trigger <T> trigger Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Add<T>(IHasTriggerAction<T>, Action<T, Exception>) Declaration public static ITriggerAction<T> Add<T>(this IHasTriggerAction<T> self, Action<T, Exception> action) Parameters Type Name Description IHasTriggerAction <T> self Action <T, Exception > action Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Add<T>(IHasTriggerAction<T>, Action<T>) Declaration public static ITriggerAction<T> Add<T>(this IHasTriggerAction<T> self, Action<T> action) Parameters Type Name Description IHasTriggerAction <T> self Action <T> action Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Add<T>(ITriggerAction<T>, Trigger<T>) Declaration public static ITriggerAction<T> Add<T>(this ITriggerAction<T> self, Trigger<T> trigger) Parameters Type Name Description ITriggerAction <T> self Trigger <T> trigger Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source AddFail<T>(IHasTriggerAction<T>, Action<Exception>) Declaration public static ITriggerAction<T> AddFail<T>(this IHasTriggerAction<T> self, Action<Exception> action) Parameters Type Name Description IHasTriggerAction <T> self Action < Exception > action Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Any<T>(IHasTriggerAction<T>) Declaration public static ITriggerAction<bool> Any<T>(this IHasTriggerAction<T> self) Parameters Type Name Description IHasTriggerAction <T> self Returns Type Description ITriggerAction < Boolean > Type Parameters Name Description T View Source Any<T>(ITriggerAction<T>) Declaration public static ITriggerAction<bool> Any<T>(this ITriggerAction<T> self) Parameters Type Name Description ITriggerAction <T> self Returns Type Description ITriggerAction < Boolean > Type Parameters Name Description T View Source GetAwaiter(IHasTriggerAction) Declaration public static TriggerActionAwaiter GetAwaiter(this IHasTriggerAction self) Parameters Type Name Description IHasTriggerAction self Returns Type Description TriggerActionAwaiter View Source GetAwaiter(ITriggerAction) Declaration public static TriggerActionAwaiter GetAwaiter(this ITriggerAction self) Parameters Type Name Description ITriggerAction self Returns Type Description TriggerActionAwaiter View Source GetAwaiter<T>(IHasTriggerAction<T>) Declaration public static TriggerActionAwaiter<T> GetAwaiter<T>(this IHasTriggerAction<T> self) Parameters Type Name Description IHasTriggerAction <T> self Returns Type Description TriggerActionAwaiter <T> Type Parameters Name Description T View Source GetAwaiter<T>(IHasTriggerAction<T>, CancellationToken) Declaration public static TriggerActionAwaiter<T> GetAwaiter<T>(this IHasTriggerAction<T> self, CancellationToken cancellation) Parameters Type Name Description IHasTriggerAction <T> self CancellationToken cancellation Returns Type Description TriggerActionAwaiter <T> Type Parameters Name Description T View Source GetAwaiter<T>(ITriggerAction<T>, CancellationToken) Declaration public static TriggerActionAwaiter<T> GetAwaiter<T>(this ITriggerAction<T> self, CancellationToken cancellation) Parameters Type Name Description ITriggerAction <T> self CancellationToken cancellation Returns Type Description TriggerActionAwaiter <T> Type Parameters Name Description T View Source Realtime<T>(IHasTriggerAction<T>, Single) Declaration public static ITriggerAction<T> Realtime<T>(this IHasTriggerAction<T> self, float time) Parameters Type Name Description IHasTriggerAction <T> self Single time Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Realtime<T>(ITriggerAction<T>, Single) Declaration public static ITriggerAction<T> Realtime<T>(this ITriggerAction<T> self, float time) Parameters Type Name Description ITriggerAction <T> self Single time Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Select<T>(ITriggerAction, Func<T>, Boolean) Declaration public static ITriggerAction<T> Select<T>(this ITriggerAction self, Func<T> func, bool oneShot = true) Parameters Type Name Description ITriggerAction self Func <T> func Boolean oneShot Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Select<T, U>(IHasTriggerAction<T>, Func<T, U>, Boolean) Declaration public static ITriggerAction<U> Select<T, U>(this IHasTriggerAction<T> self, Func<T, U> func, bool oneShot = true) Parameters Type Name Description IHasTriggerAction <T> self Func <T, U> func Boolean oneShot Returns Type Description ITriggerAction <U> Type Parameters Name Description T U View Source Select<T, U>(ITriggerAction<T>, Func<T, U>, Boolean) Declaration public static ITriggerAction<U> Select<T, U>(this ITriggerAction<T> self, Func<T, U> func, bool oneShot = true) Parameters Type Name Description ITriggerAction <T> self Func <T, U> func Boolean oneShot Returns Type Description ITriggerAction <U> Type Parameters Name Description T U View Source Then(IHasTriggerAction<ITriggerAction>) Declaration public static ITriggerAction Then(this IHasTriggerAction<ITriggerAction> self) Parameters Type Name Description IHasTriggerAction < ITriggerAction > self Returns Type Description ITriggerAction View Source Then(ITriggerAction<ITriggerAction>) Declaration public static ITriggerAction Then(this ITriggerAction<ITriggerAction> self) Parameters Type Name Description ITriggerAction < ITriggerAction > self Returns Type Description ITriggerAction View Source Then<T>(IHasTriggerAction<T>, Func<T, ITriggerAction>, Boolean) Declaration public static ITriggerAction Then<T>(this IHasTriggerAction<T> self, Func<T, ITriggerAction> func, bool oneShot = true) Parameters Type Name Description IHasTriggerAction <T> self Func <T, ITriggerAction > func Boolean oneShot Returns Type Description ITriggerAction Type Parameters Name Description T View Source Then<T>(IHasTriggerAction<ITriggerAction<T>>) Declaration public static ITriggerAction<T> Then<T>(this IHasTriggerAction<ITriggerAction<T>> self) Parameters Type Name Description IHasTriggerAction < ITriggerAction <T>> self Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Then<T>(ITriggerAction<T>, Func<T, ITriggerAction>, Boolean) Declaration public static ITriggerAction Then<T>(this ITriggerAction<T> self, Func<T, ITriggerAction> func, bool oneShot = true) Parameters Type Name Description ITriggerAction <T> self Func <T, ITriggerAction > func Boolean oneShot Returns Type Description ITriggerAction Type Parameters Name Description T View Source Then<T>(ITriggerAction<ITriggerAction<T>>) Declaration public static ITriggerAction<T> Then<T>(this ITriggerAction<ITriggerAction<T>> self) Parameters Type Name Description ITriggerAction < ITriggerAction <T>> self Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Then<T, U>(IHasTriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) Declaration public static ITriggerAction<U> Then<T, U>(this IHasTriggerAction<T> self, Func<T, ITriggerAction<U>> func, bool oneShot = true) Parameters Type Name Description IHasTriggerAction <T> self Func <T, ITriggerAction <U>> func Boolean oneShot Returns Type Description ITriggerAction <U> Type Parameters Name Description T U View Source Then<T, U>(ITriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) Declaration public static ITriggerAction<U> Then<T, U>(this ITriggerAction<T> self, Func<T, ITriggerAction<U>> func, bool oneShot = true) Parameters Type Name Description ITriggerAction <T> self Func <T, ITriggerAction <U>> func Boolean oneShot Returns Type Description ITriggerAction <U> Type Parameters Name Description T U View Source Time<T>(IHasTriggerAction<T>, Single) Declaration public static ITriggerAction<T> Time<T>(this IHasTriggerAction<T> self, float time) Parameters Type Name Description IHasTriggerAction <T> self Single time Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Time<T>(ITriggerAction<T>, Single) Declaration public static ITriggerAction<T> Time<T>(this ITriggerAction<T> self, float time) Parameters Type Name Description ITriggerAction <T> self Single time Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Timeout<T>(ITriggerAction<T>, Single, Boolean) Declaration public static ITriggerAction<T> Timeout<T>(this ITriggerAction<T> self, float time, bool realtime = false) Parameters Type Name Description ITriggerAction <T> self Single time Boolean realtime Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source ToTrigger(Task) Declaration public static ITriggerAction ToTrigger(this Task self) Parameters Type Name Description Task self Returns Type Description ITriggerAction View Source ToTrigger<T>(Task<T>) Declaration public static ITriggerAction<T> ToTrigger<T>(this Task<T> self) Parameters Type Name Description Task <T> self Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Wait<T>(IHasTriggerAction<T>) Declaration public static IEnumerator Wait<T>(this IHasTriggerAction<T> self) Parameters Type Name Description IHasTriggerAction <T> self Returns Type Description IEnumerator Type Parameters Name Description T View Source Where<T>(IHasTriggerAction<T>, Func<T, Boolean>) Declaration public static ITriggerAction<T> Where<T>(this IHasTriggerAction<T> self, Func<T, bool> func) Parameters Type Name Description IHasTriggerAction <T> self Func <T, Boolean > func Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Where<T>(ITriggerAction<T>, Func<T, Boolean>) Declaration public static ITriggerAction<T> Where<T>(this ITriggerAction<T> self, Func<T, bool> func) Parameters Type Name Description ITriggerAction <T> self Func <T, Boolean > func Returns Type Description ITriggerAction <T> Type Parameters Name Description T"
  },
  "api/ILib.Triggers.SuccessedAction-1.html": {
    "href": "api/ILib.Triggers.SuccessedAction-1.html",
    "title": "Class SuccessedAction<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class SuccessedAction<T> Inheritance Object SuccessedAction<T> Implements ITriggerAction <T> ITriggerAction IDisposable IEnumerator Namespace : ILib.Triggers Assembly : ILib.dll Syntax public class SuccessedAction<T> : ITriggerAction<T>, ITriggerAction, IDisposable, IEnumerator Type Parameters Name Description T Constructors View Source SuccessedAction(T) Declaration public SuccessedAction(T val) Parameters Type Name Description T val Properties View Source Canceled Declaration public bool Canceled { get; } Property Value Type Description Boolean View Source Error Declaration public Exception Error { get; } Property Value Type Description Exception View Source Fired Declaration public bool Fired { get; } Property Value Type Description Boolean View Source OneShot Declaration public bool OneShot { get; } Property Value Type Description Boolean View Source Result Declaration public T Result { get; } Property Value Type Description T Methods View Source Add(Action) Declaration public ITriggerAction Add(Action action) Parameters Type Name Description Action action Returns Type Description ITriggerAction View Source Add(Action<T, Exception>) Declaration public ITriggerAction<T> Add(Action<T, Exception> action) Parameters Type Name Description Action <T, Exception > action Returns Type Description ITriggerAction <T> View Source Add(Action<T>) Declaration public ITriggerAction<T> Add(Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description ITriggerAction <T> View Source AddComplete(Action<Boolean>) Declaration public ITriggerAction<T> AddComplete(Action<bool> action) Parameters Type Name Description Action < Boolean > action Returns Type Description ITriggerAction <T> View Source AddFail(Action<Exception>) Declaration public ITriggerAction<T> AddFail(Action<Exception> action) Parameters Type Name Description Action < Exception > action Returns Type Description ITriggerAction <T> View Source AddStrictCompleteObserve(Action) Declaration public void AddStrictCompleteObserve(Action action) Parameters Type Name Description Action action View Source Cancel() Declaration public void Cancel() View Source Clear() Declaration public void Clear() View Source Dispose() Declaration public void Dispose() View Source GetAwaiter() Declaration public TriggerActionAwaiter<T> GetAwaiter() Returns Type Description TriggerActionAwaiter <T> View Source Remove(Action<T>) Declaration public ITriggerAction<T> Remove(Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description ITriggerAction <T> View Source RemoveComplete(Action<Boolean>) Declaration public ITriggerAction<T> RemoveComplete(Action<bool> action) Parameters Type Name Description Action < Boolean > action Returns Type Description ITriggerAction <T> View Source RemoveFail(Action<Exception>) Declaration public ITriggerAction<T> RemoveFail(Action<Exception> action) Parameters Type Name Description Action < Exception > action Returns Type Description ITriggerAction <T> Events View Source OnCancel Declaration public event Action OnCancel Event Type Type Description Action View Source OnComplete Declaration public event Action<bool> OnComplete Event Type Type Description Action < Boolean > View Source OnFail Declaration public event Action<Exception> OnFail Event Type Type Description Action < Exception > View Source OnFire Declaration public event Action<T> OnFire Event Type Type Description Action <T> Explicit Interface Implementations View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object View Source IEnumerator.MoveNext() Declaration bool IEnumerator.MoveNext() Returns Type Description Boolean View Source IEnumerator.Reset() Declaration void IEnumerator.Reset() Implements ITriggerAction<T> ITriggerAction System.IDisposable System.Collections.IEnumerator Extension Methods TriggerExtensions.Add<T>(ITriggerAction<T>, Trigger<T>) TriggerExtensions.Select<T>(ITriggerAction, Func<T>, Boolean) TriggerExtensions.Select<T, U>(ITriggerAction<T>, Func<T, U>, Boolean) TriggerExtensions.Where<T>(ITriggerAction<T>, Func<T, Boolean>) TriggerExtensions.Any<T>(ITriggerAction<T>) TriggerExtensions.Then<T, U>(ITriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) TriggerExtensions.Then<T>(ITriggerAction<T>, Func<T, ITriggerAction>, Boolean) TriggerExtensions.Time<T>(ITriggerAction<T>, Single) TriggerExtensions.Realtime<T>(ITriggerAction<T>, Single) TriggerExtensions.Timeout<T>(ITriggerAction<T>, Single, Boolean) TriggerExtensions.GetAwaiter(ITriggerAction) TriggerExtensions.GetAwaiter<T>(ITriggerAction<T>, CancellationToken)"
  },
  "api/ILib.Triggers.html": {
    "href": "api/ILib.Triggers.html",
    "title": "Namespace ILib.Triggers | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.Triggers Classes SuccessedAction<T>"
  },
  "api/ILib.UI.AnimatorTransition.html": {
    "href": "api/ILib.UI.AnimatorTransition.html",
    "title": "Class AnimatorTransition | Yazawa Ichio Unity Package Document",
    "keywords": "Class AnimatorTransition Animatorを利用した遷移処理です。 SHOW・HIDEステートの完了を検知して遷移します。 Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour AnimatorTransition Implements ITransition Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public class AnimatorTransition : MonoBehaviour, ITransition Methods View Source Hide(Boolean) Declaration public Task Hide(bool close) Parameters Type Name Description Boolean close Returns Type Description Task View Source OnPreCreated() Declaration public void OnPreCreated() View Source Show(Boolean) Declaration public Task Show(bool open) Parameters Type Name Description Boolean open Returns Type Description Task Implements ITransition Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.UI.IControl-1.html": {
    "href": "api/ILib.UI.IControl-1.html",
    "title": "Interface IControl<TParam> | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IControl<TParam> Inherited Members IControl.IsActive IControl.IsDeactivateInBehind IControl.SetController(IController) IControl.OnCreated(Object) IControl.OnFront(Boolean) IControl.OnBehind() IControl.OnClose() Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public interface IControl<TParam> : IControl Type Parameters Name Description TParam"
  },
  "api/ILib.UI.IControl.html": {
    "href": "api/ILib.UI.IControl.html",
    "title": "Interface IControl | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IControl UIの表示制御 Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public interface IControl Properties View Source IsActive 有効化？ Declaration bool IsActive { get; } Property Value Type Description Boolean View Source IsDeactivateInBehind Behind時に非アクティブにするか？ Declaration bool IsDeactivateInBehind { get; } Property Value Type Description Boolean Methods View Source OnBehind() UIが最前面から後ろに回った際に実行されます。 Declaration Task OnBehind() Returns Type Description Task View Source OnClose() UIを閉じる際に実行されます。 Declaration Task OnClose() Returns Type Description Task View Source OnCreated(Object) UI作成直後に実行されます Declaration Task OnCreated(object prm) Parameters Type Name Description Object prm Returns Type Description Task View Source OnFront(Boolean) UIが最前面に来た際に実行されます。 Declaration Task OnFront(bool open) Parameters Type Name Description Boolean open Returns Type Description Task View Source SetController(IController) Declaration void SetController(IController controller) Parameters Type Name Description IController controller"
  },
  "api/ILib.UI.IController.html": {
    "href": "api/ILib.UI.IController.html",
    "title": "Interface IController | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IController Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public interface IController Methods View Source Close(IControl) UIを閉じます。 閉じる方法に関しては各々のコントローラーによって挙動が異なります。 Declaration Task Close(IControl control) Parameters Type Name Description IControl control Returns Type Description Task"
  },
  "api/ILib.UI.IExecuteBack.html": {
    "href": "api/ILib.UI.IExecuteBack.html",
    "title": "Interface IExecuteBack | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IExecuteBack UIのバック処理 Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public interface IExecuteBack Methods View Source TryBack() Declaration bool TryBack() Returns Type Description Boolean"
  },
  "api/ILib.AssetBundles.ExManifest.DepInfo.html": {
    "href": "api/ILib.AssetBundles.ExManifest.DepInfo.html",
    "title": "Class DepInfo | Yazawa Ichio Unity Package Document",
    "keywords": "Class DepInfo Inheritance Object DepInfo Namespace : ILib.AssetBundles.ExManifest Assembly : ILib.AssetBundles.ExManifest.dll Syntax [Serializable] public class DepInfo Fields View Source Deps Declaration public int[] Deps Field Value Type Description Int32 []"
  },
  "api/ILib.AssetBundles.ExManifest.ITargetProvider.html": {
    "href": "api/ILib.AssetBundles.ExManifest.ITargetProvider.html",
    "title": "Interface ITargetProvider | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ITargetProvider Namespace : ILib.AssetBundles.ExManifest Assembly : ILib.AssetBundles.ExManifest.Editor.dll Syntax public interface ITargetProvider Methods View Source GetBuildTargets(ExManifestAsset) Declaration AssetBundleBuild[] GetBuildTargets(ExManifestAsset cache) Parameters Type Name Description ExManifestAsset cache Returns Type Description UnityEditor.AssetBundleBuild [] View Source IsTarget(String) Declaration bool IsTarget(string name) Parameters Type Name Description String name Returns Type Description Boolean"
  },
  "api/ILib.AssetBundles.ExManifest.Tools.Build.html": {
    "href": "api/ILib.AssetBundles.ExManifest.Tools.Build.html",
    "title": "Class Build | Yazawa Ichio Unity Package Document",
    "keywords": "Class Build Inheritance Object Build Namespace : ILib.AssetBundles.ExManifest.Tools Assembly : ILib.AssetBundles.ExManifest.Tools.dll Syntax public static class Build Methods View Source DefaultBuid(BuildTarget) Declaration public static void DefaultBuid(BuildTarget target) Parameters Type Name Description UnityEditor.BuildTarget target"
  },
  "api/ILib.ScWidgets.SkinIMGUIDrawer.Entry.html": {
    "href": "api/ILib.ScWidgets.SkinIMGUIDrawer.Entry.html",
    "title": "Class SkinIMGUIDrawer.Entry | Yazawa Ichio Unity Package Document",
    "keywords": "Class SkinIMGUIDrawer.Entry Inheritance Object SkinIMGUIDrawer.Entry Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class Entry Fields View Source ControlId Declaration public int ControlId Field Value Type Description Int32 View Source DisableDragIfHotControl Declaration public bool DisableDragIfHotControl Field Value Type Description Boolean View Source Order Declaration public int Order Field Value Type Description Int32 View Source Style Declaration public GUIStyle Style Field Value Type Description UnityEngine.GUIStyle View Source Styles Declaration public Dictionary<string, GUIStyle> Styles Field Value Type Description Dictionary < String , UnityEngine.GUIStyle >"
  },
  "api/ILib.ScWidgets.SkinIMGUIDrawer.IMGUIHandler-1.html": {
    "href": "api/ILib.ScWidgets.SkinIMGUIDrawer.IMGUIHandler-1.html",
    "title": "Class SkinIMGUIDrawer.IMGUIHandler<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class SkinIMGUIDrawer.IMGUIHandler<T> Inheritance Object ConductorBase.Handler <T> SkinIMGUIDrawer.IMGUIHandler<T> DebugItemTapHandler.Handler Implements ConductorBase.IHandler <> Inherited Members ConductorBase<SkinIMGUIDrawer>.Handler<T>.Priority ConductorBase<SkinIMGUIDrawer>.Handler<T>.Prepare(SkinIMGUIDrawer, T) ConductorBase<SkinIMGUIDrawer>.Handler<T>.Run(SkinIMGUIDrawer, T) ConductorBase<SkinIMGUIDrawer>.Handler<T>.Finish(SkinIMGUIDrawer, T) Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public abstract class IMGUIHandler<T> : ConductorBase<SkinIMGUIDrawer>.Handler<T>, ConductorBase<SkinIMGUIDrawer>.IHandler where T : IScWidget Type Parameters Name Description T Methods View Source CreateStyle(SkinIMGUIDrawer, IScWidget) Declaration protected virtual GUIStyle CreateStyle(SkinIMGUIDrawer context, IScWidget widget) Parameters Type Name Description SkinIMGUIDrawer context IScWidget widget Returns Type Description UnityEngine.GUIStyle View Source CreateStyle(String, SkinIMGUIDrawer, IScWidget) Declaration protected virtual GUIStyle CreateStyle(string key, SkinIMGUIDrawer context, IScWidget widget) Parameters Type Name Description String key SkinIMGUIDrawer context IScWidget widget Returns Type Description UnityEngine.GUIStyle View Source DrawProgress(SkinIMGUIDrawer, ScWidget, Single, Single, Single) Declaration protected float DrawProgress(SkinIMGUIDrawer context, ScWidget widget, float val, float min, float max) Parameters Type Name Description SkinIMGUIDrawer context ScWidget widget Single val Single min Single max Returns Type Description Single View Source GetStyle(SkinIMGUIDrawer, IScWidget) Declaration protected GUIStyle GetStyle(SkinIMGUIDrawer context, IScWidget widget) Parameters Type Name Description SkinIMGUIDrawer context IScWidget widget Returns Type Description UnityEngine.GUIStyle View Source GetStyle(SkinIMGUIDrawer, IScWidget, String) Declaration protected GUIStyle GetStyle(SkinIMGUIDrawer context, IScWidget widget, string def) Parameters Type Name Description SkinIMGUIDrawer context IScWidget widget String def Returns Type Description UnityEngine.GUIStyle View Source GetStyle(String, SkinIMGUIDrawer, IScWidget) Declaration protected GUIStyle GetStyle(string key, SkinIMGUIDrawer context, IScWidget widget) Parameters Type Name Description String key SkinIMGUIDrawer context IScWidget widget Returns Type Description UnityEngine.GUIStyle View Source GetStyle(String, SkinIMGUIDrawer, IScWidget, String) Declaration protected GUIStyle GetStyle(string key, SkinIMGUIDrawer context, IScWidget widget, string def) Parameters Type Name Description String key SkinIMGUIDrawer context IScWidget widget String def Returns Type Description UnityEngine.GUIStyle Implements ConductorBase<TContext>.IHandler"
  },
  "api/ILib.ServInject.ServInjector.html": {
    "href": "api/ILib.ServInject.ServInjector.html",
    "title": "Class ServInjector | Yazawa Ichio Unity Package Document",
    "keywords": "Class ServInjector Inheritance Object ServInjector Namespace : ILib.ServInject Assembly : ILib.ServInjector.dll Syntax public static class ServInjector Methods View Source AddComponent<T>(GameObject, Type) MonoBehaviourを追加し、サービスを注入した状態で返します Declaration public static T AddComponent<T>(GameObject obj, Type type = null) where T : MonoBehaviour, new() Parameters Type Name Description UnityEngine.GameObject obj Type type Returns Type Description T Type Parameters Name Description T View Source Bind<T>(Object) サービスを登録します。 解放する際はUnbindを実行してください。 Declaration public static void Bind<T>(object service) where T : class Parameters Type Name Description Object service Type Parameters Name Description T View Source BindAndObserveDestroy<T>(MonoBehaviour, GameObject) サービスを登録します。 指定のゲームオブジェクトが削除された際に自動でUnbindされます。 Declaration public static void BindAndObserveDestroy<T>(MonoBehaviour service, GameObject obj = null) where T : class Parameters Type Name Description UnityEngine.MonoBehaviour service UnityEngine.GameObject obj Type Parameters Name Description T View Source Clear() 登録されているすべてのサービスを解除します。 Declaration public static void Clear() View Source Create<T>(Type) インスタンスを生成し、サービスを注入した状態で返します Declaration public static T Create<T>(Type type = null) where T : class, new() Parameters Type Name Description Type type Returns Type Description T Type Parameters Name Description T View Source Inject(Object) サービスを注入します。 Declaration public static void Inject(object obj) Parameters Type Name Description Object obj View Source Inject(Type, Object) 指定の方でサービスを注入します。 基底クラスのみインジェクトされる場合に効率的です Declaration public static void Inject(Type type, object obj) Parameters Type Name Description Type type Object obj View Source Resolve<T>() 登録されているサービスを取り出します。 登録されていない場合にnullが返ります。 Declaration public static T Resolve<T>() where T : class Returns Type Description T Type Parameters Name Description T View Source Unbind<T>(Object) サービスの登録を解除します。 Declaration public static void Unbind<T>(object service) where T : class Parameters Type Name Description Object service Type Parameters Name Description T"
  },
  "api/ILib.ServInject.html": {
    "href": "api/ILib.ServInject.html",
    "title": "Namespace ILib.ServInject | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.ServInject Classes InjectAttribute Service<T> Tにサービスとして登録するインタフェースを指定してください。 ServiceMonoBehaviour<T> Tにサービスとして登録するインタフェースを指定してください。 ServInjector Interfaces IInject<T> IServiceEventReceiver"
  },
  "api/ILib.TaskRoutine-1.html": {
    "href": "api/ILib.TaskRoutine-1.html",
    "title": "Class TaskRoutine<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class TaskRoutine<T> Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返された時点で完了扱いとなります。 Inheritance Object UnityEngine.CustomYieldInstruction RoutineBase TaskRoutine<T> Implements IEnumerator IRoutine <T> IHasTriggerAction <T> IHasTriggerAction IRoutine IDisposable Inherited Members RoutineBase.IsRunning RoutineBase.Restartable RoutineBase.keepWaiting RoutineBase.Start() RoutineBase.Cancel() RoutineBase.IDisposable.Dispose() UnityEngine.CustomYieldInstruction.MoveNext() UnityEngine.CustomYieldInstruction.Reset() UnityEngine.CustomYieldInstruction.Current Namespace : ILib Assembly : ILib.dll Syntax public class TaskRoutine<T> : RoutineBase, IEnumerator, IRoutine<T>, IHasTriggerAction<T>, IHasTriggerAction, IRoutine, IDisposable Type Parameters Name Description T Constructors View Source TaskRoutine(MonoBehaviour, IEnumerator) Declaration public TaskRoutine(MonoBehaviour behaviour, IEnumerator routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour IEnumerator routine Properties View Source Action Declaration public ITriggerAction<T> Action { get; } Property Value Type Description ITriggerAction <T> Methods View Source Fail(Exception) Declaration protected override void Fail(Exception ex) Parameters Type Name Description Exception ex Overrides RoutineBase.Fail(Exception) View Source Result(IHasResult) Declaration protected override bool Result(IHasResult result) Parameters Type Name Description IHasResult result Returns Type Description Boolean Overrides RoutineBase.Result(IHasResult) View Source Success() Declaration protected override void Success() Overrides RoutineBase.Success() Explicit Interface Implementations View Source IHasTriggerAction.Action Declaration ITriggerAction IHasTriggerAction.Action { get; } Returns Type Description ITriggerAction Implements System.Collections.IEnumerator IRoutine<T> IHasTriggerAction<T> IHasTriggerAction IRoutine System.IDisposable Extension Methods TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T, Exception>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Trigger<T>) TriggerExtensions.AddFail<T>(IHasTriggerAction<T>, Action<Exception>) TriggerExtensions.Wait<T>(IHasTriggerAction<T>) TriggerExtensions.Select<T, U>(IHasTriggerAction<T>, Func<T, U>, Boolean) TriggerExtensions.Where<T>(IHasTriggerAction<T>, Func<T, Boolean>) TriggerExtensions.Any<T>(IHasTriggerAction<T>) TriggerExtensions.Then<T, U>(IHasTriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) TriggerExtensions.Then<T>(IHasTriggerAction<T>, Func<T, ITriggerAction>, Boolean) TriggerExtensions.Time<T>(IHasTriggerAction<T>, Single) TriggerExtensions.Realtime<T>(IHasTriggerAction<T>, Single) TriggerExtensions.GetAwaiter(IHasTriggerAction) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>, CancellationToken)"
  },
  "api/ILib.Trigger-1.html": {
    "href": "api/ILib.Trigger-1.html",
    "title": "Class Trigger<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class Trigger<T> イベントの発火を制御するクラスです。 イベントは一度のみ実行と、連続して実行のどちらかを選択して生成します。 発火時の処理はアクションを通して実装します。 Inheritance Object Trigger<T> Implements IHasTriggerAction <T> IHasTriggerAction IDisposable IEnumerator Namespace : ILib Assembly : ILib.dll Syntax public class Trigger<T> : IHasTriggerAction<T>, IHasTriggerAction, IDisposable, IEnumerator Type Parameters Name Description T Constructors View Source Trigger(Boolean) Declaration public Trigger(bool oneShot = true) Parameters Type Name Description Boolean oneShot Properties View Source Action Declaration public ITriggerAction<T> Action { get; } Property Value Type Description ITriggerAction <T> View Source Fired Declaration public bool Fired { get; } Property Value Type Description Boolean Methods View Source Dispose() Declaration public void Dispose() View Source Error(Exception) Declaration public void Error(Exception ex) Parameters Type Name Description Exception ex View Source Fire(T) Declaration public void Fire(T item) Parameters Type Name Description T item Explicit Interface Implementations View Source IHasTriggerAction.Action Declaration ITriggerAction IHasTriggerAction.Action { get; } Returns Type Description ITriggerAction View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object View Source IEnumerator.MoveNext() Declaration bool IEnumerator.MoveNext() Returns Type Description Boolean View Source IEnumerator.Reset() Declaration void IEnumerator.Reset() Implements IHasTriggerAction<T> IHasTriggerAction System.IDisposable System.Collections.IEnumerator Extension Methods TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T, Exception>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Trigger<T>) TriggerExtensions.AddFail<T>(IHasTriggerAction<T>, Action<Exception>) TriggerExtensions.Wait<T>(IHasTriggerAction<T>) TriggerExtensions.Select<T, U>(IHasTriggerAction<T>, Func<T, U>, Boolean) TriggerExtensions.Where<T>(IHasTriggerAction<T>, Func<T, Boolean>) TriggerExtensions.Any<T>(IHasTriggerAction<T>) TriggerExtensions.Then<T, U>(IHasTriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) TriggerExtensions.Then<T>(IHasTriggerAction<T>, Func<T, ITriggerAction>, Boolean) TriggerExtensions.Time<T>(IHasTriggerAction<T>, Single) TriggerExtensions.Realtime<T>(IHasTriggerAction<T>, Single) TriggerExtensions.GetAwaiter(IHasTriggerAction) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>, CancellationToken)"
  },
  "api/ILib.Trigger.html": {
    "href": "api/ILib.Trigger.html",
    "title": "Class Trigger | Yazawa Ichio Unity Package Document",
    "keywords": "Class Trigger Inheritance Object Trigger Implements IHasTriggerAction < Boolean > IHasTriggerAction IDisposable IEnumerator Namespace : ILib Assembly : ILib.dll Syntax public class Trigger : IHasTriggerAction<bool>, IHasTriggerAction, IDisposable, IEnumerator Constructors View Source Trigger(Boolean) Declaration public Trigger(bool oneShot = true) Parameters Type Name Description Boolean oneShot Fields View Source Successed Declaration public static readonly ITriggerAction<bool> Successed Field Value Type Description ITriggerAction < Boolean > Properties View Source Action Declaration public ITriggerAction<bool> Action { get; } Property Value Type Description ITriggerAction < Boolean > View Source Fired Declaration public bool Fired { get; } Property Value Type Description Boolean Methods View Source Combine(ITriggerAction[]) Declaration public static ITriggerAction Combine(params ITriggerAction[] actions) Parameters Type Name Description ITriggerAction [] actions Returns Type Description ITriggerAction View Source Combine<T>(ITriggerAction<T>[]) Declaration public static ITriggerAction<T[]> Combine<T>(params ITriggerAction<T>[] actions) Parameters Type Name Description ITriggerAction <T>[] actions Returns Type Description ITriggerAction <T[]> Type Parameters Name Description T View Source Dispose() Declaration public void Dispose() View Source Error(Exception) Declaration public void Error(Exception ex) Parameters Type Name Description Exception ex View Source Fire() Declaration public void Fire() View Source From(Task) Declaration public static ITriggerAction From(Task task) Parameters Type Name Description Task task Returns Type Description ITriggerAction View Source From<T>(Task<T>) Declaration public static ITriggerAction<T> From<T>(Task<T> task) Parameters Type Name Description Task <T> task Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Parallel(IEnumerable<Func<ITriggerAction>>) Declaration public static ITriggerAction<bool> Parallel(IEnumerable<Func<ITriggerAction>> actions) Parameters Type Name Description IEnumerable < Func < ITriggerAction >> actions Returns Type Description ITriggerAction < Boolean > View Source Parallel<T>(IEnumerable<Func<ITriggerAction<T>>>) Declaration public static ITriggerAction<T[]> Parallel<T>(IEnumerable<Func<ITriggerAction<T>>> actions) Parameters Type Name Description IEnumerable < Func < ITriggerAction <T>>> actions Returns Type Description ITriggerAction <T[]> Type Parameters Name Description T View Source Realtime(Single) Declaration public static ITriggerAction<bool> Realtime(float time) Parameters Type Name Description Single time Returns Type Description ITriggerAction < Boolean > View Source Sequential(IEnumerable<Func<ITriggerAction>>) Declaration public static ITriggerAction<bool> Sequential(IEnumerable<Func<ITriggerAction>> actions) Parameters Type Name Description IEnumerable < Func < ITriggerAction >> actions Returns Type Description ITriggerAction < Boolean > View Source Sequential<T>(IEnumerable<Func<ITriggerAction<T>>>) Declaration public static ITriggerAction<T[]> Sequential<T>(IEnumerable<Func<ITriggerAction<T>>> actions) Parameters Type Name Description IEnumerable < Func < ITriggerAction <T>>> actions Returns Type Description ITriggerAction <T[]> Type Parameters Name Description T View Source Success<T>(T) Declaration public static ITriggerAction<T> Success<T>(T val) Parameters Type Name Description T val Returns Type Description ITriggerAction <T> Type Parameters Name Description T View Source Time(Single) Declaration public static ITriggerAction<bool> Time(float time) Parameters Type Name Description Single time Returns Type Description ITriggerAction < Boolean > View Source Wait(ITriggerAction[]) Declaration public static IEnumerator Wait(params ITriggerAction[] actions) Parameters Type Name Description ITriggerAction [] actions Returns Type Description IEnumerator View Source Wait(IEnumerable<ITriggerAction>) Declaration public static IEnumerator Wait(IEnumerable<ITriggerAction> actions) Parameters Type Name Description IEnumerable < ITriggerAction > actions Returns Type Description IEnumerator Operators View Source Explicit(Trigger to TriggerAction<Boolean>) Declaration public static explicit operator TriggerAction<bool>(Trigger trigger) Parameters Type Name Description Trigger trigger Returns Type Description TriggerAction < Boolean > Explicit Interface Implementations View Source IHasTriggerAction.Action Declaration ITriggerAction IHasTriggerAction.Action { get; } Returns Type Description ITriggerAction View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object View Source IEnumerator.MoveNext() Declaration bool IEnumerator.MoveNext() Returns Type Description Boolean View Source IEnumerator.Reset() Declaration void IEnumerator.Reset() Implements IHasTriggerAction<T> IHasTriggerAction System.IDisposable System.Collections.IEnumerator Extension Methods TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T, Exception>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Trigger<T>) TriggerExtensions.AddFail<T>(IHasTriggerAction<T>, Action<Exception>) TriggerExtensions.Wait<T>(IHasTriggerAction<T>) TriggerExtensions.Select<T, U>(IHasTriggerAction<T>, Func<T, U>, Boolean) TriggerExtensions.Where<T>(IHasTriggerAction<T>, Func<T, Boolean>) TriggerExtensions.Any<T>(IHasTriggerAction<T>) TriggerExtensions.Then<T, U>(IHasTriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) TriggerExtensions.Then<T>(IHasTriggerAction<T>, Func<T, ITriggerAction>, Boolean) TriggerExtensions.Time<T>(IHasTriggerAction<T>, Single) TriggerExtensions.Realtime<T>(IHasTriggerAction<T>, Single) TriggerExtensions.GetAwaiter(IHasTriggerAction) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>, CancellationToken)"
  },
  "api/ILib.TriggerAction-1.html": {
    "href": "api/ILib.TriggerAction-1.html",
    "title": "Class TriggerAction<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class TriggerAction<T> イベントの発火時のアクションを登録します Inheritance Object TriggerAction<T> Implements ITriggerAction <T> ITriggerAction IDisposable IEnumerator Namespace : ILib Assembly : ILib.dll Syntax public class TriggerAction<T> : ITriggerAction<T>, ITriggerAction, IDisposable, IEnumerator Type Parameters Name Description T Constructors View Source TriggerAction(Boolean) Declaration public TriggerAction(bool oneshot = true) Parameters Type Name Description Boolean oneshot Fields View Source Empty 実行済みの空のアクションです。 Declaration public static readonly TriggerAction<T> Empty Field Value Type Description TriggerAction <T> Properties View Source Canceled Declaration public bool Canceled { get; } Property Value Type Description Boolean View Source Error Declaration public Exception Error { get; } Property Value Type Description Exception View Source Fired Declaration public bool Fired { get; } Property Value Type Description Boolean View Source OneShot Declaration public bool OneShot { get; set; } Property Value Type Description Boolean View Source Result Declaration public T Result { get; } Property Value Type Description T Methods View Source Add(Action) Declaration public ITriggerAction Add(Action action) Parameters Type Name Description Action action Returns Type Description ITriggerAction View Source Add(Action<T, Exception>) Declaration public ITriggerAction<T> Add(Action<T, Exception> onAction) Parameters Type Name Description Action <T, Exception > onAction Returns Type Description ITriggerAction <T> View Source Add(Action<T>) Declaration public ITriggerAction<T> Add(Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description ITriggerAction <T> View Source AddComplete(Action<Boolean>) Declaration public ITriggerAction<T> AddComplete(Action<bool> action) Parameters Type Name Description Action < Boolean > action Returns Type Description ITriggerAction <T> View Source AddFail(Action<Exception>) Declaration public ITriggerAction<T> AddFail(Action<Exception> action) Parameters Type Name Description Action < Exception > action Returns Type Description ITriggerAction <T> View Source Cancel() Declaration public void Cancel() View Source Clear() Declaration public void Clear() View Source Dispose() Declaration public void Dispose() View Source Fire(T, Exception) Declaration protected void Fire(T ret, Exception ex) Parameters Type Name Description T ret Exception ex View Source GetAwaiter() Declaration public TriggerActionAwaiter<T> GetAwaiter() Returns Type Description TriggerActionAwaiter <T> View Source Remove(Action<T>) Declaration public ITriggerAction<T> Remove(Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description ITriggerAction <T> View Source RemoveComplete(Action<Boolean>) Declaration public ITriggerAction<T> RemoveComplete(Action<bool> action) Parameters Type Name Description Action < Boolean > action Returns Type Description ITriggerAction <T> View Source RemoveFail(Action<Exception>) Declaration public ITriggerAction<T> RemoveFail(Action<Exception> action) Parameters Type Name Description Action < Exception > action Returns Type Description ITriggerAction <T> Events View Source OnCancel Declaration public event Action OnCancel Event Type Type Description Action View Source OnComplete Declaration public event Action<bool> OnComplete Event Type Type Description Action < Boolean > View Source OnFail Declaration public event Action<Exception> OnFail Event Type Type Description Action < Exception > View Source OnFire Declaration public event Action<T> OnFire Event Type Type Description Action <T> Operators View Source Explicit(Task<T> to TriggerAction<T>) Declaration public static explicit operator TriggerAction<T>(Task<T> task) Parameters Type Name Description Task <T> task Returns Type Description TriggerAction <T> Explicit Interface Implementations View Source IEnumerator.Current Declaration object IEnumerator.Current { get; } Returns Type Description Object View Source IEnumerator.MoveNext() Declaration bool IEnumerator.MoveNext() Returns Type Description Boolean View Source IEnumerator.Reset() Declaration void IEnumerator.Reset() Implements ITriggerAction<T> ITriggerAction System.IDisposable System.Collections.IEnumerator Extension Methods TriggerExtensions.Add<T>(ITriggerAction<T>, Trigger<T>) TriggerExtensions.Select<T>(ITriggerAction, Func<T>, Boolean) TriggerExtensions.Select<T, U>(ITriggerAction<T>, Func<T, U>, Boolean) TriggerExtensions.Where<T>(ITriggerAction<T>, Func<T, Boolean>) TriggerExtensions.Any<T>(ITriggerAction<T>) TriggerExtensions.Then<T, U>(ITriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) TriggerExtensions.Then<T>(ITriggerAction<T>, Func<T, ITriggerAction>, Boolean) TriggerExtensions.Time<T>(ITriggerAction<T>, Single) TriggerExtensions.Realtime<T>(ITriggerAction<T>, Single) TriggerExtensions.Timeout<T>(ITriggerAction<T>, Single, Boolean) TriggerExtensions.GetAwaiter(ITriggerAction) TriggerExtensions.GetAwaiter<T>(ITriggerAction<T>, CancellationToken)"
  },
  "api/ILib.TriggerActionAwaiter-1.html": {
    "href": "api/ILib.TriggerActionAwaiter-1.html",
    "title": "Struct TriggerActionAwaiter<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Struct TriggerActionAwaiter<T> Implements ICriticalNotifyCompletion INotifyCompletion Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : ILib Assembly : ILib.dll Syntax public struct TriggerActionAwaiter<T> : ICriticalNotifyCompletion, INotifyCompletion Type Parameters Name Description T Constructors View Source TriggerActionAwaiter(IHasTriggerAction<T>) Declaration public TriggerActionAwaiter(IHasTriggerAction<T> trigger) Parameters Type Name Description IHasTriggerAction <T> trigger View Source TriggerActionAwaiter(ITriggerAction<T>) Declaration public TriggerActionAwaiter(ITriggerAction<T> action) Parameters Type Name Description ITriggerAction <T> action Properties View Source IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description Boolean Methods View Source GetResult() Declaration public T GetResult() Returns Type Description T View Source OnCompleted(Action) Declaration public void OnCompleted(Action continuation) Parameters Type Name Description Action continuation View Source UnsafeOnCompleted(Action) Declaration public void UnsafeOnCompleted(Action continuation) Parameters Type Name Description Action continuation Implements System.Runtime.CompilerServices.ICriticalNotifyCompletion System.Runtime.CompilerServices.INotifyCompletion"
  },
  "api/ILib.TriggerActionAwaiter.html": {
    "href": "api/ILib.TriggerActionAwaiter.html",
    "title": "Struct TriggerActionAwaiter | Yazawa Ichio Unity Package Document",
    "keywords": "Struct TriggerActionAwaiter Implements ICriticalNotifyCompletion INotifyCompletion Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Namespace : ILib Assembly : ILib.dll Syntax public struct TriggerActionAwaiter : ICriticalNotifyCompletion, INotifyCompletion Constructors View Source TriggerActionAwaiter(IHasTriggerAction) Declaration public TriggerActionAwaiter(IHasTriggerAction trigger) Parameters Type Name Description IHasTriggerAction trigger View Source TriggerActionAwaiter(ITriggerAction) Declaration public TriggerActionAwaiter(ITriggerAction action) Parameters Type Name Description ITriggerAction action Properties View Source IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description Boolean Methods View Source GetResult() Declaration public void GetResult() View Source OnCompleted(Action) Declaration public void OnCompleted(Action continuation) Parameters Type Name Description Action continuation View Source UnsafeOnCompleted(Action) Declaration public void UnsafeOnCompleted(Action continuation) Parameters Type Name Description Action continuation Implements System.Runtime.CompilerServices.ICriticalNotifyCompletion System.Runtime.CompilerServices.INotifyCompletion"
  },
  "api/ILib.AssetBundles.ABLoader.html": {
    "href": "api/ILib.AssetBundles.ABLoader.html",
    "title": "Class ABLoader | Yazawa Ichio Unity Package Document",
    "keywords": "Class ABLoader アセットバンドルのローダーです。 開始時にInitializeで初期化してから利用してください。 Inheritance Object ABLoader Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public static class ABLoader Properties View Source Initialized 初期化済みか？ Declaration public static bool Initialized { get; } Property Value Type Description Boolean View Source MaxDownloadCount 同時ダウンロード数です。 現在値よりも低い値を設定した場合、適応されるのに遅延があります。 デフォルトは5です。 Declaration public static int MaxDownloadCount { get; set; } Property Value Type Description Int32 View Source MaxLoadCount 同時ロード数です。 現在値よりも低い値を設定した場合、適応されるのに遅延があります。 デフォルトは10です。 Declaration public static int MaxLoadCount { get; set; } Property Value Type Description Int32 View Source UnloadMode アンロードのモードです。 デフォルトは自動破棄になります。 Declaration public static UnloadMode UnloadMode { get; set; } Property Value Type Description UnloadMode Methods View Source CacheClear(Action) キャッシュのクリアを行います。 停止後に実行されるため、実行完了後に再度初期化が必要になります。 Declaration public static CustomYieldInstruction CacheClear(Action onComplete = null) Parameters Type Name Description Action onComplete Returns Type Description UnityEngine.CustomYieldInstruction View Source CreateInternalOperator(String, String, String) StreamingAssetsのバンドルを利用する場合のオペレーターです。 ディレクトリ名とマニフェストの相対パスを渡してください。 Declaration public static InternalLoadOperator CreateInternalOperator(string directory, string manifest, string manifestAssetName = \"AssetBundleManifest\") Parameters Type Name Description String directory String manifest String manifestAssetName Returns Type Description InternalLoadOperator View Source CreateNetworkOperator(String, String, String, String) サーバからバンドルをダウンロードしてからロードする場合のオペレーターです。 リクエスト時のベースのURLとマニフェストのパスとバージョンを指定してください。 Declaration public static NetworkLoadOperator CreateNetworkOperator(string url, string manifest, string version, string manifestAssetName = \"AssetBundleManifest\") Parameters Type Name Description String url String manifest String version String manifestAssetName Returns Type Description NetworkLoadOperator View Source Download(String[], Action<Boolean>, Action<Exception>) ファイルの一括ダウンロードを行います。 すべての処理が終了した際にonCompleteが実行されます。 失敗したリクエストがあった場合はfalseが引数に渡されます。 onFailは失敗したすべてのリクエストに対して実行されます。 進捗を取得したい場合は返り値を利用してください。 エディタモードでは正常に動作しません。 Declaration public static Func<float> Download(string[] names, Action<bool> onComplete, Action<Exception> onFail = null) Parameters Type Name Description String [] names Action < Boolean > onComplete Action < Exception > onFail Returns Type Description Func < Single > View Source DownloadByTags(String[], Action<Boolean>, Action<Exception>) 指定したタグのファイルの一括ダウンロードを行います。 すべての処理が終了した際にonCompleteが実行されます。 失敗したリクエストがあった場合はfalseが引数に渡されます。 onFailは失敗したすべてのリクエストに対して実行されます。 リクエスト件数と進捗を取得したい場合は返り値を利用してください。 エディタモードでは正常に動作しません。 Declaration public static (int, Func<float>)DownloadByTags(string[] tags, Action<bool> onComplete, Action<Exception> onFail = null) Parameters Type Name Description String [] tags Action < Boolean > onComplete Action < Exception > onFail Returns Type Description ValueTuple < Int32 , Func < Single >> View Source GetDownloadSize(String[]) 指定した名前のダウンロードが必要なサイズを返します。 標準では機能していません。IBundleDataからサイズを取得できるようにする必要があります。 Declaration public static long GetDownloadSize(string[] names) Parameters Type Name Description String [] names Returns Type Description Int64 View Source GetReference(String) Idに対してアセットを読み込みます。 Declaration public static (string bundleName, string assetName)GetReference(string id) Parameters Type Name Description String id Returns Type Description ValueTuple < String , String > View Source GetSize(String[], Boolean) 指定した名前のサイズを返します。 キャッシュ済みかなどは考慮しません。 標準では機能していません。IBundleDataからサイズを取得できるようにする必要があります。 Declaration public static long GetSize(string[] names, bool ignoreDpend = false) Parameters Type Name Description String [] names Boolean ignoreDpend Returns Type Description Int64 View Source Initialize(ILoadOperator, Action, Action<Exception>) 初期化を行います。 ロードの時の処理を決めるオペレーターを指定してください。 オペレーターは手動での作成の他にCreateInternalOperatorやCreateNetworkOperatorで作成ができます。 Declaration public static CustomYieldInstruction Initialize(ILoadOperator loadOperator, Action onSuccess, Action<Exception> onFail) Parameters Type Name Description ILoadOperator loadOperator Action onSuccess Action < Exception > onFail Returns Type Description UnityEngine.CustomYieldInstruction View Source IsCache(String) キャッシュファイルが存在するか？ Declaration public static bool IsCache(string name) Parameters Type Name Description String name Returns Type Description Boolean View Source LoadAsset<T>(String, String, Action<T>, Action<Exception>) アセットバンドルからアセットを同期ロードします。 コンテナへの参照は自動で解除します。 Declaration public static void LoadAsset<T>(string name, string assetName, Action<T> onSuccess, Action<Exception> onFail) where T : Object Parameters Type Name Description String name String assetName Action <T> onSuccess Action < Exception > onFail Type Parameters Name Description T View Source LoadAssetAsync<T>(String, String, Action<T>, Action<Exception>) アセットバンドルからアセットを非同期ロードします。 コンテナへの参照は自動で解除します。 Declaration public static void LoadAssetAsync<T>(string name, string assetName, Action<T> onSuccess, Action<Exception> onFail) where T : Object Parameters Type Name Description String name String assetName Action <T> onSuccess Action < Exception > onFail Type Parameters Name Description T View Source LoadContainer(String, Action<BundleContainerRef>, Action<Exception>) アセットバンドルをロードします。 BundleContainerRefからアセットをロードし、不要になった際にDisposeを実行してください。 UnloadMode.ImmediatelyモードでDisposeを実行し忘れるとバンドルがリークします。 Declaration public static void LoadContainer(string name, Action<BundleContainerRef> onSuccess, Action<Exception> onFail) Parameters Type Name Description String name Action < BundleContainerRef > onSuccess Action < Exception > onFail View Source LoadScene(String, String, LoadSceneMode, Action, Action<Exception>) アセットバンドルからシーンを同期ロードします。 コンテナへの参照は自動で解除します。 Declaration public static void LoadScene(string name, string scaneName, LoadSceneMode mode, Action onSuccess, Action<Exception> onFail) Parameters Type Name Description String name String scaneName UnityEngine.SceneManagement.LoadSceneMode mode Action onSuccess Action < Exception > onFail View Source LoadSceneAsync(String, String, LoadSceneMode, Action, Action<Exception>) アセットバンドルからシーンを非同期ロードします。 コンテナへの参照は自動で解除します。 Declaration public static void LoadSceneAsync(string name, string sceneName, LoadSceneMode mode, Action onSuccess, Action<Exception> onFail) Parameters Type Name Description String name String sceneName UnityEngine.SceneManagement.LoadSceneMode mode Action onSuccess Action < Exception > onFail View Source Stop(Action) 現在のリクエストを中断し機能を停止します。 リクエスト元に中断は通知されません。 Declaration public static CustomYieldInstruction Stop(Action onComplete = null) Parameters Type Name Description Action onComplete Returns Type Description UnityEngine.CustomYieldInstruction View Source Unload() Declaration public static void Unload()"
  },
  "api/ILib.AssetBundles.ExManifest.ExManifestAsset.html": {
    "href": "api/ILib.AssetBundles.ExManifest.ExManifestAsset.html",
    "title": "Class ExManifestAsset | Yazawa Ichio Unity Package Document",
    "keywords": "Class ExManifestAsset Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject ExManifestAsset Implements IBundleDataProvider Inherited Members UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() Namespace : ILib.AssetBundles.ExManifest Assembly : ILib.AssetBundles.ExManifest.dll Syntax public class ExManifestAsset : ScriptableObject, IBundleDataProvider Fields View Source DepInfo Declaration [SerializeField] public DepInfo[] DepInfo Field Value Type Description DepInfo [] View Source Infos Declaration [SerializeField] public ABInfo[] Infos Field Value Type Description ABInfo [] View Source RefInfo Declaration [SerializeField] public RefInfo[] RefInfo Field Value Type Description RefInfo [] View Source TagInfo Declaration [SerializeField] public TagInfo[] TagInfo Field Value Type Description TagInfo [] Methods View Source Provide() Declaration public IBundleData Provide() Returns Type Description IBundleData Implements IBundleDataProvider"
  },
  "api/ILib.AssetBundles.ExManifest.Tools.ExDataProvider.html": {
    "href": "api/ILib.AssetBundles.ExManifest.Tools.ExDataProvider.html",
    "title": "Class ExDataProvider | Yazawa Ichio Unity Package Document",
    "keywords": "Class ExDataProvider Inheritance Object ExDataProvider Implements IExDataProvider Namespace : ILib.AssetBundles.ExManifest.Tools Assembly : ILib.AssetBundles.ExManifest.Tools.dll Syntax public class ExDataProvider : IExDataProvider Constructors View Source ExDataProvider() Declaration public ExDataProvider() Methods View Source GetReferenceId(String, String) Declaration public string GetReferenceId(string bundleName, string path) Parameters Type Name Description String bundleName String path Returns Type Description String View Source GetTag(String, String[]) Declaration public string[] GetTag(string bundleName, string[] paths) Parameters Type Name Description String bundleName String [] paths Returns Type Description String [] Implements IExDataProvider"
  },
  "api/ILib.AssetBundles.ExManifest.Tools.html": {
    "href": "api/ILib.AssetBundles.ExManifest.Tools.html",
    "title": "Namespace ILib.AssetBundles.ExManifest.Tools | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.AssetBundles.ExManifest.Tools Classes Build ExDataProvider GUIDReferenceSetterContext PathToTagSetterContext Interfaces IReferenceCollector ITagCollector Enums PathToTagSetterContext.TagMode"
  },
  "api/ILib.AssetBundles.InternalInitializer.html": {
    "href": "api/ILib.AssetBundles.InternalInitializer.html",
    "title": "Class InternalInitializer | Yazawa Ichio Unity Package Document",
    "keywords": "Class InternalInitializer Inheritance Object Initializer InternalInitializer Inherited Members Initializer.AddCompleteEvent(Action<IBundleData, Exception>) Initializer.Success(IBundleData) Initializer.Fail(Exception) Initializer.Load(String, String) Initializer.Download(String, String, String, Action) Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public class InternalInitializer : Initializer Constructors View Source InternalInitializer(String, String) Declaration public InternalInitializer(string loadPath, string assetName = \"AssetBundleManifest\") Parameters Type Name Description String loadPath String assetName Methods View Source Start() Declaration protected override void Start() Overrides Initializer.Start()"
  },
  "api/ILib.Audio.SoundProviderBase-1.html": {
    "href": "api/ILib.Audio.SoundProviderBase-1.html",
    "title": "Class SoundProviderBase<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class SoundProviderBase<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します Inheritance Object SoundProviderBase<T> GeneralSoundProvider<T> IntKeySoundProvider<T> SoundProvider SoundProvider<T> Implements ISoundProvider <T> Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public abstract class SoundProviderBase<T> : ISoundProvider<T> Type Parameters Name Description T Constructors View Source SoundProviderBase() Declaration public SoundProviderBase() View Source SoundProviderBase(AudioMixerGroup, String) Declaration public SoundProviderBase(AudioMixerGroup group, string format) Parameters Type Name Description UnityEngine.Audio.AudioMixerGroup group String format Properties View Source CustomLoad Declaration public Func<T, Action<SoundInfo, Exception>, bool> CustomLoad { set; } Property Value Type Description Func <T, Action < SoundInfo , Exception >, Boolean > View Source MixerGroup Declaration public AudioMixerGroup MixerGroup { get; set; } Property Value Type Description UnityEngine.Audio.AudioMixerGroup View Source PathConversion Declaration public Func<string, string> PathConversion { set; } Property Value Type Description Func < String , String > Methods View Source GetCacheKey(T) Declaration public abstract string GetCacheKey(T prm) Parameters Type Name Description T prm Returns Type Description String View Source GetPath(T) Declaration protected string GetPath(T prm) Parameters Type Name Description T prm Returns Type Description String View Source Load(T, Action<SoundInfo, Exception>) Declaration protected virtual bool Load(T prm, Action<SoundInfo, Exception> onComplete) Parameters Type Name Description T prm Action < SoundInfo , Exception > onComplete Returns Type Description Boolean View Source SetPathFormat(String) Declaration public SoundProviderBase<T> SetPathFormat(string format) Parameters Type Name Description String format Returns Type Description SoundProviderBase <T> Explicit Interface Implementations View Source ISoundProvider<T>.Load(T, Action<SoundInfo, Exception>) Declaration bool ISoundProvider<T>.Load(T prm, Action<SoundInfo, Exception> onComplete) Parameters Type Name Description T prm Action < SoundInfo , Exception > onComplete Returns Type Description Boolean Implements ISoundProvider<T> Extension Methods ISoundProviderEx.Create<T>(ISoundProvider<T>, SoundPlayerConfig)"
  },
  "api/ILib.CL.CLParser.html": {
    "href": "api/ILib.CL.CLParser.html",
    "title": "Class CLParser | Yazawa Ichio Unity Package Document",
    "keywords": "Class CLParser Inheritance Object CLParser Namespace : ILib.CL Assembly : ILib.CL.dll Syntax public class CLParser Methods View Source Run(Object, String[]) Declaration public void Run(object obj, string[] args) Parameters Type Name Description Object obj String [] args View Source Run<T>() Declaration public static T Run<T>() where T : new() Returns Type Description T Type Parameters Name Description T View Source Run<T>(String[]) Declaration public T Run<T>(string[] args) where T : new() Parameters Type Name Description String [] args Returns Type Description T Type Parameters Name Description T View Source SetDefault(Char, String, String) Declaration public void SetDefault(char shortName, string longName, string value) Parameters Type Name Description Char shortName String longName String value"
  },
  "api/ILib.Debugs.Widgets.html": {
    "href": "api/ILib.Debugs.Widgets.html",
    "title": "Namespace ILib.Debugs.Widgets | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.Debugs.Widgets Classes CategoryTab DebugButtonItem DebugCheckBoxItem DebugFloatFieldItem DebugInputFieldItem DebugInputFieldItemBase DebugIntFieldItem DebugIntSliderItem DebugItemBase DebugItemTapHandler DebugItemTapHandler.Handler DebugLabelItem DebugMultiButtonItem DebugPageArrow DebugPageItem DebugRadioButtonItem DebugSliderItem DebugSliderItemBase DebugToggleItem DebugValueFieldItem<T> HeaderButton"
  },
  "api/ILib.FSM.StateMachine.html": {
    "href": "api/ILib.FSM.StateMachine.html",
    "title": "Class StateMachine | Yazawa Ichio Unity Package Document",
    "keywords": "Class StateMachine ステート管理するクラスです。 遷移や更新処理はInitを実行するまで行われません。 Inheritance Object StateMachine Namespace : ILib.FSM Assembly : ILib.dll Syntax public class StateMachine Constructors View Source StateMachine(Object) Declaration public StateMachine(object owner) Parameters Type Name Description Object owner Properties View Source Initialized Declaration public bool Initialized { get; } Property Value Type Description Boolean Methods View Source AddDirectTransition(Int32, State, Boolean) イベントによる直接遷移を定義します。 直接遷移はどのステートからも実行が可能です。 同じイベントの場合は後で追加したイベントが優先されます。 Declaration public void AddDirectTransition(int eventId, State to, bool reTranstion = false) Parameters Type Name Description Int32 eventId State to Boolean reTranstion View Source AddDirectTransition<TEnum>(TEnum, State, Boolean) イベントによる直接遷移を定義します。 直接遷移はどのステートからも実行が可能です。 同じイベントの場合は後で追加したイベントが優先されます。 列挙型は暗黙的にintに置き換えられます。 Declaration public void AddDirectTransition<TEnum>(TEnum eventId, State to, bool reTranstion = false) where TEnum : struct, IConvertible Parameters Type Name Description TEnum eventId State to Boolean reTranstion Type Parameters Name Description TEnum View Source AddState(State) ステートを追加します。 Declaration public State AddState(State state) Parameters Type Name Description State state Returns Type Description State View Source AddState<T>() ステートを生成と追加を行います。 Declaration public T AddState<T>() where T : State, new() Returns Type Description T Type Parameters Name Description T View Source AddTransition(Int32, State, State) イベントによるステート間の遷移を定義します。 同じイベントの場合は後で追加したイベントが優先されます。 Declaration public void AddTransition(int eventId, State from, State to) Parameters Type Name Description Int32 eventId State from State to View Source AddTransition<TEnum>(TEnum, State, State) イベントによるステート間の遷移を定義します。 列挙型は暗黙的にintに置き換えられます。 Declaration public void AddTransition<TEnum>(TEnum eventId, State from, State to) where TEnum : struct, IConvertible Parameters Type Name Description TEnum eventId State from State to Type Parameters Name Description TEnum View Source Init(State, Object) 指定のステートでステートマシーンを起動します。 Declaration public void Init(State state, object prm = null) Parameters Type Name Description State state Object prm View Source Init(Object) ステートマシーンを起動します。 一番最初に登録されたステートを初期ステートにします。 指定したい場合は引数にステートを渡してください。 Declaration public void Init(object prm = null) Parameters Type Name Description Object prm View Source Transition(Int32, Object) 遷移イベントを発行します Declaration public bool Transition(int eventId, object prm = null) Parameters Type Name Description Int32 eventId Object prm Returns Type Description Boolean View Source Transition<TEnum>(TEnum, Object) 遷移イベントを発行します 列挙型は暗黙的にintに置き換えられます。 Declaration public bool Transition<TEnum>(TEnum eventId, object prm = null) where TEnum : struct, IConvertible Parameters Type Name Description TEnum eventId Object prm Returns Type Description Boolean Type Parameters Name Description TEnum View Source Update() ステートで更新処理が必要な場合に実行してください。 Declaration public void Update()"
  },
  "api/ILib.FSM.html": {
    "href": "api/ILib.FSM.html",
    "title": "Namespace ILib.FSM | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.FSM Classes State ステートの抽象クラスです 継承先で実装してください。 StateMachine ステート管理するクラスです。 遷移や更新処理はInitを実行するまで行われません。"
  },
  "api/ILib.Logger.Log.html": {
    "href": "api/ILib.Logger.Log.html",
    "title": "Class Log | Yazawa Ichio Unity Package Document",
    "keywords": "Class Log Inheritance Object Log Namespace : ILib.Logger Assembly : ILib.dll Syntax public static class Log Properties View Source Enabled Declaration public static bool Enabled { get; set; } Property Value Type Description Boolean View Source EnabledAssert Declaration public static bool EnabledAssert { get; set; } Property Value Type Description Boolean View Source Level Declaration public static Log.LogLevel Level { get; set; } Property Value Type Description Log.LogLevel View Source Logger Declaration public static ILogger Logger { get; set; } Property Value Type Description UnityEngine.ILogger Methods View Source Init() Declaration public static void Init()"
  },
  "api/ILib.Logger.html": {
    "href": "api/ILib.Logger.html",
    "title": "Namespace ILib.Logger | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.Logger Classes Log Enums Log.LogLevel"
  },
  "api/ILib.MVVM.IBindable-1.html": {
    "href": "api/ILib.MVVM.IBindable-1.html",
    "title": "Interface IBindable<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IBindable<T> Inherited Members IBindable.Path IBindable.IsActive IBindable.TryUpdate() IBindable.BindType() IBindable.Bind(IBindingProperty) IBindable.Unbind(IBindingProperty) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IBindable<T> : IBindable, IViewElement Type Parameters Name Description T Methods View Source Bind(IBindingProperty<T>) Declaration void Bind(IBindingProperty<T> prop) Parameters Type Name Description IBindingProperty <T> prop"
  },
  "api/ILib.MVVM.IBindable.html": {
    "href": "api/ILib.MVVM.IBindable.html",
    "title": "Interface IBindable | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IBindable Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IBindable : IViewElement Properties View Source IsActive Declaration bool IsActive { get; } Property Value Type Description Boolean View Source Path Declaration string Path { get; } Property Value Type Description String Methods View Source Bind(IBindingProperty) Declaration void Bind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop View Source BindType() Declaration Type BindType() Returns Type Description Type View Source TryUpdate() Declaration void TryUpdate() View Source Unbind(IBindingProperty) Declaration void Unbind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop"
  },
  "api/ILib.MVVM.IViewElement.html": {
    "href": "api/ILib.MVVM.IViewElement.html",
    "title": "Interface IViewElement | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IViewElement Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IViewElement"
  },
  "api/ILib.MVVM.IViewEvent.html": {
    "href": "api/ILib.MVVM.IViewEvent.html",
    "title": "Interface IViewEvent | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IViewEvent Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IViewEvent : IViewElement Properties View Source Name Declaration string Name { get; } Property Value Type Description String Methods View Source Bind(IViewEventHandler) Declaration void Bind(IViewEventHandler handler) Parameters Type Name Description IViewEventHandler handler View Source EventType() Declaration Type EventType() Returns Type Description Type"
  },
  "api/ILib.MVVM.StaticVM.ConfigAsset.html": {
    "href": "api/ILib.MVVM.StaticVM.ConfigAsset.html",
    "title": "Class ConfigAsset | Yazawa Ichio Unity Package Document",
    "keywords": "Class ConfigAsset Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject ConfigAsset Inherited Members UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() Namespace : ILib.MVVM.StaticVM Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class ConfigAsset : ScriptableObject Properties View Source I Declaration public static ConfigAsset I { get; } Property Value Type Description ConfigAsset Methods View Source CreateConfig() Declaration public static void CreateConfig() View Source GetConfig() Declaration public Config GetConfig() Returns Type Description Config View Source UpdateConfig(Config) Declaration public void UpdateConfig(Config config) Parameters Type Name Description Config config"
  },
  "api/ILib.MVVM.StaticVM.GenerateWizard.html": {
    "href": "api/ILib.MVVM.StaticVM.GenerateWizard.html",
    "title": "Class GenerateWizard | Yazawa Ichio Unity Package Document",
    "keywords": "Class GenerateWizard Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject UnityEditor.EditorWindow UnityEditor.ScriptableWizard GenerateWizard Inherited Members UnityEditor.ScriptableWizard.DisplayWizard<T>(System.String) UnityEditor.ScriptableWizard.DisplayWizard<T>(System.String, System.String) UnityEditor.ScriptableWizard.DisplayWizard<T>(System.String, System.String, System.String) UnityEditor.ScriptableWizard.DisplayWizard(System.String, System.Type, System.String) UnityEditor.ScriptableWizard.DisplayWizard(System.String, System.Type) UnityEditor.ScriptableWizard.DisplayWizard(System.String, System.Type, System.String, System.String) UnityEditor.ScriptableWizard.helpString UnityEditor.ScriptableWizard.errorString UnityEditor.ScriptableWizard.createButtonName UnityEditor.ScriptableWizard.otherButtonName UnityEditor.ScriptableWizard.isValid UnityEditor.EditorWindow.BeginWindows() UnityEditor.EditorWindow.EndWindows() UnityEditor.EditorWindow.ShowNotification(UnityEngine.GUIContent) UnityEditor.EditorWindow.RemoveNotification() UnityEditor.EditorWindow.ShowTab() UnityEditor.EditorWindow.Focus() UnityEditor.EditorWindow.ShowUtility() UnityEditor.EditorWindow.ShowPopup() UnityEditor.EditorWindow.ShowAsDropDown(UnityEngine.Rect, UnityEngine.Vector2) UnityEditor.EditorWindow.Show() UnityEditor.EditorWindow.Show(System.Boolean) UnityEditor.EditorWindow.ShowAuxWindow() UnityEditor.EditorWindow.GetWindow(System.Type, System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.GetWindow(System.Type, System.Boolean, System.String) UnityEditor.EditorWindow.GetWindow(System.Type, System.Boolean) UnityEditor.EditorWindow.GetWindow(System.Type) UnityEditor.EditorWindow.GetWindowWithRect(System.Type, UnityEngine.Rect, System.Boolean, System.String) UnityEditor.EditorWindow.GetWindowWithRect(System.Type, UnityEngine.Rect, System.Boolean) UnityEditor.EditorWindow.GetWindowWithRect(System.Type, UnityEngine.Rect) UnityEditor.EditorWindow.GetWindow<T>() UnityEditor.EditorWindow.GetWindow<T>(System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Boolean, System.String) UnityEditor.EditorWindow.GetWindow<T>(System.String) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.GetWindow<T>(System.Type[]) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Type[]) UnityEditor.EditorWindow.GetWindow<T>(System.String, System.Boolean, System.Type[]) UnityEditor.EditorWindow.FocusWindowIfItsOpen(System.Type) UnityEditor.EditorWindow.FocusWindowIfItsOpen<T>() UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean, System.String) UnityEditor.EditorWindow.GetWindowWithRect<T>(UnityEngine.Rect, System.Boolean, System.String, System.Boolean) UnityEditor.EditorWindow.Close() UnityEditor.EditorWindow.Repaint() UnityEditor.EditorWindow.SendEvent(UnityEngine.Event) UnityEditor.EditorWindow.wantsMouseMove UnityEditor.EditorWindow.wantsMouseEnterLeaveWindow UnityEditor.EditorWindow.autoRepaintOnSceneChange UnityEditor.EditorWindow.maximized UnityEditor.EditorWindow.focusedWindow UnityEditor.EditorWindow.mouseOverWindow UnityEditor.EditorWindow.minSize UnityEditor.EditorWindow.maxSize UnityEditor.EditorWindow.title UnityEditor.EditorWindow.titleContent UnityEditor.EditorWindow.depthBufferBits UnityEditor.EditorWindow.antiAlias UnityEditor.EditorWindow.position UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() Namespace : ILib.MVVM.StaticVM Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class GenerateWizard : ScriptableWizard Methods View Source DrawWizardGUI() Declaration protected override bool DrawWizardGUI() Returns Type Description Boolean Overrides UnityEditor.ScriptableWizard.DrawWizardGUI() View Source Setup(IView, String) Declaration public void Setup(IView view, string name) Parameters Type Name Description IView view String name"
  },
  "api/ILib.RepeatRoutine.html": {
    "href": "api/ILib.RepeatRoutine.html",
    "title": "Class RepeatRoutine | Yazawa Ichio Unity Package Document",
    "keywords": "Class RepeatRoutine Unityのコルーチンのラッパーです。 完了と例外を取得できます。 完了後に再度実行が可能です。 Inheritance Object UnityEngine.CustomYieldInstruction RoutineBase RepeatRoutine Implements IEnumerator IRoutine < Boolean > IHasTriggerAction < Boolean > IHasTriggerAction IRoutine IDisposable Inherited Members RoutineBase.IsRunning RoutineBase.Restartable RoutineBase.keepWaiting RoutineBase.Result(IHasResult) RoutineBase.Start() RoutineBase.Cancel() RoutineBase.IDisposable.Dispose() UnityEngine.CustomYieldInstruction.MoveNext() UnityEngine.CustomYieldInstruction.Reset() UnityEngine.CustomYieldInstruction.Current Namespace : ILib Assembly : ILib.dll Syntax public class RepeatRoutine : RoutineBase, IEnumerator, IRoutine<bool>, IHasTriggerAction<bool>, IHasTriggerAction, IRoutine, IDisposable Constructors View Source RepeatRoutine(MonoBehaviour, Func<IEnumerator>) Declaration public RepeatRoutine(MonoBehaviour behaviour, Func<IEnumerator> routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour Func < IEnumerator > routine Properties View Source Action Declaration public ITriggerAction<bool> Action { get; } Property Value Type Description ITriggerAction < Boolean > Methods View Source Fail(Exception) Declaration protected override void Fail(Exception ex) Parameters Type Name Description Exception ex Overrides RoutineBase.Fail(Exception) View Source Success() Declaration protected override void Success() Overrides RoutineBase.Success() Explicit Interface Implementations View Source IHasTriggerAction.Action Declaration ITriggerAction IHasTriggerAction.Action { get; } Returns Type Description ITriggerAction Implements System.Collections.IEnumerator IRoutine<T> IHasTriggerAction<T> IHasTriggerAction IRoutine System.IDisposable Extension Methods TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T, Exception>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Trigger<T>) TriggerExtensions.AddFail<T>(IHasTriggerAction<T>, Action<Exception>) TriggerExtensions.Wait<T>(IHasTriggerAction<T>) TriggerExtensions.Select<T, U>(IHasTriggerAction<T>, Func<T, U>, Boolean) TriggerExtensions.Where<T>(IHasTriggerAction<T>, Func<T, Boolean>) TriggerExtensions.Any<T>(IHasTriggerAction<T>) TriggerExtensions.Then<T, U>(IHasTriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) TriggerExtensions.Then<T>(IHasTriggerAction<T>, Func<T, ITriggerAction>, Boolean) TriggerExtensions.Time<T>(IHasTriggerAction<T>, Single) TriggerExtensions.Realtime<T>(IHasTriggerAction<T>, Single) TriggerExtensions.GetAwaiter(IHasTriggerAction) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>, CancellationToken)"
  },
  "api/ILib.RepeatTaskRoutine-1.html": {
    "href": "api/ILib.RepeatTaskRoutine-1.html",
    "title": "Class RepeatTaskRoutine<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class RepeatTaskRoutine<T> Unityのコルーチンのラッパーです。 IHasResult[T]型を返すイテレータをコンストラクタで指定してください。 値が返されるたびにトリガーが実行されます。 完了後に再度実行が可能です。 Inheritance Object UnityEngine.CustomYieldInstruction RoutineBase RepeatTaskRoutine<T> Implements IEnumerator IRoutine <T> IHasTriggerAction <T> IHasTriggerAction IRoutine IDisposable Inherited Members RoutineBase.IsRunning RoutineBase.Restartable RoutineBase.keepWaiting RoutineBase.Start() RoutineBase.Cancel() RoutineBase.IDisposable.Dispose() UnityEngine.CustomYieldInstruction.MoveNext() UnityEngine.CustomYieldInstruction.Reset() UnityEngine.CustomYieldInstruction.Current Namespace : ILib Assembly : ILib.dll Syntax public class RepeatTaskRoutine<T> : RoutineBase, IEnumerator, IRoutine<T>, IHasTriggerAction<T>, IHasTriggerAction, IRoutine, IDisposable Type Parameters Name Description T Constructors View Source RepeatTaskRoutine(MonoBehaviour, Func<IEnumerator>) Declaration public RepeatTaskRoutine(MonoBehaviour behaviour, Func<IEnumerator> routine) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour Func < IEnumerator > routine Properties View Source Action Declaration public ITriggerAction<T> Action { get; } Property Value Type Description ITriggerAction <T> View Source Complete Declaration public ITriggerAction<bool> Complete { get; } Property Value Type Description ITriggerAction < Boolean > Methods View Source Fail(Exception) Declaration protected override void Fail(Exception ex) Parameters Type Name Description Exception ex Overrides RoutineBase.Fail(Exception) View Source Result(IHasResult) Declaration protected override bool Result(IHasResult result) Parameters Type Name Description IHasResult result Returns Type Description Boolean Overrides RoutineBase.Result(IHasResult) View Source Success() Declaration protected override void Success() Overrides RoutineBase.Success() Explicit Interface Implementations View Source IHasTriggerAction.Action Declaration ITriggerAction IHasTriggerAction.Action { get; } Returns Type Description ITriggerAction Implements System.Collections.IEnumerator IRoutine<T> IHasTriggerAction<T> IHasTriggerAction IRoutine System.IDisposable Extension Methods TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T, Exception>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Trigger<T>) TriggerExtensions.AddFail<T>(IHasTriggerAction<T>, Action<Exception>) TriggerExtensions.Wait<T>(IHasTriggerAction<T>) TriggerExtensions.Select<T, U>(IHasTriggerAction<T>, Func<T, U>, Boolean) TriggerExtensions.Where<T>(IHasTriggerAction<T>, Func<T, Boolean>) TriggerExtensions.Any<T>(IHasTriggerAction<T>) TriggerExtensions.Then<T, U>(IHasTriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) TriggerExtensions.Then<T>(IHasTriggerAction<T>, Func<T, ITriggerAction>, Boolean) TriggerExtensions.Time<T>(IHasTriggerAction<T>, Single) TriggerExtensions.Realtime<T>(IHasTriggerAction<T>, Single) TriggerExtensions.GetAwaiter(IHasTriggerAction) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>, CancellationToken)"
  },
  "api/ILib.ScWidgets.ExtendHeight.html": {
    "href": "api/ILib.ScWidgets.ExtendHeight.html",
    "title": "Class ExtendHeight | Yazawa Ichio Unity Package Document",
    "keywords": "Class ExtendHeight Inheritance Object ExtendHeight Implements IExtend Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ExtendHeight : IExtend Properties View Source Height Declaration public float Height { get; set; } Property Value Type Description Single Methods View Source Get(Single) Declaration public static ExtendHeight Get(float val) Parameters Type Name Description Single val Returns Type Description ExtendHeight Implements IExtend"
  },
  "api/ILib.ScWidgets.ExtendSize.html": {
    "href": "api/ILib.ScWidgets.ExtendSize.html",
    "title": "Class ExtendSize | Yazawa Ichio Unity Package Document",
    "keywords": "Class ExtendSize Inheritance Object ExtendSize Implements IExtend Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ExtendSize : IExtend Properties View Source Height Declaration public float Height { get; set; } Property Value Type Description Single View Source Size Declaration public Vector2 Size { get; set; } Property Value Type Description UnityEngine.Vector2 View Source Width Declaration public float Width { get; set; } Property Value Type Description Single Methods View Source Get(Single, Single) Declaration public static ExtendSize Get(float x, float y) Parameters Type Name Description Single x Single y Returns Type Description ExtendSize View Source Get(Vector2) Declaration public static ExtendSize Get(Vector2 size) Parameters Type Name Description UnityEngine.Vector2 size Returns Type Description ExtendSize Implements IExtend"
  },
  "api/ILib.ScWidgets.LayoutBase.html": {
    "href": "api/ILib.ScWidgets.LayoutBase.html",
    "title": "Class LayoutBase | Yazawa Ichio Unity Package Document",
    "keywords": "Class LayoutBase Inheritance Object LayoutBase HorizontalStretchLayout Layout SafeAreaLayout ScreenSizeLayout StretchLayout VerticalStretchLayout Implements ILayout Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public abstract class LayoutBase : ILayout Methods View Source CalcRect(Rect) Declaration public abstract Rect CalcRect(Rect viewRect) Parameters Type Name Description UnityEngine.Rect viewRect Returns Type Description UnityEngine.Rect Implements ILayout"
  },
  "api/ILib.ScWidgets.SafeAreaLayout.html": {
    "href": "api/ILib.ScWidgets.SafeAreaLayout.html",
    "title": "Class SafeAreaLayout | Yazawa Ichio Unity Package Document",
    "keywords": "Class SafeAreaLayout Inheritance Object LayoutBase SafeAreaLayout Implements ILayout Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class SafeAreaLayout : LayoutBase, ILayout Methods View Source CalcRect(Rect) Declaration public override Rect CalcRect(Rect viewRect) Parameters Type Name Description UnityEngine.Rect viewRect Returns Type Description UnityEngine.Rect Overrides LayoutBase.CalcRect(Rect) Implements ILayout"
  },
  "api/ILib.ScWidgets.ScImange.html": {
    "href": "api/ILib.ScWidgets.ScImange.html",
    "title": "Class ScImange | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScImange Inheritance Object ScWidget ScGraphic ScImange Implements IScWidget IScGraphic Inherited Members ScGraphic.Color ScGraphic.MaskColor ScGraphic.GetColor() ScGraphic.GetMaskColor() ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScImange : ScGraphic, IScWidget, IScGraphic Properties View Source Sprite Declaration public Sprite Sprite { get; set; } Property Value Type Description UnityEngine.Sprite View Source Type Declaration public Image.Type Type { get; set; } Property Value Type Description UnityEngine.UI.Image.Type Implements IScWidget IScGraphic Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScInputField.html": {
    "href": "api/ILib.ScWidgets.ScInputField.html",
    "title": "Class ScInputField | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScInputField Inheritance Object ScWidget ScFunction ScInputField Implements IScWidget IFunction Inherited Members ScFunction.Interactable ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.GetMaskColor() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScInputField : ScFunction, IScWidget, IFunction Properties View Source FontSize Declaration public int FontSize { get; set; } Property Value Type Description Int32 View Source Input Declaration public string Input { get; set; } Property Value Type Description String View Source OnChanged Declaration public Action<string> OnChanged { set; } Property Value Type Description Action < String > View Source TextAnchor Declaration public TextAnchor TextAnchor { get; set; } Property Value Type Description UnityEngine.TextAnchor Methods View Source Set(String) Declaration public void Set(string input) Parameters Type Name Description String input Implements IScWidget IFunction Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScMinimumWidget.html": {
    "href": "api/ILib.ScWidgets.ScMinimumWidget.html",
    "title": "Class ScMinimumWidget | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScMinimumWidget Inheritance Object ScMinimumWidget DebugCheckBoxItem DebugItemBase DebugItemTapHandler DebugLabelItem DebugPageArrow DebugPageItem DebugRadioButtonItem DebugToggleItem ScRatioSplitterBase Implements IScWidget Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScMinimumWidget : IScWidget Fields View Source m_Children Declaration protected List<IScWidget> m_Children Field Value Type Description List < IScWidget > View Source m_ParentRect Declaration protected Rect m_ParentRect Field Value Type Description UnityEngine.Rect View Source m_Rect Declaration protected Rect m_Rect Field Value Type Description UnityEngine.Rect Properties View Source Extend Declaration public IExtend Extend { set; } Property Value Type Description IExtend View Source Extends Declaration public IExtend[] Extends { get; set; } Property Value Type Description IExtend [] View Source IsDirty Declaration public bool IsDirty { get; protected set; } Property Value Type Description Boolean View Source Layout Declaration public ILayout Layout { protected get; set; } Property Value Type Description ILayout View Source Name Declaration public string Name { get; set; } Property Value Type Description String View Source Parent Declaration public IScWidget Parent { get; } Property Value Type Description IScWidget View Source Revision Declaration public int Revision { get; protected set; } Property Value Type Description Int32 Methods View Source CalcLayout(Rect) Declaration public virtual void CalcLayout(Rect rect) Parameters Type Name Description UnityEngine.Rect rect View Source GetChildren() Declaration public List<IScWidget> GetChildren() Returns Type Description List < IScWidget > View Source GetMaskColor() Declaration public virtual Color GetMaskColor() Returns Type Description UnityEngine.Color View Source GetRect() Declaration public Rect GetRect() Returns Type Description UnityEngine.Rect View Source GetRelativeRect() Declaration public Rect GetRelativeRect() Returns Type Description UnityEngine.Rect View Source GetViewRectWithoutClip() Declaration public Rect GetViewRectWithoutClip() Returns Type Description UnityEngine.Rect View Source IsOutsideClip() Declaration public bool IsOutsideClip() Returns Type Description Boolean View Source SetDitry() Declaration public void SetDitry() Explicit Interface Implementations View Source IScWidget.Layout Declaration ILayout IScWidget.Layout { get; set; } Returns Type Description ILayout View Source IScWidget.SetParent(IScWidget) Declaration void IScWidget.SetParent(IScWidget widget) Parameters Type Name Description IScWidget widget Implements IScWidget Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScPageView.html": {
    "href": "api/ILib.ScWidgets.ScPageView.html",
    "title": "Class ScPageView | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScPageView Inheritance Object ScPageView Implements IScWidget Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScPageView : IScWidget Fields View Source m_Children Declaration protected List<IScWidget> m_Children Field Value Type Description List < IScWidget > View Source m_Pages Declaration protected List<IScWidget> m_Pages Field Value Type Description List < IScWidget > View Source m_ParentRect Declaration protected Rect m_ParentRect Field Value Type Description UnityEngine.Rect View Source m_Rect Declaration protected Rect m_Rect Field Value Type Description UnityEngine.Rect Properties View Source Extend Declaration public IExtend Extend { set; } Property Value Type Description IExtend View Source Extends Declaration public IExtend[] Extends { get; set; } Property Value Type Description IExtend [] View Source Index Declaration public int Index { get; set; } Property Value Type Description Int32 View Source IsDirty Declaration public bool IsDirty { get; protected set; } Property Value Type Description Boolean View Source Layout Declaration public ILayout Layout { protected get; set; } Property Value Type Description ILayout View Source Name Declaration public string Name { get; set; } Property Value Type Description String View Source Pages Declaration public IScWidget[] Pages { set; } Property Value Type Description IScWidget [] View Source Parent Declaration public IScWidget Parent { get; } Property Value Type Description IScWidget View Source Revision Declaration public int Revision { get; protected set; } Property Value Type Description Int32 Methods View Source Add(IScWidget) Declaration public void Add(IScWidget widget) Parameters Type Name Description IScWidget widget View Source CalcLayout(Rect) Declaration public virtual void CalcLayout(Rect rect) Parameters Type Name Description UnityEngine.Rect rect View Source GetChildren() Declaration public List<IScWidget> GetChildren() Returns Type Description List < IScWidget > View Source GetMaskColor() Declaration public virtual Color GetMaskColor() Returns Type Description UnityEngine.Color View Source GetRect() Declaration public Rect GetRect() Returns Type Description UnityEngine.Rect View Source GetRelativeRect() Declaration public Rect GetRelativeRect() Returns Type Description UnityEngine.Rect View Source GetViewRectWithoutClip() Declaration public Rect GetViewRectWithoutClip() Returns Type Description UnityEngine.Rect View Source IsOutsideClip() Declaration public bool IsOutsideClip() Returns Type Description Boolean View Source Remove(IScWidget) Declaration public bool Remove(IScWidget widget) Parameters Type Name Description IScWidget widget Returns Type Description Boolean View Source SetDitry() Declaration public void SetDitry() Explicit Interface Implementations View Source IScWidget.Layout Declaration ILayout IScWidget.Layout { get; set; } Returns Type Description ILayout View Source IScWidget.SetParent(IScWidget) Declaration void IScWidget.SetParent(IScWidget widget) Parameters Type Name Description IScWidget widget Implements IScWidget Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.uGUIBuilder.html": {
    "href": "api/ILib.ScWidgets.uGUIBuilder.html",
    "title": "Class uGUIBuilder | Yazawa Ichio Unity Package Document",
    "keywords": "Class uGUIBuilder Inheritance Object ConductorBase < uGUIBuilder > Conductor < uGUIBuilder , uGUIBuilder.Entry > uGUIBuilder Inherited Members Conductor<uGUIBuilder, uGUIBuilder.Entry>.GetEntry() Conductor<uGUIBuilder, uGUIBuilder.Entry>.GetEntry(IScWidget) Conductor<uGUIBuilder, uGUIBuilder.Entry>.CreateEntry() Conductor<uGUIBuilder, uGUIBuilder.Entry>.RemoveUnusedEntry() ConductorBase<uGUIBuilder>.s_Handler ConductorBase<uGUIBuilder>.Root ConductorBase<uGUIBuilder>.Context ConductorBase<uGUIBuilder>.m_Action ConductorBase<uGUIBuilder>.SetContext(uGUIBuilder) ConductorBase<uGUIBuilder>.SetRootWidget(IScWidget) ConductorBase<uGUIBuilder>.CalcLayout(Rect) ConductorBase<uGUIBuilder>.Prepare(IScWidget) ConductorBase<uGUIBuilder>.Run(IScWidget) ConductorBase<uGUIBuilder>.FallbackFinish(uGUIBuilder, IScWidget) ConductorBase<uGUIBuilder>.Run<T>(Action<uGUIBuilder, IScWidget, T>) ConductorBase<uGUIBuilder>.Run<T>(Func<uGUIBuilder, IScWidget, T, IDisposable>) ConductorBase<uGUIBuilder>.Schedule(Action) ConductorBase<uGUIBuilder>.InvokeAction() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class uGUIBuilder : Conductor<uGUIBuilder, uGUIBuilder.Entry> Methods View Source Build(IScWidget) Declaration public GameObject Build(IScWidget root) Parameters Type Name Description IScWidget root Returns Type Description UnityEngine.GameObject View Source FallbackPrepare(uGUIBuilder, IScWidget) Declaration protected override void FallbackPrepare(uGUIBuilder context, IScWidget widget) Parameters Type Name Description uGUIBuilder context IScWidget widget Overrides ILib.ScWidgets.ConductorBase<ILib.ScWidgets.uGUIBuilder>.FallbackPrepare(ILib.ScWidgets.uGUIBuilder, ILib.ScWidgets.IScWidget) View Source FallbackRun(uGUIBuilder, IScWidget) Declaration protected override void FallbackRun(uGUIBuilder context, IScWidget widget) Parameters Type Name Description uGUIBuilder context IScWidget widget Overrides ILib.ScWidgets.ConductorBase<ILib.ScWidgets.uGUIBuilder>.FallbackRun(ILib.ScWidgets.uGUIBuilder, ILib.ScWidgets.IScWidget)"
  },
  "api/ILib.ScWidgets.VerticalStretchLayout.html": {
    "href": "api/ILib.ScWidgets.VerticalStretchLayout.html",
    "title": "Class VerticalStretchLayout | Yazawa Ichio Unity Package Document",
    "keywords": "Class VerticalStretchLayout Inheritance Object LayoutBase VerticalStretchLayout Implements ILayout IFixedWidth Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class VerticalStretchLayout : LayoutBase, ILayout, IFixedWidth Properties View Source Anchor Declaration public LayoutAnchor Anchor { get; set; } Property Value Type Description LayoutAnchor View Source Margin Declaration public Vector2 Margin { get; set; } Property Value Type Description UnityEngine.Vector2 View Source PosX Declaration public float PosX { get; set; } Property Value Type Description Single View Source Width Declaration public float Width { get; set; } Property Value Type Description Single Methods View Source CalcRect(Rect) Declaration public override Rect CalcRect(Rect viewRect) Parameters Type Name Description UnityEngine.Rect viewRect Returns Type Description UnityEngine.Rect Overrides LayoutBase.CalcRect(Rect) Implements ILayout IFixedWidth"
  },
  "api/ILib.ScWidgets.html": {
    "href": "api/ILib.ScWidgets.html",
    "title": "Namespace ILib.ScWidgets | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.ScWidgets Classes Conductor<T, UEntry> ConductorBase<TContext> ConductorBase<TContext>.Handler<U> ExtendHeight ExtendSize ExtendSizeExtensions ExtendWidth Extensions HorizontalStretchLayout IExtendExtensions IMGUIWidgetSkin IMGUIWidgetSkin.ContentsColor Layout LayoutBase SafeAreaLayout ScButton ScCheckBox ScClipMask ScFunction ScGraphic ScGrid ScGridBySize ScHorizontalRatioSplitter ScImange ScInputField ScMinimumWidget ScPageView ScProgressBar ScRadioButton ScRadioButton.SimpleRoot ScRadioButtonRoot ScRatioSplitterBase ScRatioSplitterBase.Entry ScreenSizeLayout ScScrollView ScSlider ScText ScTexture ScToggle ScVerticalRatioSplitter ScWidget ScWindow SkinIMGUIDrawer SkinIMGUIDrawer.Entry SkinIMGUIDrawer.IMGUIHandler<T> StretchLayout uGUIBuilder uGUIBuilder.Entry uGUIBuilder.uGUIHandler<T, UComponent> VerticalStretchLayout Interfaces ConductorBase<TContext>.IHandler IClipWidget IEntryEventCallback IExtend IFixedHeight IFixedWidth IFunction ILayout IOrderWidget IScGraphic IScrollViewLayout IScWidget ScRadioButton.IRoot ScRatioSplitterBase.IEntry Enums LayoutAnchor ScScrollView.Mode"
  },
  "api/ILib.ServInject.IInject-1.html": {
    "href": "api/ILib.ServInject.IInject-1.html",
    "title": "Interface IInject<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IInject<T> Namespace : ILib.ServInject Assembly : ILib.ServInjector.dll Syntax public interface IInject<T> where T : class Type Parameters Name Description T Methods View Source Install(T) Declaration void Install(T service) Parameters Type Name Description T service"
  },
  "api/ILib.AssetBundles.BundleContainerRef.html": {
    "href": "api/ILib.AssetBundles.BundleContainerRef.html",
    "title": "Class BundleContainerRef | Yazawa Ichio Unity Package Document",
    "keywords": "Class BundleContainerRef 指定のアセットバンドルと依存先のバンドルをを保持したコンテナへの参照です。 バンドルが不要になった際はDisposeを実行します。 すべての参照がDisposeされた際に実際にアンロードされます。Disposeを忘れた場合リークします。 Inheritance Object BundleContainerRef Implements IDisposable Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public class BundleContainerRef : IDisposable Properties View Source Disposed Declaration public bool Disposed { get; } Property Value Type Description Boolean Methods View Source Dispose() Declaration public void Dispose() View Source Finalize() Declaration protected void Finalize() View Source LoadAsset<T>(String) Declaration public T LoadAsset<T>(string assetName) where T : Object Parameters Type Name Description String assetName Returns Type Description T Type Parameters Name Description T View Source LoadAssetAsync<T>(String, Action<T>) Declaration public void LoadAssetAsync<T>(string assetName, Action<T> onSuccess) where T : Object Parameters Type Name Description String assetName Action <T> onSuccess Type Parameters Name Description T View Source LoadScene(String, LoadSceneMode) Declaration public void LoadScene(string sceneName, LoadSceneMode mode) Parameters Type Name Description String sceneName UnityEngine.SceneManagement.LoadSceneMode mode View Source LoadSceneAsync(String, LoadSceneMode, Action) Declaration public void LoadSceneAsync(string sceneName, LoadSceneMode mode, Action onSuccess) Parameters Type Name Description String sceneName UnityEngine.SceneManagement.LoadSceneMode mode Action onSuccess View Source SetUnloadAll(Boolean, Boolean) Declaration public void SetUnloadAll(bool unloadAll, bool depend = false) Parameters Type Name Description Boolean unloadAll Boolean depend Implements System.IDisposable"
  },
  "api/ILib.AssetBundles.ExManifest.StashFileScope.html": {
    "href": "api/ILib.AssetBundles.ExManifest.StashFileScope.html",
    "title": "Class StashFileScope | Yazawa Ichio Unity Package Document",
    "keywords": "Class StashFileScope Inheritance Object StashFileScope Implements IDisposable Namespace : ILib.AssetBundles.ExManifest Assembly : ILib.AssetBundles.ExManifest.Editor.dll Syntax public class StashFileScope : IDisposable Constructors View Source StashFileScope(String[], String, Boolean) Declaration public StashFileScope(string[] files, string suffix = \"_tmp\", bool deleteTmp = true) Parameters Type Name Description String [] files String suffix Boolean deleteTmp Methods View Source Dispose() Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/ILib.AssetBundles.ExManifest.Tools.IReferenceCollector.html": {
    "href": "api/ILib.AssetBundles.ExManifest.Tools.IReferenceCollector.html",
    "title": "Interface IReferenceCollector | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IReferenceCollector Namespace : ILib.AssetBundles.ExManifest.Tools Assembly : ILib.AssetBundles.ExManifest.Tools.dll Syntax public interface IReferenceCollector Methods View Source GetId(String, String) Declaration string GetId(string bundleName, string path) Parameters Type Name Description String bundleName String path Returns Type Description String"
  },
  "api/ILib.AssetBundles.FileLoadOperation.html": {
    "href": "api/ILib.AssetBundles.FileLoadOperation.html",
    "title": "Class FileLoadOperation | Yazawa Ichio Unity Package Document",
    "keywords": "Class FileLoadOperation Inheritance Object LoadOperation FileLoadOperation Implements IDisposable Inherited Members LoadOperation.Name LoadOperation.Hash LoadOperation.CRC LoadOperation.IsRunning LoadOperation.GetLoadPath() LoadOperation.Success(AssetBundle) LoadOperation.Fail(Exception) Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public class FileLoadOperation : LoadOperation, IRequest, IDisposable Methods View Source Abort(Action) Declaration protected override void Abort(Action onAbort) Parameters Type Name Description Action onAbort Overrides LoadOperation.Abort(Action) View Source Dispose() Declaration public override void Dispose() Overrides LoadOperation.Dispose() View Source SetLoadRequst(AssetBundleCreateRequest) Declaration protected void SetLoadRequst(AssetBundleCreateRequest req) Parameters Type Name Description UnityEngine.AssetBundleCreateRequest req View Source Start() Declaration protected override void Start() Overrides LoadOperation.Start() Implements System.IDisposable"
  },
  "api/ILib.AssetBundles.LoadOperation.html": {
    "href": "api/ILib.AssetBundles.LoadOperation.html",
    "title": "Class LoadOperation | Yazawa Ichio Unity Package Document",
    "keywords": "Class LoadOperation Inheritance Object LoadOperation FileLoadOperation Implements IDisposable Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public abstract class LoadOperation : IRequest, IDisposable Properties View Source CRC Declaration public uint CRC { get; } Property Value Type Description UInt32 View Source Hash Declaration public string Hash { get; } Property Value Type Description String View Source IsRunning Declaration public bool IsRunning { get; } Property Value Type Description Boolean View Source Name Declaration public string Name { get; } Property Value Type Description String Methods View Source Abort(Action) Declaration protected abstract void Abort(Action onAbort) Parameters Type Name Description Action onAbort View Source Dispose() Declaration public abstract void Dispose() View Source Fail(Exception) Declaration protected void Fail(Exception ex) Parameters Type Name Description Exception ex View Source GetLoadPath() Declaration protected string GetLoadPath() Returns Type Description String View Source Start() Declaration protected abstract void Start() View Source Success(AssetBundle) Declaration protected void Success(AssetBundle bundle) Parameters Type Name Description UnityEngine.AssetBundle bundle Implements System.IDisposable"
  },
  "api/ILib.Audio.SoundInfo.html": {
    "href": "api/ILib.Audio.SoundInfo.html",
    "title": "Class SoundInfo | Yazawa Ichio Unity Package Document",
    "keywords": "Class SoundInfo Inheritance Object SoundInfo Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class SoundInfo Fields View Source Clip 音源データです Declaration public AudioClip Clip Field Value Type Description UnityEngine.AudioClip View Source ControlId 再生管理用のIDです。 Declaration public string ControlId Field Value Type Description String View Source Pitch ピッチです。 Declaration public float Pitch Field Value Type Description Single View Source PlayControl 再生管理用のIDに対する処理です。 Declaration public IStartControl PlayControl Field Value Type Description IStartControl View Source Volume 音量です Declaration public float Volume Field Value Type Description Single"
  },
  "api/ILib.Audio.SoundManager.html": {
    "href": "api/ILib.Audio.SoundManager.html",
    "title": "Class SoundManager | Yazawa Ichio Unity Package Document",
    "keywords": "Class SoundManager ISoundPlayerとIMusicPlayerを利用した標準的なサウンドマネージャーのリファレンス実装です。 Inheritance Object SoundManager Namespace : ILib.Audio Assembly : ILib.SoundManager.dll Syntax public static class SoundManager Properties View Source Bgm BGMの再生用のコントローラーです Declaration public static BgmController Bgm { get; } Property Value Type Description BgmController View Source BgmVolume Declaration public static float BgmVolume { set; } Property Value Type Description Single View Source EnableDucking Declaration public static bool EnableDucking { set; } Property Value Type Description Boolean View Source Mixer Declaration public static AudioMixer Mixer { get; } Property Value Type Description UnityEngine.Audio.AudioMixer View Source Se SEの再生用のコントローラーです Declaration public static SeController Se { get; } Property Value Type Description SeController View Source SeVolume Declaration public static float SeVolume { set; } Property Value Type Description Single View Source Voice Voiceの再生用のコントローラーです Declaration public static VoiceController Voice { get; } Property Value Type Description VoiceController View Source VoiceVolume Declaration public static float VoiceVolume { set; } Property Value Type Description Single Methods View Source Initialize(Config) Declaration public static void Initialize(Config config) Parameters Type Name Description Config config View Source Release() Declaration public static void Release() View Source SetParamValue(String, Single, Single) Declaration public static void SetParamValue(string param, float value, float time = 0.2F) Parameters Type Name Description String param Single value Single time"
  },
  "api/ILib.Audio.SoundPlayerConfig.html": {
    "href": "api/ILib.Audio.SoundPlayerConfig.html",
    "title": "Class SoundPlayerConfig | Yazawa Ichio Unity Package Document",
    "keywords": "Class SoundPlayerConfig Inheritance Object SoundPlayerConfig Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class SoundPlayerConfig Fields View Source Cache 利用するキャッシュの機能を選択します。 Declaration public Cache Cache Field Value Type Description Cache View Source InitMaxPoolCount 音源プールの最大数です。 この上限を超えた音源がプールに返却される場合破棄されます。 Declaration public int InitMaxPoolCount Field Value Type Description Int32 View Source IsAddCacheIfLoad キャッシュになく遅延ロードを行った際に ロードしたデータをキャッシュするか？ Declaration public bool IsAddCacheIfLoad Field Value Type Description Boolean View Source IsCreateIfNotEnough 音源が不足していた際に、一時的に音源を追加作成するか？ Declaration public bool IsCreateIfNotEnough Field Value Type Description Boolean View Source LoadTimeout キャッシュにない場合に遅延ロードをした際に 再生リクエストを破棄するタイムアウト時間です。 Declaration public float LoadTimeout Field Value Type Description Single View Source PlayingList 再生リストを指定します 指定しない場合、共有再生リストを使用します。 Declaration public PlayingList PlayingList Field Value Type Description PlayingList"
  },
  "api/ILib.Audio.StartControl.Type.html": {
    "href": "api/ILib.Audio.StartControl.Type.html",
    "title": "Enum StartControl.Type | Yazawa Ichio Unity Package Document",
    "keywords": "Enum StartControl.Type Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public enum Type Fields Name Description FirstComeFirstServed LateArrivalPriority LimitCount LimitInterval None"
  },
  "api/ILib.Audio.StartControl.html": {
    "href": "api/ILib.Audio.StartControl.html",
    "title": "Class StartControl | Yazawa Ichio Unity Package Document",
    "keywords": "Class StartControl Inheritance Object StartControl Implements IStartControl Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public abstract class StartControl : IStartControl Methods View Source Create(StartControl.Type, Single, Single) Declaration public static IStartControl Create(StartControl.Type type, float prm1, float prm2) Parameters Type Name Description StartControl.Type type Single prm1 Single prm2 Returns Type Description IStartControl View Source Update(IPlayingList, SoundInfo) Declaration public abstract StartControl.Result Update(IPlayingList list, SoundInfo info) Parameters Type Name Description IPlayingList list SoundInfo info Returns Type Description StartControl.Result Implements IStartControl"
  },
  "api/ILib.Caller.Call.html": {
    "href": "api/ILib.Caller.Call.html",
    "title": "Class Call | Yazawa Ichio Unity Package Document",
    "keywords": "Class Call Inheritance Object EventCall Call Implements IDisposable IDispatcher Inherited Members EventCall.ToKey(Object) EventCall.InvokeBeforChild EventCall.Enabled EventCall.Disposed EventCall.SubCall() EventCall.Dispose() EventCall.Subscribe(Object, Action) EventCall.Path(Object, Action) EventCall.Subscribe<T>(Object, Action<T>) EventCall.Path<T>(Object, Action<T>) EventCall.Trigger<T>(Object) EventCall.Trigger(Object) EventCall.Bind(Object) EventCall.Message(Object) EventCall.Message(String) EventCall.Message<T>(Object, T) EventCall.Message<T>(String, T) EventCall.Broadcast(Object) EventCall.Broadcast(String) EventCall.Broadcast<T>(Object, T) EventCall.Broadcast<T>(String, T) Namespace : ILib.Caller Assembly : ILib.dll Syntax [Obsolete(\"EventCallerを使用してください\")] public class Call : EventCall, IDisposable, IDispatcher Implements System.IDisposable IDispatcher"
  },
  "api/ILib.Caller.Dispatcher.html": {
    "href": "api/ILib.Caller.Dispatcher.html",
    "title": "Class Dispatcher | Yazawa Ichio Unity Package Document",
    "keywords": "Class Dispatcher Inheritance Object Dispatcher Implements IDispatcher Namespace : ILib.Caller Assembly : ILib.dll Syntax public class Dispatcher : IDispatcher Constructors View Source Dispatcher(EventCall) Declaration public Dispatcher(EventCall call) Parameters Type Name Description EventCall call Methods View Source Broadcast(Object) Declaration public bool Broadcast(object key) Parameters Type Name Description Object key Returns Type Description Boolean View Source Broadcast<T>(Object, T) Declaration public bool Broadcast<T>(object key, T prm) Parameters Type Name Description Object key T prm Returns Type Description Boolean Type Parameters Name Description T View Source Message(Object) Declaration public bool Message(object key) Parameters Type Name Description Object key Returns Type Description Boolean View Source Message<T>(Object, T) Declaration public bool Message<T>(object key, T prm) Parameters Type Name Description Object key T prm Returns Type Description Boolean Type Parameters Name Description T Implements IDispatcher"
  },
  "api/ILib.CodeEmit.CodeEmitter.html": {
    "href": "api/ILib.CodeEmit.CodeEmitter.html",
    "title": "Class CodeEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class CodeEmitter Inheritance Object EmitterBase CodeEmitter Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public class CodeEmitter : EmitterBase Fields View Source Class Declaration public List<ClassEmitter> Class Field Value Type Description List < ClassEmitter > View Source Comment Declaration public string Comment Field Value Type Description String View Source Namespace Declaration public string Namespace Field Value Type Description String View Source Using Declaration public List<string> Using Field Value Type Description List < String > Methods View Source AddClass() Declaration public ClassEmitter AddClass() Returns Type Description ClassEmitter View Source AddClass(ClassEmitter) Declaration public void AddClass(ClassEmitter emitter) Parameters Type Name Description ClassEmitter emitter View Source AddUsing(String) Declaration public void AddUsing(string val) Parameters Type Name Description String val View Source DryRun() Declaration public string DryRun() Returns Type Description String View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter) View Source Run(String) Declaration public void Run(string path) Parameters Type Name Description String path"
  },
  "api/ILib.CodeEmit.CodeWriter.html": {
    "href": "api/ILib.CodeEmit.CodeWriter.html",
    "title": "Class CodeWriter | Yazawa Ichio Unity Package Document",
    "keywords": "Class CodeWriter Inheritance Object CodeWriter Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public class CodeWriter Methods View Source Append(String) Declaration public void Append(string line) Parameters Type Name Description String line View Source AppendLine(String) Declaration public void AppendLine(string line) Parameters Type Name Description String line View Source AppendTab() Declaration public void AppendTab() View Source BeginBracket() Declaration public void BeginBracket() View Source BeginIndent() Declaration public void BeginIndent() View Source Bracket(String) Declaration public IDisposable Bracket(string append = \"\") Parameters Type Name Description String append Returns Type Description IDisposable View Source Clear() Declaration public void Clear() View Source Comment(String) Declaration public void Comment(string message) Parameters Type Name Description String message View Source Comment(String[]) Declaration public void Comment(string[] messages) Parameters Type Name Description String [] messages View Source DetailSummary(String) Declaration public void DetailSummary(string message) Parameters Type Name Description String message View Source DetailSummary(String[]) Declaration public void DetailSummary(string[] messages) Parameters Type Name Description String [] messages View Source Dump(String) Declaration public void Dump(string path) Parameters Type Name Description String path View Source EndBracket(String) Declaration public void EndBracket(string append = \"\") Parameters Type Name Description String append View Source EndIndent() Declaration public void EndIndent() View Source Indent() Declaration public IDisposable Indent() Returns Type Description IDisposable View Source ShortSummary(String) Declaration public void ShortSummary(string message) Parameters Type Name Description String message View Source ShortSummary(String[]) Declaration public void ShortSummary(string[] messages) Parameters Type Name Description String [] messages View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() View Source WriteLine(String) Declaration public void WriteLine(string line) Parameters Type Name Description String line View Source WriteLine(String, Object[]) Declaration public void WriteLine(string line, params object[] args) Parameters Type Name Description String line Object [] args"
  },
  "api/ILib.CodeEmit.DelegateEmitter.html": {
    "href": "api/ILib.CodeEmit.DelegateEmitter.html",
    "title": "Class DelegateEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class DelegateEmitter Inheritance Object EmitterBase DelegateEmitter Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public class DelegateEmitter : EmitterBase Constructors View Source DelegateEmitter(Action<CodeWriter>) Declaration public DelegateEmitter(Action<CodeWriter> action) Parameters Type Name Description Action < CodeWriter > action Fields View Source Action Declaration public Action<CodeWriter> Action Field Value Type Description Action < CodeWriter > Methods View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter)"
  },
  "api/ILib.CodeEmit.EmitterBase.html": {
    "href": "api/ILib.CodeEmit.EmitterBase.html",
    "title": "Class EmitterBase | Yazawa Ichio Unity Package Document",
    "keywords": "Class EmitterBase Inheritance Object EmitterBase AppendEmitter AttributeEmitter ClassEmitter CodeEmitter DelegateEmitter FunctionEmitter MemberEmitter WriteLineEmitter Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public abstract class EmitterBase Methods View Source Emit(CodeWriter) Declaration public abstract void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer"
  },
  "api/ILib.Contents.Module.html": {
    "href": "api/ILib.Contents.Module.html",
    "title": "Class Module | Yazawa Ichio Unity Package Document",
    "keywords": "Class Module アプリケーションの共通で行いたい処理を実装します。 Typeで指定した関数しか実行されません。 Inheritance Object Module Namespace : ILib.Contents Assembly : ILib.dll Syntax public abstract class Module Properties View Source Priority Declaration public int Priority { get; set; } Property Value Type Description Int32 View Source Type Typeに登録したイベントのみ実行されます。 Declaration public abstract ModuleType Type { get; } Property Value Type Description ModuleType Methods View Source OnBoot(Content) コンテンツの初期化直後のイベントです。 コンテンツ毎に一度しか実行されません。 Declaration public virtual IEnumerator OnBoot(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnDisable(Content) コンテンツの無効化直後のイベントです。 親のコンテンツが無効になった際も実行されます。 Declaration public virtual IEnumerator OnDisable(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnEnable(Content) コンテンツの有効化直後のイベントです。 親のコンテンツが有効になった際も実行されます。 Declaration public virtual IEnumerator OnEnable(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnEndSwitch(Content, Content) コンテンツを遷移完了イベントです。 Declaration public virtual IEnumerator OnEndSwitch(Content prev, Content next) Parameters Type Name Description Content prev Content next Returns Type Description IEnumerator View Source OnPreBoot(Content) コンテンツの初期化直前のイベントです。 コンテンツ毎に一度しか実行されません。 Declaration public virtual IEnumerator OnPreBoot(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnPreDisable(Content) コンテンツの無効化直前のイベントです。 親のコンテンツが無効になった際も実行されます。 Declaration public virtual IEnumerator OnPreDisable(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnPreEnable(Content) コンテンツの有効化直前のイベントです。 親のコンテンツが有効になった際も実行されます。 Declaration public virtual IEnumerator OnPreEnable(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnPreRun(Content) コンテンツの実行直前のイベントです。 サスペンドから復帰する際にも呼ばれます。 Declaration public virtual IEnumerator OnPreRun(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnPreShutdown(Content) コンテンツの終了直前のイベントです。 コンテンツ毎に一度しか実行されません。 Declaration public virtual IEnumerator OnPreShutdown(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnPreSuspend(Content) コンテンツの停止直前のイベントです。 Declaration public virtual IEnumerator OnPreSuspend(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnPreSwitch(Content, Content) コンテンツを遷移直前のイベントです。 Declaration public virtual IEnumerator OnPreSwitch(Content prev, Content next) Parameters Type Name Description Content prev Content next Returns Type Description IEnumerator View Source OnRun(Content) コンテンツの実行時のイベントです。 サスペンドから復帰する際にも呼ばれます。 Declaration public virtual IEnumerator OnRun(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnShutdown(Content) コンテンツの終了直後のイベントです。 コンテンツ毎に一度しか実行されません。 Declaration public virtual IEnumerator OnShutdown(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnSuspend(Content) コンテンツの停止時のイベントです。 Declaration public virtual IEnumerator OnSuspend(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnSwitch(Content, Content) コンテンツを遷移イベントです。 Declaration public virtual IEnumerator OnSwitch(Content prev, Content next) Parameters Type Name Description Content prev Content next Returns Type Description IEnumerator"
  },
  "api/ILib.Contents.ModuleCollection.html": {
    "href": "api/ILib.Contents.ModuleCollection.html",
    "title": "Class ModuleCollection | Yazawa Ichio Unity Package Document",
    "keywords": "Class ModuleCollection モジュールのコレクションです。 親が指定されている場合、親のモジュールも実行されます。 Inheritance Object LockCollection < Module > ModuleCollection Implements IEnumerable < Module > IEnumerable Inherited Members LockCollection<Module>.Count LockCollection<Module>.IEnumerable<Module>.GetEnumerator() LockCollection<Module>.IEnumerable.GetEnumerator() Namespace : ILib.Contents Assembly : ILib.dll Syntax public class ModuleCollection : LockCollection<Module>, IEnumerable<Module>, IEnumerable Constructors View Source ModuleCollection() Declaration public ModuleCollection() View Source ModuleCollection(ModuleCollection) Declaration public ModuleCollection(ModuleCollection parent) Parameters Type Name Description ModuleCollection parent Properties View Source Type Declaration public ModuleType Type { get; } Property Value Type Description ModuleType Methods View Source Add(Module) Declaration public override void Add(Module child) Parameters Type Name Description Module child Overrides ILib.Contents.LockCollection<ILib.Contents.Module>.Add(ILib.Contents.Module) View Source Add<T>() Declaration public void Add<T>() where T : Module, new() Type Parameters Name Description T View Source Get<T>() Declaration public T Get<T>() where T : Module Returns Type Description T Type Parameters Name Description T View Source GetModules<T>() Declaration public IEnumerable<T> GetModules<T>() where T : Module Returns Type Description IEnumerable <T> Type Parameters Name Description T View Source OnBoot(Content) Declaration public IEnumerator OnBoot(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnDisable(Content) Declaration public IEnumerator OnDisable(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnEnable(Content) Declaration public IEnumerator OnEnable(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnEndSwitch(Content, Content) Declaration public IEnumerator OnEndSwitch(Content prev, Content next) Parameters Type Name Description Content prev Content next Returns Type Description IEnumerator View Source OnPreBoot(Content) Declaration public IEnumerator OnPreBoot(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnPreDisable(Content) Declaration public IEnumerator OnPreDisable(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnPreEnable(Content) Declaration public IEnumerator OnPreEnable(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnPreRun(Content) Declaration public IEnumerator OnPreRun(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnPreShutdown(Content) Declaration public IEnumerator OnPreShutdown(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnPreSuspend(Content) Declaration public IEnumerator OnPreSuspend(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnPreSwitch(Content, Content) Declaration public IEnumerator OnPreSwitch(Content prev, Content next) Parameters Type Name Description Content prev Content next Returns Type Description IEnumerator View Source OnRun(Content) Declaration public IEnumerator OnRun(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnShutdown(Content) Declaration public IEnumerator OnShutdown(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnSuspend(Content) Declaration public IEnumerator OnSuspend(Content content) Parameters Type Name Description Content content Returns Type Description IEnumerator View Source OnSwitch(Content, Content) Declaration public IEnumerator OnSwitch(Content prev, Content next) Parameters Type Name Description Content prev Content next Returns Type Description IEnumerator View Source Remove(Module) Declaration public override void Remove(Module child) Parameters Type Name Description Module child Overrides ILib.Contents.LockCollection<ILib.Contents.Module>.Remove(ILib.Contents.Module) View Source Remove<T>() Declaration public void Remove<T>() where T : Module Type Parameters Name Description T Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/ILib.Contents.ModuleType.html": {
    "href": "api/ILib.Contents.ModuleType.html",
    "title": "Enum ModuleType | Yazawa Ichio Unity Package Document",
    "keywords": "Enum ModuleType Namespace : ILib.Contents Assembly : ILib.dll Syntax [Flags] public enum ModuleType Fields Name Description Boot コンテンツの初期化直後のイベントです。 コンテンツ毎に一度しか実行されません。 Disable コンテンツの無効化直後のイベントです。 親のコンテンツが無効になった際も実行されます。 Enable コンテンツの有効化直後のイベントです。 親のコンテンツが有効になった際も実行されます。 EndSwitch コンテンツを遷移完了イベントです。 None PreBoot コンテンツの初期化直前のイベントです。 コンテンツ毎に一度しか実行されません。 PreDisable コンテンツの無効化直前のイベントです。 親のコンテンツが無効になった際も実行されます。 PreEnable コンテンツの有効化直前のイベントです。 親のコンテンツが有効になった際も実行されます。 PreRun コンテンツの実行直前のイベントです。 サスペンドから復帰する際にも呼ばれます。 PreShutdown コンテンツの終了直前のイベントです。 コンテンツ毎に一度しか実行されません。 PreSuspend コンテンツの停止直前のイベントです。 PreSwitch コンテンツを遷移直前のイベントです。 Run コンテンツの実行時のイベントです。 サスペンドから復帰する際にも呼ばれます。 Shutdown コンテンツの終了直後のイベントです。 コンテンツ毎に一度しか実行されません。 Suspend コンテンツの停止時のイベントです。 Switch コンテンツを遷移イベントです。"
  },
  "api/ILib.Contents.SimpleParam.html": {
    "href": "api/ILib.Contents.SimpleParam.html",
    "title": "Class SimpleParam | Yazawa Ichio Unity Package Document",
    "keywords": "Class SimpleParam Inheritance Object SimpleParam Implements IContentParam Namespace : ILib.Contents Assembly : ILib.dll Syntax public class SimpleParam : IContentParam Constructors View Source SimpleParam(Type, Object) Declaration public SimpleParam(Type type, object value) Parameters Type Name Description Type type Object value Properties View Source ContentType Declaration public Type ContentType { get; } Property Value Type Description Type View Source Value Declaration public object Value { get; } Property Value Type Description Object Methods View Source Create<T>(Object) Declaration public static SimpleParam Create<T>(object value = null) Parameters Type Name Description Object value Returns Type Description SimpleParam Type Parameters Name Description T View Source GetContentType() Declaration public Type GetContentType() Returns Type Description Type Implements IContentParam"
  },
  "api/ILib.Debugs.ToggleContent-1.html": {
    "href": "api/ILib.Debugs.ToggleContent-1.html",
    "title": "Class ToggleContent<TContext> | Yazawa Ichio Unity Package Document",
    "keywords": "Class ToggleContent<TContext> Inheritance Object Content <TContext, DebugToggleItem > ToggleContent<TContext> Inherited Members Content<TContext, DebugToggleItem>.Menu Content<TContext, DebugToggleItem>.Context Content<TContext, DebugToggleItem>.Priority Content<TContext, DebugToggleItem>.Path Content<TContext, DebugToggleItem>.Category Content<TContext, DebugToggleItem>.CategoryPriority Content<TContext, DebugToggleItem>.Widget Content<TContext, DebugToggleItem>.Register(DebugToggleItem) Content<TContext, DebugToggleItem>.Update() Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class ToggleContent<TContext> : Content<TContext, DebugToggleItem>, IContent where TContext : class Type Parameters Name Description TContext Properties View Source Label Declaration protected abstract string Label { get; } Property Value Type Description String View Source Value Declaration protected abstract bool Value { get; set; } Property Value Type Description Boolean Methods View Source Register(DebugToggleItem) Declaration protected override sealed void Register(DebugToggleItem widget) Parameters Type Name Description DebugToggleItem widget Overrides ILib.Debugs.Content<TContext, ILib.Debugs.Widgets.DebugToggleItem>.Register(ILib.Debugs.Widgets.DebugToggleItem)"
  },
  "api/ILib.Debugs.Widgets.CategoryTab.html": {
    "href": "api/ILib.Debugs.Widgets.CategoryTab.html",
    "title": "Class CategoryTab | Yazawa Ichio Unity Package Document",
    "keywords": "Class CategoryTab Inheritance Object ScWidget CategoryTab Implements IScWidget Inherited Members ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.GetMaskColor() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class CategoryTab : ScWidget, IScWidget Constructors View Source CategoryTab(String, ScDebugMenu, Single) Declaration public CategoryTab(string name, ScDebugMenu menu, float height) Parameters Type Name Description String name ScDebugMenu menu Single height Properties View Source OnSelect Declaration public Action<string> OnSelect { set; } Property Value Type Description Action < String > Methods View Source SetSelect(Boolean) Declaration public void SetSelect(bool select) Parameters Type Name Description Boolean select Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.DebugButtonItem.html": {
    "href": "api/ILib.Debugs.Widgets.DebugButtonItem.html",
    "title": "Class DebugButtonItem | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugButtonItem Inheritance Object ScMinimumWidget DebugItemBase DebugButtonItem Implements IScWidget Inherited Members DebugItemBase.Label DebugItemBase.LabelWeight DebugItemBase.DefContentsWeight DebugItemBase.ContentsWeight ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugButtonItem : DebugItemBase, IScWidget Properties View Source ButtonText Declaration public string ButtonText { get; set; } Property Value Type Description String View Source OnClick Declaration public Action OnClick { set; } Property Value Type Description Action Methods View Source Create() Declaration protected override IScWidget Create() Returns Type Description IScWidget Overrides DebugItemBase.Create() Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.DebugCheckBoxItem.html": {
    "href": "api/ILib.Debugs.Widgets.DebugCheckBoxItem.html",
    "title": "Class DebugCheckBoxItem | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugCheckBoxItem Inheritance Object ScMinimumWidget DebugCheckBoxItem Implements IScWidget Inherited Members ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugCheckBoxItem : ScMinimumWidget, IScWidget Constructors View Source DebugCheckBoxItem() Declaration public DebugCheckBoxItem() Properties View Source Label Declaration public string Label { get; set; } Property Value Type Description String View Source OnChange Declaration public Action<bool> OnChange { set; } Property Value Type Description Action < Boolean > View Source Value Declaration public bool Value { get; set; } Property Value Type Description Boolean Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.DebugSliderItemBase.html": {
    "href": "api/ILib.Debugs.Widgets.DebugSliderItemBase.html",
    "title": "Class DebugSliderItemBase | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugSliderItemBase Inheritance Object ScMinimumWidget DebugItemBase DebugSliderItemBase DebugIntSliderItem DebugSliderItem Implements IScWidget Inherited Members DebugItemBase.Label DebugItemBase.LabelWeight DebugItemBase.ContentsWeight ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugSliderItemBase : DebugItemBase, IScWidget Fields View Source m_ContentsSplitter Declaration protected ScHorizontalRatioSplitter m_ContentsSplitter Field Value Type Description ScHorizontalRatioSplitter View Source m_InputField Declaration protected ScInputField m_InputField Field Value Type Description ScInputField View Source m_Slider Declaration protected ScSlider m_Slider Field Value Type Description ScSlider Properties View Source DefContentsWeight Declaration protected override int DefContentsWeight { get; } Property Value Type Description Int32 Overrides DebugItemBase.DefContentsWeight View Source InputWeight Declaration public int InputWeight { get; set; } Property Value Type Description Int32 View Source SliderWeight Declaration public int SliderWeight { get; set; } Property Value Type Description Int32 Methods View Source Create() Declaration protected override IScWidget Create() Returns Type Description IScWidget Overrides DebugItemBase.Create() View Source OnChange(Single) Declaration protected virtual void OnChange(float val) Parameters Type Name Description Single val View Source OnChange(String) Declaration protected virtual void OnChange(string val) Parameters Type Name Description String val Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.DebugToggleItem.html": {
    "href": "api/ILib.Debugs.Widgets.DebugToggleItem.html",
    "title": "Class DebugToggleItem | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugToggleItem Inheritance Object ScMinimumWidget DebugToggleItem Implements IScWidget Inherited Members ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugToggleItem : ScMinimumWidget, IScWidget Constructors View Source DebugToggleItem() Declaration public DebugToggleItem() Properties View Source Label Declaration public string Label { get; set; } Property Value Type Description String View Source OnChange Declaration public Action<bool> OnChange { set; } Property Value Type Description Action < Boolean > View Source Value Declaration public bool Value { get; set; } Property Value Type Description Boolean Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.DebugValueFieldItem-1.html": {
    "href": "api/ILib.Debugs.Widgets.DebugValueFieldItem-1.html",
    "title": "Class DebugValueFieldItem<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugValueFieldItem<T> Inheritance Object ScMinimumWidget DebugItemBase DebugInputFieldItemBase DebugValueFieldItem<T> DebugFloatFieldItem DebugIntFieldItem Implements IScWidget Inherited Members DebugInputFieldItemBase.m_InputField DebugInputFieldItemBase.DefContentsWeight DebugInputFieldItemBase.Create() DebugInputFieldItemBase.OnChangedInput(String) DebugItemBase.Label DebugItemBase.LabelWeight DebugItemBase.ContentsWeight ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class DebugValueFieldItem<T> : DebugInputFieldItemBase, IScWidget Type Parameters Name Description T Fields View Source m_Value Declaration protected T m_Value Field Value Type Description T Properties View Source OnChanged Declaration public Action<T> OnChanged { protected get; set; } Property Value Type Description Action <T> View Source Value Declaration public T Value { get; set; } Property Value Type Description T Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.HeaderButton.html": {
    "href": "api/ILib.Debugs.Widgets.HeaderButton.html",
    "title": "Class HeaderButton | Yazawa Ichio Unity Package Document",
    "keywords": "Class HeaderButton Inheritance Object ScWidget ScGraphic ScText HeaderButton Implements IScWidget IScGraphic IFunction Inherited Members ScText.Font ScText.Text ScText.FontSize ScText.TextAnchor ScText.TextClipping ScText.FontStyle ScGraphic.Color ScGraphic.MaskColor ScGraphic.GetColor() ScGraphic.GetMaskColor() ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class HeaderButton : ScText, IScWidget, IScGraphic, IFunction Properties View Source Interactable Declaration public bool Interactable { get; set; } Property Value Type Description Boolean View Source OnClick Declaration public Action OnClick { set; } Property Value Type Description Action Methods View Source Invoke() Declaration public void Invoke() Implements IScWidget IScGraphic IFunction"
  },
  "api/ILib.MVVM.ActiveBind.html": {
    "href": "api/ILib.MVVM.ActiveBind.html",
    "title": "Class ActiveBind | Yazawa Ichio Unity Package Document",
    "keywords": "Class ActiveBind Inheritance Object LightBind < Boolean , UnityEngine.GameObject > ActiveBind Implements ILightBind IBindable < Boolean > IBindable IViewElement Inherited Members LightBind<Boolean, GameObject>.Path LightBind<Boolean, GameObject>.IsActive LightBind<Boolean, GameObject>.m_Target LightBind<Boolean, GameObject>.m_Hash LightBind<Boolean, GameObject>.Value LightBind<Boolean, GameObject>.BindType() LightBind<Boolean, GameObject>.Set(Boolean, Boolean) LightBind<Boolean, GameObject>.Init(Object, String) LightBind<Boolean, GameObject>.OnInit() LightBind<Boolean, GameObject>.IBindable.Bind(IBindingProperty) LightBind<Boolean, GameObject>.IBindable<Boolean>.Bind(IBindingProperty<Boolean>) LightBind<Boolean, GameObject>.IBindable.Unbind(IBindingProperty) LightBind<Boolean, GameObject>.OnUnbind() LightBind<Boolean, GameObject>.IBindable.TryUpdate() LightBind<Boolean, GameObject>.UpdateValue(Boolean) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class ActiveBind : LightBind<bool, GameObject>, ILightBind, IBindable<bool>, IBindable, IViewElement Methods View Source UpdateValue(Boolean) Declaration protected override void UpdateValue(bool val) Parameters Type Name Description Boolean val Overrides ILib.MVVM.LightBind<System.Boolean, UnityEngine.GameObject>.UpdateValue(System.Boolean) Implements ILightBind IBindable<T> IBindable IViewElement"
  },
  "api/ILib.MVVM.AssignableBindBase-1.html": {
    "href": "api/ILib.MVVM.AssignableBindBase-1.html",
    "title": "Class AssignableBindBase<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class AssignableBindBase<T> Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour AssignableBindBase<T> CollectionBind Implements IBindable <T> IBindable IViewElement Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public abstract class AssignableBindBase<T> : MonoBehaviour, IBindable<T>, IBindable, IViewElement where T : class Type Parameters Name Description T Fields View Source m_Hash Declaration protected int m_Hash Field Value Type Description Int32 Properties View Source IsActive Declaration public virtual bool IsActive { get; } Property Value Type Description Boolean View Source Path Declaration public string Path { get; } Property Value Type Description String Methods View Source BindType() Declaration public Type BindType() Returns Type Description Type View Source OnUnbind() Declaration protected virtual void OnUnbind() View Source Set(T, Boolean) Declaration protected void Set(T val, bool update = false) Parameters Type Name Description T val Boolean update View Source UpdateValue(T) Declaration protected abstract void UpdateValue(T val) Parameters Type Name Description T val Explicit Interface Implementations View Source IBindable.Bind(IBindingProperty) Declaration void IBindable.Bind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop View Source IBindable.TryUpdate() Declaration void IBindable.TryUpdate() View Source IBindable.Unbind(IBindingProperty) Declaration void IBindable.Unbind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop View Source IBindable<T>.Bind(IBindingProperty<T>) Declaration void IBindable<T>.Bind(IBindingProperty<T> prop) Parameters Type Name Description IBindingProperty <T> prop Implements IBindable<T> IBindable IViewElement Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.MVVM.Behavior.html": {
    "href": "api/ILib.MVVM.Behavior.html",
    "title": "Class Behavior | Yazawa Ichio Unity Package Document",
    "keywords": "Class Behavior Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour Behavior Implements IBehavior IMultipleBindable IViewElement Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public abstract class Behavior : MonoBehaviour, IBehavior, IMultipleBindable, IViewElement Properties View Source MessangerPath Declaration public string MessangerPath { get; } Property Value Type Description String Methods View Source GetBindables() Declaration protected virtual IEnumerable<IBindable> GetBindables() Returns Type Description IEnumerable < IBindable > View Source OnDestroyImpl() Declaration protected virtual void OnDestroyImpl() View Source OnPrepare() Declaration protected virtual void OnPrepare() View Source Register<T>(String, Action<T>) Declaration protected void Register<T>(string name, Action<T> action) Parameters Type Name Description String name Action <T> action Type Parameters Name Description T Explicit Interface Implementations View Source IBehavior.Messanger Declaration IMessenger IBehavior.Messanger { get; } Returns Type Description IMessenger View Source IMultipleBindable.GetBindables() Declaration IEnumerable<IBindable> IMultipleBindable.GetBindables() Returns Type Description IEnumerable < IBindable > View Source IMultipleBindable.OnPrepare() Declaration void IMultipleBindable.OnPrepare() Implements IBehavior IMultipleBindable IViewElement Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.MVVM.Behaviors.PropertyChangedNotificator-1.html": {
    "href": "api/ILib.MVVM.Behaviors.PropertyChangedNotificator-1.html",
    "title": "Class PropertyChangedNotificator<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class PropertyChangedNotificator<T> Inheritance Object PropertyChangedNotificator<T> Implements IBindable <T> IBindable IViewElement Namespace : ILib.MVVM.Behaviors Assembly : IchioLib.MVVM.dll Syntax public class PropertyChangedNotificator<T> : IBindable<T>, IBindable, IViewElement Type Parameters Name Description T Constructors View Source PropertyChangedNotificator(String, Func<Boolean>) Declaration public PropertyChangedNotificator(string path, Func<bool> activeCheck) Parameters Type Name Description String path Func < Boolean > activeCheck View Source PropertyChangedNotificator(String, Object) Declaration public PropertyChangedNotificator(string path, object owner) Parameters Type Name Description String path Object owner View Source PropertyChangedNotificator(String, Object) Declaration public PropertyChangedNotificator(string path, Object owner) Parameters Type Name Description String path UnityEngine.Object owner Fields View Source m_Hash Declaration public int m_Hash Field Value Type Description Int32 Properties View Source IsActive Declaration public bool IsActive { get; } Property Value Type Description Boolean View Source Path Declaration public string Path { get; } Property Value Type Description String Methods View Source BindType() Declaration public Type BindType() Returns Type Description Type Events View Source OnChanged Declaration public event Action<T> OnChanged Event Type Type Description Action <T> Explicit Interface Implementations View Source IBindable.Bind(IBindingProperty) Declaration void IBindable.Bind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop View Source IBindable.TryUpdate() Declaration void IBindable.TryUpdate() View Source IBindable.Unbind(IBindingProperty) Declaration void IBindable.Unbind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop View Source IBindable<T>.Bind(IBindingProperty<T>) Declaration void IBindable<T>.Bind(IBindingProperty<T> prop) Parameters Type Name Description IBindingProperty <T> prop Implements IBindable<T> IBindable IViewElement"
  },
  "api/ILib.MVVM.InputFieldArgument.html": {
    "href": "api/ILib.MVVM.InputFieldArgument.html",
    "title": "Class InputFieldArgument | Yazawa Ichio Unity Package Document",
    "keywords": "Class InputFieldArgument Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour EventArgument EventArgument < String > InputFieldArgument Inherited Members EventArgument<String>.GetEventType() EventArgument<String>.Do(String, IViewEventHandler) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class InputFieldArgument : EventArgument<string> Methods View Source GetValue() Declaration public override string GetValue() Returns Type Description String Overrides ILib.MVVM.EventArgument<System.String>.GetValue() Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.MVVM.InputFieldBind.html": {
    "href": "api/ILib.MVVM.InputFieldBind.html",
    "title": "Class InputFieldBind | Yazawa Ichio Unity Package Document",
    "keywords": "Class InputFieldBind Inheritance Object LightBind < String , UnityEngine.UI.InputField > LightEventBind < String , UnityEngine.UI.InputField > InputFieldBind Implements ILightBind IBindable < String > IBindable IViewEvent IViewElement Inherited Members LightEventBind<String, InputField>.IViewEvent.Name LightEventBind<String, InputField>.IViewEvent.Bind(IViewEventHandler) LightEventBind<String, InputField>.EventType() LightEventBind<String, InputField>.Event() LightEventBind<String, InputField>.Event(String) LightEventBind<String, InputField>.Event<T>(String, T) LightEventBind<String, InputField>.Event(EventArgument) LightBind<String, InputField>.Path LightBind<String, InputField>.IsActive LightBind<String, InputField>.m_Target LightBind<String, InputField>.m_Hash LightBind<String, InputField>.Value LightBind<String, InputField>.BindType() LightBind<String, InputField>.Set(String, Boolean) LightBind<String, InputField>.Init(Object, String) LightBind<String, InputField>.OnInit() LightBind<String, InputField>.IBindable.Bind(IBindingProperty) LightBind<String, InputField>.IBindable<String>.Bind(IBindingProperty<String>) LightBind<String, InputField>.IBindable.Unbind(IBindingProperty) LightBind<String, InputField>.OnUnbind() LightBind<String, InputField>.IBindable.TryUpdate() LightBind<String, InputField>.UpdateValue(String) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class InputFieldBind : LightEventBind<string, InputField>, ILightBind, IBindable<string>, IBindable, IViewEvent, IViewElement Methods View Source OnInit() Declaration protected override void OnInit() Overrides ILib.MVVM.LightBind<System.String, UnityEngine.UI.InputField>.OnInit() View Source UpdateValue(String) Declaration protected override void UpdateValue(string val) Parameters Type Name Description String val Overrides ILib.MVVM.LightBind<System.String, UnityEngine.UI.InputField>.UpdateValue(System.String) Implements ILightBind IBindable<T> IBindable IViewEvent IViewElement"
  },
  "api/ILib.MVVM.IntEventButtonBind.html": {
    "href": "api/ILib.MVVM.IntEventButtonBind.html",
    "title": "Class IntEventButtonBind | Yazawa Ichio Unity Package Document",
    "keywords": "Class IntEventButtonBind Inheritance Object LightBind < Int32 , UnityEngine.UI.Button > LightEventBind < Int32 , UnityEngine.UI.Button > IntEventButtonBind Implements ILightBind IBindable < Int32 > IBindable IViewEvent IViewElement Inherited Members LightEventBind<Int32, Button>.IViewEvent.Name LightEventBind<Int32, Button>.IViewEvent.Bind(IViewEventHandler) LightEventBind<Int32, Button>.EventType() LightEventBind<Int32, Button>.Event() LightEventBind<Int32, Button>.Event(String) LightEventBind<Int32, Button>.Event(Int32) LightEventBind<Int32, Button>.Event<T>(String, T) LightEventBind<Int32, Button>.Event(EventArgument) LightBind<Int32, Button>.Path LightBind<Int32, Button>.IsActive LightBind<Int32, Button>.m_Target LightBind<Int32, Button>.m_Hash LightBind<Int32, Button>.Value LightBind<Int32, Button>.BindType() LightBind<Int32, Button>.Set(Int32, Boolean) LightBind<Int32, Button>.Init(Object, String) LightBind<Int32, Button>.OnInit() LightBind<Int32, Button>.IBindable.Bind(IBindingProperty) LightBind<Int32, Button>.IBindable<Int32>.Bind(IBindingProperty<Int32>) LightBind<Int32, Button>.IBindable.Unbind(IBindingProperty) LightBind<Int32, Button>.OnUnbind() LightBind<Int32, Button>.IBindable.TryUpdate() LightBind<Int32, Button>.UpdateValue(Int32) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class IntEventButtonBind : LightEventBind<int, Button>, ILightBind, IBindable<int>, IBindable, IViewEvent, IViewElement Methods View Source OnInit() Declaration protected override void OnInit() Overrides ILib.MVVM.LightBind<System.Int32, UnityEngine.UI.Button>.OnInit() View Source UpdateValue(Int32) Declaration protected override void UpdateValue(int val) Parameters Type Name Description Int32 val Overrides ILib.MVVM.LightBind<System.Int32, UnityEngine.UI.Button>.UpdateValue(System.Int32) Implements ILightBind IBindable<T> IBindable IViewEvent IViewElement"
  },
  "api/ILib.MVVM.IView.html": {
    "href": "api/ILib.MVVM.IView.html",
    "title": "Interface IView | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IView Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IView Properties View Source DataContext Declaration IViewModel DataContext { get; } Property Value Type Description IViewModel View Source Elements Declaration IViewElement[] Elements { get; } Property Value Type Description IViewElement [] Methods View Source Attach(IViewModel) Declaration void Attach(IViewModel vm) Parameters Type Name Description IViewModel vm View Source Prepare(Boolean) Declaration void Prepare(bool force = false) Parameters Type Name Description Boolean force"
  },
  "api/ILib.AssetBundles.ExManifest.DataEntry.html": {
    "href": "api/ILib.AssetBundles.ExManifest.DataEntry.html",
    "title": "Class DataEntry | Yazawa Ichio Unity Package Document",
    "keywords": "Class DataEntry Inheritance Object DataEntry Namespace : ILib.AssetBundles.ExManifest Assembly : ILib.AssetBundles.ExManifest.Editor.dll Syntax public class DataEntry Fields View Source Deps Declaration public string[] Deps Field Value Type Description String [] View Source Info Declaration public ABInfo Info Field Value Type Description ABInfo View Source Reference Declaration public List<RefInfo> Reference Field Value Type Description List < RefInfo > View Source Tags Declaration public string[] Tags Field Value Type Description String []"
  },
  "api/ILib.AssetBundles.Logger.Log.html": {
    "href": "api/ILib.AssetBundles.Logger.Log.html",
    "title": "Class Log | Yazawa Ichio Unity Package Document",
    "keywords": "Class Log Inheritance Object Log Namespace : ILib.AssetBundles.Logger Assembly : ILib.AssetBundles.dll Syntax public static class Log Properties View Source Enabled Declaration public static bool Enabled { get; set; } Property Value Type Description Boolean View Source EnabledAssert Declaration public static bool EnabledAssert { get; set; } Property Value Type Description Boolean View Source Level Declaration public static Log.LogLevel Level { get; set; } Property Value Type Description Log.LogLevel View Source Logger Declaration public static ILogger Logger { get; set; } Property Value Type Description UnityEngine.ILogger"
  },
  "api/ILib.AssetBundles.NameSetter.ImportContext-1.html": {
    "href": "api/ILib.AssetBundles.NameSetter.ImportContext-1.html",
    "title": "Class ImportContext<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class ImportContext<T> Inheritance Object SetterContext ImportContext<T> PathToNameContext Implements IImportContext Inherited Members SetterContext.Description SetterContext.Directory SetterContext.SetDirectory(String) SetterContext.OnGUI() Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax public abstract class ImportContext<T> : SetterContext, IImportContext where T : ImportContext<T> Type Parameters Name Description T Methods View Source Import(String, AssetImporter, IEnumerable<T>) Declaration protected abstract void Import(string path, AssetImporter importer, IEnumerable<T> children) Parameters Type Name Description String path UnityEditor.AssetImporter importer IEnumerable <T> children Explicit Interface Implementations View Source IImportContext.Import(String, AssetImporter) Declaration void IImportContext.Import(string path, AssetImporter importer) Parameters Type Name Description String path UnityEditor.AssetImporter importer Implements IImportContext"
  },
  "api/ILib.AssetBundles.NameSetter.SetterAssetCache.html": {
    "href": "api/ILib.AssetBundles.NameSetter.SetterAssetCache.html",
    "title": "Class SetterAssetCache | Yazawa Ichio Unity Package Document",
    "keywords": "Class SetterAssetCache Inheritance Object SetterAssetCache Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax public static class SetterAssetCache Methods View Source GetAllContexts() Declaration public static IEnumerable<SetterContext> GetAllContexts() Returns Type Description IEnumerable < SetterContext > View Source GetRootSetters(String) Declaration public static IEnumerable<SetterContext> GetRootSetters(string path) Parameters Type Name Description String path Returns Type Description IEnumerable < SetterContext > View Source GetRootSetters<T>(String) Declaration public static IEnumerable<T> GetRootSetters<T>(string path) Parameters Type Name Description String path Returns Type Description IEnumerable <T> Type Parameters Name Description T View Source GetSetterAssets(String) Declaration public static IEnumerable<SetterAsset> GetSetterAssets(string path) Parameters Type Name Description String path Returns Type Description IEnumerable < SetterAsset > View Source GetSetters<T>(String) Declaration public static IEnumerable<T> GetSetters<T>(string path) where T : SetterContext Parameters Type Name Description String path Returns Type Description IEnumerable <T> Type Parameters Name Description T View Source SetDirty() Declaration public static void SetDirty()"
  },
  "api/ILib.AssetBundles.UnloadMode.html": {
    "href": "api/ILib.AssetBundles.UnloadMode.html",
    "title": "Enum UnloadMode | Yazawa Ichio Unity Package Document",
    "keywords": "Enum UnloadMode Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public enum UnloadMode Fields Name Description Auto Immediately Manual"
  },
  "api/ILib.Audio.GeneralMusicProvider-1.html": {
    "href": "api/ILib.Audio.GeneralMusicProvider-1.html",
    "title": "Class GeneralMusicProvider<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class GeneralMusicProvider<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します Inheritance Object MusicProviderBase <T> GeneralMusicProvider<T> Implements IMusicProvider <T> Inherited Members MusicProviderBase<T>.PathConversion MusicProviderBase<T>.GroupSelector MusicProviderBase<T>.CustomLoad MusicProviderBase<T>.SetGroup(AudioMixerGroup) MusicProviderBase<T>.SetPathFormat(String) MusicProviderBase<T>.GetPath(T) MusicProviderBase<T>.IMusicProvider<T>.Load(T, Action<MusicInfo, Exception>) MusicProviderBase<T>.Load(T, Action<MusicInfo, Exception>) Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class GeneralMusicProvider<T> : MusicProviderBase<T>, IMusicProvider<T> Type Parameters Name Description T Constructors View Source GeneralMusicProvider() Declaration public GeneralMusicProvider() View Source GeneralMusicProvider(AudioMixerGroup, String) Declaration public GeneralMusicProvider(AudioMixerGroup group, string format) Parameters Type Name Description UnityEngine.Audio.AudioMixerGroup group String format Methods View Source GetString(T) Declaration protected override string GetString(T prm) Parameters Type Name Description T prm Returns Type Description String Overrides ILib.Audio.MusicProviderBase<T>.GetString(T) Implements IMusicProvider<T> Extension Methods IMusicProviderEx.Create<T>(IMusicProvider<T>, MusicPlayerConfig)"
  },
  "api/ILib.Audio.IMusicPlayer.html": {
    "href": "api/ILib.Audio.IMusicPlayer.html",
    "title": "Interface IMusicPlayer | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IMusicPlayer Inherited Members IMusicPlayer<String>.IsCacheInfoInStack IMusicPlayer<String>.MaxPoolCount IMusicPlayer<String>.Current IMusicPlayer<String>.Change(String, Single, Boolean) IMusicPlayer<String>.Change(String, MusicPlayConfig, Boolean) IMusicPlayer<String>.Push(String, Single) IMusicPlayer<String>.Push(String, MusicPlayConfig) IMusicPlayer<String>.Pop(Single, Boolean) IMusicPlayer<String>.Pop(MusicPlayConfig, Boolean) IMusicPlayer<String>.Stop(Single) IMusicPlayer<String>.Pause(Single) IMusicPlayer<String>.Resume(Single) IMusicPlayer<String>.ClearStack() IDisposable.Dispose() Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public interface IMusicPlayer : IMusicPlayer<string>, IDisposable"
  },
  "api/ILib.Audio.IntKeySoundProvider-1.html": {
    "href": "api/ILib.Audio.IntKeySoundProvider-1.html",
    "title": "Class IntKeySoundProvider<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class IntKeySoundProvider<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します Inheritance Object SoundProviderBase <T> IntKeySoundProvider<T> Implements ISoundProvider <T> Inherited Members SoundProviderBase<T>.MixerGroup SoundProviderBase<T>.PathConversion SoundProviderBase<T>.CustomLoad SoundProviderBase<T>.SetPathFormat(String) SoundProviderBase<T>.GetPath(T) SoundProviderBase<T>.ISoundProvider<T>.Load(T, Action<SoundInfo, Exception>) SoundProviderBase<T>.Load(T, Action<SoundInfo, Exception>) Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class IntKeySoundProvider<T> : SoundProviderBase<T>, ISoundProvider<T> where T : struct, IConvertible Type Parameters Name Description T Constructors View Source IntKeySoundProvider() Declaration public IntKeySoundProvider() View Source IntKeySoundProvider(AudioMixerGroup, String) Declaration public IntKeySoundProvider(AudioMixerGroup group, string format) Parameters Type Name Description UnityEngine.Audio.AudioMixerGroup group String format Methods View Source GetCacheKey(T) Declaration public override string GetCacheKey(T prm) Parameters Type Name Description T prm Returns Type Description String Overrides ILib.Audio.SoundProviderBase<T>.GetCacheKey(T) Implements ISoundProvider<T> Extension Methods ISoundProviderEx.Create<T>(ISoundProvider<T>, SoundPlayerConfig)"
  },
  "api/ILib.Audio.NotPoolException.html": {
    "href": "api/ILib.Audio.NotPoolException.html",
    "title": "Class NotPoolException | Yazawa Ichio Unity Package Document",
    "keywords": "Class NotPoolException Inheritance Object Exception NotPoolException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class NotPoolException : Exception, ISerializable Constructors View Source NotPoolException(String) Declaration public NotPoolException(string msg) Parameters Type Name Description String msg Implements System.Runtime.Serialization.ISerializable"
  },
  "api/ILib.Audio.PlayingList.html": {
    "href": "api/ILib.Audio.PlayingList.html",
    "title": "Class PlayingList | Yazawa Ichio Unity Package Document",
    "keywords": "Class PlayingList Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour PlayingList Implements IPlayingList IDisposable Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax [AddComponentMenu(\"\")] public class PlayingList : MonoBehaviour, IPlayingList, IDisposable Properties View Source MaxPoolCount Declaration public int MaxPoolCount { get; set; } Property Value Type Description Int32 Methods View Source Dispose() Declaration public void Dispose() View Source ReservePool(Int32) Declaration public void ReservePool(int count = -1) Parameters Type Name Description Int32 count Explicit Interface Implementations View Source IPlayingList.GetCount(String) Declaration int IPlayingList.GetCount(string controlId) Parameters Type Name Description String controlId Returns Type Description Int32 View Source IPlayingList.GetLastPlayStartTime(String) Declaration DateTime IPlayingList.GetLastPlayStartTime(string controlId) Parameters Type Name Description String controlId Returns Type Description DateTime View Source IPlayingList.StopAll(String) Declaration void IPlayingList.StopAll(string controlId) Parameters Type Name Description String controlId Implements IPlayingList System.IDisposable Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.CL.html": {
    "href": "api/ILib.CL.html",
    "title": "Namespace ILib.CL | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.CL Classes ArgAttribute ArgBinder ArgEntry CLParser"
  },
  "api/ILib.CodeEmit.AppendEmitter.html": {
    "href": "api/ILib.CodeEmit.AppendEmitter.html",
    "title": "Class AppendEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class AppendEmitter Inheritance Object EmitterBase AppendEmitter Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public class AppendEmitter : EmitterBase Constructors View Source AppendEmitter(String) Declaration public AppendEmitter(string message) Parameters Type Name Description String message Fields View Source Message Declaration public string Message Field Value Type Description String Methods View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter)"
  },
  "api/ILib.CodeEmit.ShortPropertyEmitter.html": {
    "href": "api/ILib.CodeEmit.ShortPropertyEmitter.html",
    "title": "Class ShortPropertyEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class ShortPropertyEmitter Inheritance Object EmitterBase MemberEmitter ShortPropertyEmitter Inherited Members MemberEmitter.Summary MemberEmitter.Accessibility MemberEmitter.Attributes MemberEmitter.AddAttribute(String) MemberEmitter.Emit(CodeWriter) Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public class ShortPropertyEmitter : MemberEmitter Fields View Source InitValue Declaration public string InitValue Field Value Type Description String View Source Name Declaration public string Name Field Value Type Description String View Source SettterProtected Declaration public bool SettterProtected Field Value Type Description Boolean View Source Type Declaration public string Type Field Value Type Description String Methods View Source EmitMember(CodeWriter) Declaration public override void EmitMember(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides MemberEmitter.EmitMember(CodeWriter)"
  },
  "api/ILib.CodeEmit.WriteLineEmitter.html": {
    "href": "api/ILib.CodeEmit.WriteLineEmitter.html",
    "title": "Class WriteLineEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class WriteLineEmitter Inheritance Object EmitterBase WriteLineEmitter Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public class WriteLineEmitter : EmitterBase Constructors View Source WriteLineEmitter(String) Declaration public WriteLineEmitter(string message) Parameters Type Name Description String message Fields View Source Message Declaration public string Message Field Value Type Description String Methods View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter)"
  },
  "api/ILib.FSM.Provider.html": {
    "href": "api/ILib.FSM.Provider.html",
    "title": "Namespace ILib.FSM.Provider | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.FSM.Provider Classes DirectTransitionAttribute 自身への直接遷移イベントを登録します。 InitStateAttribute 初期ステートに設定します。 StateMachineProvider<T> T型を継承するステートをノードとするステートマシーンを自動生成します。 初期ステートと遷移条件は属性によって決定されます。 小規模な重要ではないステートマシーンに利用してください。 TransitionToAttribute 自身からの遷移イベントを登録します。"
  },
  "api/ILib.FSM.State.html": {
    "href": "api/ILib.FSM.State.html",
    "title": "Class State | Yazawa Ichio Unity Package Document",
    "keywords": "Class State ステートの抽象クラスです 継承先で実装してください。 Inheritance Object State Namespace : ILib.FSM Assembly : ILib.dll Syntax public abstract class State Properties View Source Owner Declaration protected object Owner { get; } Property Value Type Description Object View Source Param Declaration protected object Param { get; } Property Value Type Description Object Methods View Source OnEnter() Declaration protected virtual void OnEnter() View Source OnExit() Declaration protected virtual void OnExit() View Source OnUpdate() Declaration protected virtual void OnUpdate() View Source Transition(Int32, Object) 遷移イベントを発行します 発火したステートと現在が違う場合無効になります。 Declaration protected bool Transition(int eventId, object prm = null) Parameters Type Name Description Int32 eventId Object prm Returns Type Description Boolean View Source Transition<TEnum>(TEnum, Object) 遷移イベントを発行します 発火したステートと現在が違う場合無効になります。 Enum暗黙的にintに置き換えられます。 Declaration protected bool Transition<TEnum>(TEnum eventId, object prm = null) where TEnum : struct, IConvertible Parameters Type Name Description TEnum eventId Object prm Returns Type Description Boolean Type Parameters Name Description TEnum"
  },
  "api/ILib.MVVM.CodeEmit.CodeWriter.html": {
    "href": "api/ILib.MVVM.CodeEmit.CodeWriter.html",
    "title": "Class CodeWriter | Yazawa Ichio Unity Package Document",
    "keywords": "Class CodeWriter Inheritance Object CodeWriter Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class CodeWriter Methods View Source Append(String) Declaration public void Append(string line) Parameters Type Name Description String line View Source AppendLine(String) Declaration public void AppendLine(string line) Parameters Type Name Description String line View Source AppendTab() Declaration public void AppendTab() View Source BeginBracket() Declaration public void BeginBracket() View Source BeginIndent() Declaration public void BeginIndent() View Source Bracket(String) Declaration public IDisposable Bracket(string append = \"\") Parameters Type Name Description String append Returns Type Description IDisposable View Source Clear() Declaration public void Clear() View Source Comment(String) Declaration public void Comment(string message) Parameters Type Name Description String message View Source Comment(String[]) Declaration public void Comment(string[] messages) Parameters Type Name Description String [] messages View Source DetailSummary(String) Declaration public void DetailSummary(string message) Parameters Type Name Description String message View Source DetailSummary(String[]) Declaration public void DetailSummary(string[] messages) Parameters Type Name Description String [] messages View Source Dump(String) Declaration public void Dump(string path) Parameters Type Name Description String path View Source EndBracket(String) Declaration public void EndBracket(string append = \"\") Parameters Type Name Description String append View Source EndIndent() Declaration public void EndIndent() View Source Indent() Declaration public IDisposable Indent() Returns Type Description IDisposable View Source ShortSummary(String) Declaration public void ShortSummary(string message) Parameters Type Name Description String message View Source ShortSummary(String[]) Declaration public void ShortSummary(string[] messages) Parameters Type Name Description String [] messages View Source ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() View Source WriteLine(String) Declaration public void WriteLine(string line) Parameters Type Name Description String line View Source WriteLine(String, Object[]) Declaration public void WriteLine(string line, params object[] args) Parameters Type Name Description String line Object [] args"
  },
  "api/ILib.MVVM.CodeEmit.DelegateEmitter.html": {
    "href": "api/ILib.MVVM.CodeEmit.DelegateEmitter.html",
    "title": "Class DelegateEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class DelegateEmitter Inheritance Object EmitterBase DelegateEmitter Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class DelegateEmitter : EmitterBase Constructors View Source DelegateEmitter(Action<CodeWriter>) Declaration public DelegateEmitter(Action<CodeWriter> action) Parameters Type Name Description Action < CodeWriter > action Fields View Source Action Declaration public Action<CodeWriter> Action Field Value Type Description Action < CodeWriter > Methods View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter)"
  },
  "api/ILib.MVVM.CodeEmit.WriteLineEmitter.html": {
    "href": "api/ILib.MVVM.CodeEmit.WriteLineEmitter.html",
    "title": "Class WriteLineEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class WriteLineEmitter Inheritance Object EmitterBase WriteLineEmitter Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class WriteLineEmitter : EmitterBase Constructors View Source WriteLineEmitter(String) Declaration public WriteLineEmitter(string message) Parameters Type Name Description String message Fields View Source Message Declaration public string Message Field Value Type Description String Methods View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter)"
  },
  "api/ILib.MVVM.CodeEmit.html": {
    "href": "api/ILib.MVVM.CodeEmit.html",
    "title": "Namespace ILib.MVVM.CodeEmit | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.MVVM.CodeEmit Classes AppendEmitter AttributeEmitter ClassEmitter CodeEmitter CodeWriter DelegateEmitter EmitterBase FieldEmitter FunctionEmitter FunctionEmitter.Argument LazyPropertyEmitter MemberEmitter PropertyEmitter ShortPropertyEmitter WriteLineEmitter"
  },
  "api/ILib.MVVM.Drawer.html": {
    "href": "api/ILib.MVVM.Drawer.html",
    "title": "Namespace ILib.MVVM.Drawer | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.MVVM.Drawer Classes BindingViewer ComponentElementViewer LightBindHolderDrawer LightBindUtil LightBindViewer ViewDrawer Interfaces IElementViewer"
  },
  "api/ILib.MVVM.EventArgument-1.html": {
    "href": "api/ILib.MVVM.EventArgument-1.html",
    "title": "Class EventArgument<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class EventArgument<T> Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour EventArgument EventArgument<T> ComponentEnabledArgument GraphicColorArgument InputFieldArgument TextArgument Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public abstract class EventArgument<T> : EventArgument Type Parameters Name Description T Methods View Source Do(String, IViewEventHandler) Declaration public override void Do(string name, IViewEventHandler handler) Parameters Type Name Description String name IViewEventHandler handler Overrides EventArgument.Do(String, IViewEventHandler) View Source GetEventType() Declaration public override Type GetEventType() Returns Type Description Type Overrides EventArgument.GetEventType() View Source GetValue() Declaration public abstract T GetValue() Returns Type Description T Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.MVVM.IBinding.html": {
    "href": "api/ILib.MVVM.IBinding.html",
    "title": "Interface IBinding | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IBinding Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IBinding : IViewElement Methods View Source Bind(IViewEventHandler) Declaration void Bind(IViewEventHandler handler) Parameters Type Name Description IViewEventHandler handler View Source Bind(String, IBindingProperty) Declaration void Bind(string path, IBindingProperty prop) Parameters Type Name Description String path IBindingProperty prop View Source TryUpdate() Declaration void TryUpdate() View Source Unbind(IViewEventHandler) Declaration void Unbind(IViewEventHandler handler) Parameters Type Name Description IViewEventHandler handler View Source Unbind(String, IBindingProperty) Declaration void Unbind(string path, IBindingProperty prop) Parameters Type Name Description String path IBindingProperty prop"
  },
  "api/ILib.MVVM.IBindingEvent.html": {
    "href": "api/ILib.MVVM.IBindingEvent.html",
    "title": "Interface IBindingEvent | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IBindingEvent Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IBindingEvent Properties View Source Name Declaration string Name { get; } Property Value Type Description String"
  },
  "api/ILib.MVVM.IViewEventHandler.html": {
    "href": "api/ILib.MVVM.IViewEventHandler.html",
    "title": "Interface IViewEventHandler | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IViewEventHandler Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IViewEventHandler : IViewElement Methods View Source OnViewEvent(String) Declaration void OnViewEvent(string name) Parameters Type Name Description String name View Source OnViewEvent<T>(String, T) Declaration void OnViewEvent<T>(string name, T args) Parameters Type Name Description String name T args Type Parameters Name Description T"
  },
  "api/ILib.MVVM.IViewModel.html": {
    "href": "api/ILib.MVVM.IViewModel.html",
    "title": "Interface IViewModel | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IViewModel Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IViewModel Methods View Source Get<T>(String) Declaration T Get<T>(string path) Parameters Type Name Description String path Returns Type Description T Type Parameters Name Description T View Source Register(IBinding) Declaration void Register(IBinding binding) Parameters Type Name Description IBinding binding View Source Set<T>(String, T) Declaration void Set<T>(string path, T val) Parameters Type Name Description String path T val Type Parameters Name Description T View Source SetAllDirty() Declaration void SetAllDirty() View Source SetDirty(String) Declaration void SetDirty(string path) Parameters Type Name Description String path View Source SubscribeChanged<T>(String, Action<T>) Declaration void SubscribeChanged<T>(string path, Action<T> notify) Parameters Type Name Description String path Action <T> notify Type Parameters Name Description T View Source SubscribeViewEvent(String, Action) Declaration void SubscribeViewEvent(string name, Action onViewEvent) Parameters Type Name Description String name Action onViewEvent View Source SubscribeViewEvent<T>(String, Action<T>) Declaration void SubscribeViewEvent<T>(string name, Action<T> onViewEvent) Parameters Type Name Description String name Action <T> onViewEvent Type Parameters Name Description T View Source Unregister(IBinding) Declaration void Unregister(IBinding binding) Parameters Type Name Description IBinding binding View Source UnsubscribeChanged<T>(String, Action<T>) Declaration void UnsubscribeChanged<T>(string path, Action<T> notify) Parameters Type Name Description String path Action <T> notify Type Parameters Name Description T View Source UnsubscribeViewEvent(String, Action) Declaration void UnsubscribeViewEvent(string name, Action onViewEvent) Parameters Type Name Description String name Action onViewEvent View Source UnsubscribeViewEvent<T>(String, Action<T>) Declaration void UnsubscribeViewEvent<T>(string name, Action<T> onViewEvent) Parameters Type Name Description String name Action <T> onViewEvent Type Parameters Name Description T Extension Methods EventExtensions.SubscribeViewEvent<T>(IViewModel, T, Action) EventExtensions.UnsubscribeViewEvent<T>(IViewModel, T, Action) EventExtensions.SubscribeViewEvent<T, U>(IViewModel, T, Action<U>) EventExtensions.UnsubscribeViewEvent<T, U>(IViewModel, T, Action<U>)"
  },
  "api/ILib.MVVM.LightBind-2.html": {
    "href": "api/ILib.MVVM.LightBind-2.html",
    "title": "Class LightBind<TValue, UTarget> | Yazawa Ichio Unity Package Document",
    "keywords": "Class LightBind<TValue, UTarget> Inheritance Object LightBind<TValue, UTarget> ActiveBind ButtonToggleBind ColorBind ImageBind LightEventBind<TValue, UTarget> PostionBind TextBind ToggleBind Implements ILightBind IBindable <TValue> IBindable IViewElement Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public abstract class LightBind<TValue, UTarget> : ILightBind, IBindable<TValue>, IBindable, IViewElement where UTarget : Object Type Parameters Name Description TValue UTarget Fields View Source m_Hash Declaration protected int m_Hash Field Value Type Description Int32 View Source m_Target Declaration protected UTarget m_Target Field Value Type Description UTarget Properties View Source IsActive Declaration public virtual bool IsActive { get; } Property Value Type Description Boolean View Source Path Declaration public string Path { get; } Property Value Type Description String View Source Value Declaration protected TValue Value { get; } Property Value Type Description TValue Methods View Source BindType() Declaration public Type BindType() Returns Type Description Type View Source Init(Object, String) Declaration public void Init(Object obj, string path) Parameters Type Name Description UnityEngine.Object obj String path View Source OnInit() Declaration protected virtual void OnInit() View Source OnUnbind() Declaration protected virtual void OnUnbind() View Source Set(TValue, Boolean) Declaration protected void Set(TValue val, bool update = false) Parameters Type Name Description TValue val Boolean update View Source UpdateValue(TValue) Declaration protected abstract void UpdateValue(TValue val) Parameters Type Name Description TValue val Explicit Interface Implementations View Source IBindable.Bind(IBindingProperty) Declaration void IBindable.Bind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop View Source IBindable.TryUpdate() Declaration void IBindable.TryUpdate() View Source IBindable.Unbind(IBindingProperty) Declaration void IBindable.Unbind(IBindingProperty prop) Parameters Type Name Description IBindingProperty prop View Source IBindable<TValue>.Bind(IBindingProperty<TValue>) Declaration void IBindable<TValue>.Bind(IBindingProperty<TValue> prop) Parameters Type Name Description IBindingProperty <TValue> prop Implements ILightBind IBindable<T> IBindable IViewElement"
  },
  "api/ILib.MVVM.LightBindEntry.html": {
    "href": "api/ILib.MVVM.LightBindEntry.html",
    "title": "Class LightBindEntry | Yazawa Ichio Unity Package Document",
    "keywords": "Class LightBindEntry Inheritance Object LightBindEntry Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class LightBindEntry Fields View Source Type Declaration public Type Type Field Value Type Description Type View Source TypeName Declaration public string TypeName Field Value Type Description String Methods View Source GetEntry(String) Declaration public static LightBindEntry GetEntry(string key) Parameters Type Name Description String key Returns Type Description LightBindEntry View Source GetKey(Type) Declaration public static string GetKey(Type type) Parameters Type Name Description Type type Returns Type Description String View Source Instantiate(String) Declaration public static ILightBind Instantiate(string key) Parameters Type Name Description String key Returns Type Description ILightBind"
  },
  "api/ILib.IHasTriggerAction-1.html": {
    "href": "api/ILib.IHasTriggerAction-1.html",
    "title": "Interface IHasTriggerAction<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IHasTriggerAction<T> トリガーに対するアクションを保持することを保証するクラスです。 拡張メソッドでアクションと同等の機能を提供します。 Inherited Members IDisposable.Dispose() Namespace : ILib Assembly : ILib.dll Syntax public interface IHasTriggerAction<T> : IHasTriggerAction, IDisposable Type Parameters Name Description T Properties View Source Action Declaration ITriggerAction<T> Action { get; } Property Value Type Description ITriggerAction <T> Extension Methods TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T, Exception>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Trigger<T>) TriggerExtensions.AddFail<T>(IHasTriggerAction<T>, Action<Exception>) TriggerExtensions.Wait<T>(IHasTriggerAction<T>) TriggerExtensions.Select<T, U>(IHasTriggerAction<T>, Func<T, U>, Boolean) TriggerExtensions.Where<T>(IHasTriggerAction<T>, Func<T, Boolean>) TriggerExtensions.Any<T>(IHasTriggerAction<T>) TriggerExtensions.Then<T, U>(IHasTriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) TriggerExtensions.Then<T>(IHasTriggerAction<T>, Func<T, ITriggerAction>, Boolean) TriggerExtensions.Time<T>(IHasTriggerAction<T>, Single) TriggerExtensions.Realtime<T>(IHasTriggerAction<T>, Single) TriggerExtensions.GetAwaiter(IHasTriggerAction) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>, CancellationToken)"
  },
  "api/ILib.IHasTriggerAction.html": {
    "href": "api/ILib.IHasTriggerAction.html",
    "title": "Interface IHasTriggerAction | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IHasTriggerAction Inherited Members IDisposable.Dispose() Namespace : ILib Assembly : ILib.dll Syntax public interface IHasTriggerAction : IDisposable Properties View Source Action Declaration ITriggerAction Action { get; } Property Value Type Description ITriggerAction Extension Methods TriggerExtensions.GetAwaiter(IHasTriggerAction)"
  },
  "api/ILib.IRoutine-1.html": {
    "href": "api/ILib.IRoutine-1.html",
    "title": "Interface IRoutine<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IRoutine<T> Inherited Members IHasTriggerAction<T>.Action IRoutine.IsRunning IRoutine.Restartable IRoutine.Start() IRoutine.Cancel() IDisposable.Dispose() Namespace : ILib Assembly : ILib.dll Syntax public interface IRoutine<T> : IHasTriggerAction<T>, IHasTriggerAction, IRoutine, IDisposable Type Parameters Name Description T Extension Methods TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Action<T, Exception>) TriggerExtensions.Add<T>(IHasTriggerAction<T>, Trigger<T>) TriggerExtensions.AddFail<T>(IHasTriggerAction<T>, Action<Exception>) TriggerExtensions.Wait<T>(IHasTriggerAction<T>) TriggerExtensions.Select<T, U>(IHasTriggerAction<T>, Func<T, U>, Boolean) TriggerExtensions.Where<T>(IHasTriggerAction<T>, Func<T, Boolean>) TriggerExtensions.Any<T>(IHasTriggerAction<T>) TriggerExtensions.Then<T, U>(IHasTriggerAction<T>, Func<T, ITriggerAction<U>>, Boolean) TriggerExtensions.Then<T>(IHasTriggerAction<T>, Func<T, ITriggerAction>, Boolean) TriggerExtensions.Time<T>(IHasTriggerAction<T>, Single) TriggerExtensions.Realtime<T>(IHasTriggerAction<T>, Single) TriggerExtensions.GetAwaiter(IHasTriggerAction) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>) TriggerExtensions.GetAwaiter<T>(IHasTriggerAction<T>, CancellationToken)"
  },
  "api/ILib.MVVM.CodeEmit.AppendEmitter.html": {
    "href": "api/ILib.MVVM.CodeEmit.AppendEmitter.html",
    "title": "Class AppendEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class AppendEmitter Inheritance Object EmitterBase AppendEmitter Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class AppendEmitter : EmitterBase Constructors View Source AppendEmitter(String) Declaration public AppendEmitter(string message) Parameters Type Name Description String message Fields View Source Message Declaration public string Message Field Value Type Description String Methods View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter)"
  },
  "api/ILib.MVVM.CodeEmit.AttributeEmitter.html": {
    "href": "api/ILib.MVVM.CodeEmit.AttributeEmitter.html",
    "title": "Class AttributeEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class AttributeEmitter Inheritance Object EmitterBase AttributeEmitter Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class AttributeEmitter : EmitterBase Fields View Source Args Declaration public List<string> Args Field Value Type Description List < String > View Source Name Declaration public string Name Field Value Type Description String Methods View Source AddArg(String) Declaration public void AddArg(string val) Parameters Type Name Description String val View Source AddProp(String, String) Declaration public void AddProp(string prop, string value) Parameters Type Name Description String prop String value View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter)"
  },
  "api/ILib.MVVM.CodeEmit.ClassEmitter.html": {
    "href": "api/ILib.MVVM.CodeEmit.ClassEmitter.html",
    "title": "Class ClassEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class ClassEmitter Inheritance Object EmitterBase ClassEmitter Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class ClassEmitter : EmitterBase Fields View Source Accessibility Declaration public string Accessibility Field Value Type Description String View Source Attributes Declaration public List<AttributeEmitter> Attributes Field Value Type Description List < AttributeEmitter > View Source Extends Declaration public List<string> Extends Field Value Type Description List < String > View Source Functions Declaration public List<FunctionEmitter> Functions Field Value Type Description List < FunctionEmitter > View Source Members Declaration public List<MemberEmitter> Members Field Value Type Description List < MemberEmitter > View Source Name Declaration public string Name Field Value Type Description String View Source Summary Declaration public string Summary Field Value Type Description String Methods View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter)"
  },
  "api/ILib.MVVM.CodeEmit.CodeEmitter.html": {
    "href": "api/ILib.MVVM.CodeEmit.CodeEmitter.html",
    "title": "Class CodeEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class CodeEmitter Inheritance Object EmitterBase CodeEmitter Namespace : ILib.MVVM.CodeEmit Assembly : ILib.MVVM.StaticViewModel.dll Syntax public class CodeEmitter : EmitterBase Fields View Source Class Declaration public List<ClassEmitter> Class Field Value Type Description List < ClassEmitter > View Source Comment Declaration public string Comment Field Value Type Description String View Source Namespace Declaration public string Namespace Field Value Type Description String View Source Using Declaration public List<string> Using Field Value Type Description List < String > Methods View Source AddClass() Declaration public ClassEmitter AddClass() Returns Type Description ClassEmitter View Source AddClass(ClassEmitter) Declaration public void AddClass(ClassEmitter emitter) Parameters Type Name Description ClassEmitter emitter View Source AddUsing(String) Declaration public void AddUsing(string val) Parameters Type Name Description String val View Source DryRun() Declaration public string DryRun() Returns Type Description String View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter) View Source Run(String) Declaration public void Run(string path) Parameters Type Name Description String path"
  },
  "api/ILib.MVVM.CollectionBind.html": {
    "href": "api/ILib.MVVM.CollectionBind.html",
    "title": "Class CollectionBind | Yazawa Ichio Unity Package Document",
    "keywords": "Class CollectionBind Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour AssignableBindBase < IList < IViewModel >> CollectionBind Implements IBindable < IList < IViewModel >> IBindable IViewElement Inherited Members AssignableBindBase<IList<IViewModel>>.Path AssignableBindBase<IList<IViewModel>>.IsActive AssignableBindBase<IList<IViewModel>>.m_Hash AssignableBindBase<IList<IViewModel>>.Set(IList<IViewModel>, Boolean) AssignableBindBase<IList<IViewModel>>.BindType() AssignableBindBase<IList<IViewModel>>.IBindable.Bind(IBindingProperty) AssignableBindBase<IList<IViewModel>>.IBindable<IList<IViewModel>>.Bind(IBindingProperty<IList<IViewModel>>) AssignableBindBase<IList<IViewModel>>.IBindable.Unbind(IBindingProperty) AssignableBindBase<IList<IViewModel>>.OnUnbind() AssignableBindBase<IList<IViewModel>>.IBindable.TryUpdate() Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class CollectionBind : AssignableBindBase<IList<IViewModel>>, IBindable<IList<IViewModel>>, IBindable, IViewElement Methods View Source Bind(Int32, GameObject, IViewModel) Declaration protected virtual void Bind(int index, GameObject instance, IViewModel vm) Parameters Type Name Description Int32 index UnityEngine.GameObject instance IViewModel vm View Source UpdateValue(IList<IViewModel>) Declaration protected override void UpdateValue(IList<IViewModel> val) Parameters Type Name Description IList < IViewModel > val Overrides ILib.MVVM.AssignableBindBase<System.Collections.Generic.IList<ILib.MVVM.IViewModel>>.UpdateValue(System.Collections.Generic.IList<ILib.MVVM.IViewModel>) Implements IBindable<T> IBindable IViewElement Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.MVVM.ColorBind.html": {
    "href": "api/ILib.MVVM.ColorBind.html",
    "title": "Class ColorBind | Yazawa Ichio Unity Package Document",
    "keywords": "Class ColorBind Inheritance Object LightBind < UnityEngine.Color , UnityEngine.UI.Graphic > ColorBind Implements ILightBind IBindable < UnityEngine.Color > IBindable IViewElement Inherited Members LightBind<Color, Graphic>.Path LightBind<Color, Graphic>.IsActive LightBind<Color, Graphic>.m_Target LightBind<Color, Graphic>.m_Hash LightBind<Color, Graphic>.Value LightBind<Color, Graphic>.BindType() LightBind<Color, Graphic>.Set(Color, Boolean) LightBind<Color, Graphic>.Init(Object, String) LightBind<Color, Graphic>.OnInit() LightBind<Color, Graphic>.IBindable.Bind(IBindingProperty) LightBind<Color, Graphic>.IBindable<Color>.Bind(IBindingProperty<Color>) LightBind<Color, Graphic>.IBindable.Unbind(IBindingProperty) LightBind<Color, Graphic>.OnUnbind() LightBind<Color, Graphic>.IBindable.TryUpdate() LightBind<Color, Graphic>.UpdateValue(Color) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class ColorBind : LightBind<Color, Graphic>, ILightBind, IBindable<Color>, IBindable, IViewElement Methods View Source UpdateValue(Color) Declaration protected override void UpdateValue(Color val) Parameters Type Name Description UnityEngine.Color val Overrides ILib.MVVM.LightBind<UnityEngine.Color, UnityEngine.UI.Graphic>.UpdateValue(UnityEngine.Color) Implements ILightBind IBindable<T> IBindable IViewElement"
  },
  "api/ILib.MVVM.ComponentEnabledArgument.html": {
    "href": "api/ILib.MVVM.ComponentEnabledArgument.html",
    "title": "Class ComponentEnabledArgument | Yazawa Ichio Unity Package Document",
    "keywords": "Class ComponentEnabledArgument Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour EventArgument EventArgument < Boolean > ComponentEnabledArgument Inherited Members EventArgument<Boolean>.GetEventType() EventArgument<Boolean>.Do(String, IViewEventHandler) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class ComponentEnabledArgument : EventArgument<bool> Methods View Source GetValue() Declaration public override bool GetValue() Returns Type Description Boolean Overrides ILib.MVVM.EventArgument<System.Boolean>.GetValue() Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.MVVM.DelegateCommand-1.html": {
    "href": "api/ILib.MVVM.DelegateCommand-1.html",
    "title": "Class DelegateCommand<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class DelegateCommand<T> Inheritance Object DelegateCommand<T> Implements ICommand <T> Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class DelegateCommand<T> : ICommand<T> Type Parameters Name Description T Constructors View Source DelegateCommand(Action<T>, Func<Boolean>) Declaration public DelegateCommand(Action<T> action, Func<bool> canExecute = null) Parameters Type Name Description Action <T> action Func < Boolean > canExecute Properties View Source CanExecute Declaration public bool CanExecute { get; } Property Value Type Description Boolean Explicit Interface Implementations View Source ICommand<T>.Execute(T) Declaration void ICommand<T>.Execute(T args) Parameters Type Name Description T args Implements ICommand<T>"
  },
  "api/ILib.MVVM.ILightBind.html": {
    "href": "api/ILib.MVVM.ILightBind.html",
    "title": "Interface ILightBind | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ILightBind Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface ILightBind Methods View Source Init(Object, String) Declaration void Init(Object obj, string path) Parameters Type Name Description UnityEngine.Object obj String path"
  },
  "api/ILib.MVVM.ImageBind.html": {
    "href": "api/ILib.MVVM.ImageBind.html",
    "title": "Class ImageBind | Yazawa Ichio Unity Package Document",
    "keywords": "Class ImageBind Inheritance Object LightBind < UnityEngine.Sprite , UnityEngine.UI.Image > ImageBind Implements ILightBind IBindable < UnityEngine.Sprite > IBindable IViewElement Inherited Members LightBind<Sprite, Image>.Path LightBind<Sprite, Image>.IsActive LightBind<Sprite, Image>.m_Target LightBind<Sprite, Image>.m_Hash LightBind<Sprite, Image>.Value LightBind<Sprite, Image>.BindType() LightBind<Sprite, Image>.Set(Sprite, Boolean) LightBind<Sprite, Image>.Init(Object, String) LightBind<Sprite, Image>.OnInit() LightBind<Sprite, Image>.IBindable.Bind(IBindingProperty) LightBind<Sprite, Image>.IBindable<Sprite>.Bind(IBindingProperty<Sprite>) LightBind<Sprite, Image>.IBindable.Unbind(IBindingProperty) LightBind<Sprite, Image>.OnUnbind() LightBind<Sprite, Image>.IBindable.TryUpdate() LightBind<Sprite, Image>.UpdateValue(Sprite) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class ImageBind : LightBind<Sprite, Image>, ILightBind, IBindable<Sprite>, IBindable, IViewElement Methods View Source UpdateValue(Sprite) Declaration protected override void UpdateValue(Sprite val) Parameters Type Name Description UnityEngine.Sprite val Overrides ILib.MVVM.LightBind<UnityEngine.Sprite, UnityEngine.UI.Image>.UpdateValue(UnityEngine.Sprite) Implements ILightBind IBindable<T> IBindable IViewElement"
  },
  "api/ILib.MVVM.IMessenger.html": {
    "href": "api/ILib.MVVM.IMessenger.html",
    "title": "Interface IMessenger | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IMessenger Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IMessenger Methods View Source Refresh() Declaration void Refresh() View Source Register<T>(Object, String, Action<T>) Declaration void Register<T>(object recipient, string name, Action<T> action) Parameters Type Name Description Object recipient String name Action <T> action Type Parameters Name Description T View Source Send<T>(String, T) Declaration void Send<T>(string name, T message) Parameters Type Name Description String name T message Type Parameters Name Description T View Source Unregister(Object) Declaration void Unregister(object recipient) Parameters Type Name Description Object recipient View Source Unregister<T>(Object, String, Action<T>) Declaration void Unregister<T>(object recipient, string name, Action<T> action) Parameters Type Name Description Object recipient String name Action <T> action Type Parameters Name Description T"
  },
  "api/ILib.MVVM.IMultipleBindable.html": {
    "href": "api/ILib.MVVM.IMultipleBindable.html",
    "title": "Interface IMultipleBindable | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IMultipleBindable Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public interface IMultipleBindable : IViewElement Methods View Source GetBindables() Declaration IEnumerable<IBindable> GetBindables() Returns Type Description IEnumerable < IBindable > View Source OnPrepare() Declaration void OnPrepare()"
  },
  "api/ILib.MVVM.TextArgument.html": {
    "href": "api/ILib.MVVM.TextArgument.html",
    "title": "Class TextArgument | Yazawa Ichio Unity Package Document",
    "keywords": "Class TextArgument Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour EventArgument EventArgument < String > TextArgument Inherited Members EventArgument<String>.GetEventType() EventArgument<String>.Do(String, IViewEventHandler) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class TextArgument : EventArgument<string> Methods View Source GetValue() Declaration public override string GetValue() Returns Type Description String Overrides ILib.MVVM.EventArgument<System.String>.GetValue() Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.MVVM.TextBind.html": {
    "href": "api/ILib.MVVM.TextBind.html",
    "title": "Class TextBind | Yazawa Ichio Unity Package Document",
    "keywords": "Class TextBind Inheritance Object LightBind < String , UnityEngine.UI.Text > TextBind Implements ILightBind IBindable < String > IBindable IViewElement Inherited Members LightBind<String, Text>.Path LightBind<String, Text>.IsActive LightBind<String, Text>.m_Target LightBind<String, Text>.m_Hash LightBind<String, Text>.Value LightBind<String, Text>.BindType() LightBind<String, Text>.Set(String, Boolean) LightBind<String, Text>.Init(Object, String) LightBind<String, Text>.OnInit() LightBind<String, Text>.IBindable.Bind(IBindingProperty) LightBind<String, Text>.IBindable<String>.Bind(IBindingProperty<String>) LightBind<String, Text>.IBindable.Unbind(IBindingProperty) LightBind<String, Text>.OnUnbind() LightBind<String, Text>.IBindable.TryUpdate() LightBind<String, Text>.UpdateValue(String) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class TextBind : LightBind<string, Text>, ILightBind, IBindable<string>, IBindable, IViewElement Methods View Source UpdateValue(String) Declaration protected override void UpdateValue(string val) Parameters Type Name Description String val Overrides ILib.MVVM.LightBind<System.String, UnityEngine.UI.Text>.UpdateValue(System.String) Implements ILightBind IBindable<T> IBindable IViewElement"
  },
  "api/ILib.MVVM.ToggleBind.html": {
    "href": "api/ILib.MVVM.ToggleBind.html",
    "title": "Class ToggleBind | Yazawa Ichio Unity Package Document",
    "keywords": "Class ToggleBind Inheritance Object LightBind < Boolean , UnityEngine.UI.Toggle > ToggleBind Implements ILightBind IBindable < Boolean > IBindable IViewElement Inherited Members LightBind<Boolean, Toggle>.Path LightBind<Boolean, Toggle>.IsActive LightBind<Boolean, Toggle>.m_Target LightBind<Boolean, Toggle>.m_Hash LightBind<Boolean, Toggle>.Value LightBind<Boolean, Toggle>.BindType() LightBind<Boolean, Toggle>.Set(Boolean, Boolean) LightBind<Boolean, Toggle>.Init(Object, String) LightBind<Boolean, Toggle>.OnInit() LightBind<Boolean, Toggle>.IBindable.Bind(IBindingProperty) LightBind<Boolean, Toggle>.IBindable<Boolean>.Bind(IBindingProperty<Boolean>) LightBind<Boolean, Toggle>.IBindable.Unbind(IBindingProperty) LightBind<Boolean, Toggle>.OnUnbind() LightBind<Boolean, Toggle>.IBindable.TryUpdate() LightBind<Boolean, Toggle>.UpdateValue(Boolean) Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class ToggleBind : LightBind<bool, Toggle>, ILightBind, IBindable<bool>, IBindable, IViewElement Methods View Source OnInit() Declaration protected override void OnInit() Overrides ILib.MVVM.LightBind<System.Boolean, UnityEngine.UI.Toggle>.OnInit() View Source UpdateValue(Boolean) Declaration protected override void UpdateValue(bool val) Parameters Type Name Description Boolean val Overrides ILib.MVVM.LightBind<System.Boolean, UnityEngine.UI.Toggle>.UpdateValue(System.Boolean) Implements ILightBind IBindable<T> IBindable IViewElement"
  },
  "api/ILib.MVVM.View.html": {
    "href": "api/ILib.MVVM.View.html",
    "title": "Class View | Yazawa Ichio Unity Package Document",
    "keywords": "Class View Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour View BindableView Implements IView Namespace : ILib.MVVM Assembly : IchioLib.MVVM.dll Syntax public class View : MonoBehaviour, IView Properties View Source DataContext Declaration public IViewModel DataContext { get; } Property Value Type Description IViewModel Methods View Source Attach(IViewModel) Declaration public void Attach(IViewModel vm) Parameters Type Name Description IViewModel vm View Source Attach<T>(Action<T>) Declaration public T Attach<T>(Action<T> action) where T : IViewModel, new() Parameters Type Name Description Action <T> action Returns Type Description T Type Parameters Name Description T View Source Prepare(Boolean) Declaration public void Prepare(bool force = false) Parameters Type Name Description Boolean force View Source TryUpdate() Declaration public void TryUpdate() Explicit Interface Implementations View Source IView.Elements Declaration IViewElement[] IView.Elements { get; } Returns Type Description IViewElement [] Implements IView Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.ScWidgets.Conductor-2.html": {
    "href": "api/ILib.ScWidgets.Conductor-2.html",
    "title": "Class Conductor<T, UEntry> | Yazawa Ichio Unity Package Document",
    "keywords": "Class Conductor<T, UEntry> Inheritance Object ConductorBase <T> Conductor<T, UEntry> SkinIMGUIDrawer uGUIBuilder Inherited Members ConductorBase<T>.s_Handler ConductorBase<T>.Root ConductorBase<T>.Context ConductorBase<T>.m_Action ConductorBase<T>.SetContext(T) ConductorBase<T>.SetRootWidget(IScWidget) ConductorBase<T>.CalcLayout(Rect) ConductorBase<T>.Prepare(IScWidget) ConductorBase<T>.FallbackPrepare(T, IScWidget) ConductorBase<T>.Run(IScWidget) ConductorBase<T>.FallbackRun(T, IScWidget) ConductorBase<T>.FallbackFinish(T, IScWidget) ConductorBase<T>.Run<T>(Action<T, IScWidget, T>) ConductorBase<T>.Run<T>(Func<T, IScWidget, T, IDisposable>) ConductorBase<T>.Schedule(Action) ConductorBase<T>.InvokeAction() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public abstract class Conductor<T, UEntry> : ConductorBase<T> where T : Conductor<T, UEntry> Type Parameters Name Description T UEntry Constructors View Source Conductor() Declaration public Conductor() Methods View Source CreateEntry() Declaration protected virtual UEntry CreateEntry() Returns Type Description UEntry View Source GetEntry() Declaration protected IEnumerable<UEntry> GetEntry() Returns Type Description IEnumerable <UEntry> View Source GetEntry(IScWidget) Declaration public UEntry GetEntry(IScWidget widget) Parameters Type Name Description IScWidget widget Returns Type Description UEntry View Source RemoveUnusedEntry() Declaration protected void RemoveUnusedEntry()"
  },
  "api/ILib.ScWidgets.ConductorBase-1.Handler-1.html": {
    "href": "api/ILib.ScWidgets.ConductorBase-1.Handler-1.html",
    "title": "Class ConductorBase<TContext>.Handler<U> | Yazawa Ichio Unity Package Document",
    "keywords": "Class ConductorBase<TContext>.Handler<U> Inheritance Object ConductorBase<TContext>.Handler<U> SkinIMGUIDrawer.IMGUIHandler<T> uGUIBuilder.uGUIHandler<T, UComponent> Implements ConductorBase.IHandler <> Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public abstract class Handler<U> : ConductorBase<TContext>.IHandler where U : IScWidget Type Parameters Name Description U Properties View Source Priority Declaration public virtual int Priority { get; } Property Value Type Description Int32 Methods View Source Finish(TContext, U) Declaration protected virtual void Finish(TContext context, U widget) Parameters Type Name Description TContext context U widget View Source Prepare(TContext, U) Declaration protected virtual void Prepare(TContext context, U widget) Parameters Type Name Description TContext context U widget View Source Run(TContext, U) Declaration protected abstract void Run(TContext context, U widget) Parameters Type Name Description TContext context U widget Implements ConductorBase<TContext>.IHandler"
  },
  "api/ILib.ScWidgets.ConductorBase-1.IHandler.html": {
    "href": "api/ILib.ScWidgets.ConductorBase-1.IHandler.html",
    "title": "Interface ConductorBase<TContext>.IHandler | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ConductorBase<TContext>.IHandler Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax protected interface IHandler Properties View Source Priority Declaration int Priority { get; } Property Value Type Description Int32 View Source TargetType Declaration Type TargetType { get; } Property Value Type Description Type Methods View Source Finish(TContext, IScWidget) Declaration void Finish(TContext context, IScWidget widget) Parameters Type Name Description TContext context IScWidget widget View Source Prepare(TContext, IScWidget) Declaration void Prepare(TContext context, IScWidget widget) Parameters Type Name Description TContext context IScWidget widget View Source Run(TContext, IScWidget) Declaration void Run(TContext context, IScWidget widget) Parameters Type Name Description TContext context IScWidget widget"
  },
  "api/ILib.ScWidgets.ConductorBase-1.html": {
    "href": "api/ILib.ScWidgets.ConductorBase-1.html",
    "title": "Class ConductorBase<TContext> | Yazawa Ichio Unity Package Document",
    "keywords": "Class ConductorBase<TContext> Inheritance Object ConductorBase<TContext> Conductor<T, UEntry> Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public abstract class ConductorBase<TContext> Type Parameters Name Description TContext Constructors View Source ConductorBase() Declaration public ConductorBase() View Source ConductorBase(TContext) Declaration public ConductorBase(TContext context) Parameters Type Name Description TContext context Fields View Source m_Action Declaration protected Action m_Action Field Value Type Description Action View Source s_Handler Declaration protected static Dictionary<Type, ConductorBase<TContext>.IHandler> s_Handler Field Value Type Description Dictionary < Type , ConductorBase.IHandler <>> Properties View Source Context Declaration protected TContext Context { get; } Property Value Type Description TContext View Source Root Declaration protected IScWidget Root { get; } Property Value Type Description IScWidget Methods View Source CalcLayout(Rect) Declaration protected void CalcLayout(Rect rect) Parameters Type Name Description UnityEngine.Rect rect View Source FallbackFinish(TContext, IScWidget) Declaration protected virtual void FallbackFinish(TContext context, IScWidget widget) Parameters Type Name Description TContext context IScWidget widget View Source FallbackPrepare(TContext, IScWidget) Declaration protected virtual void FallbackPrepare(TContext context, IScWidget widget) Parameters Type Name Description TContext context IScWidget widget View Source FallbackRun(TContext, IScWidget) Declaration protected virtual void FallbackRun(TContext context, IScWidget widget) Parameters Type Name Description TContext context IScWidget widget View Source InvokeAction() Declaration protected void InvokeAction() View Source Prepare(IScWidget) Declaration protected void Prepare(IScWidget widget) Parameters Type Name Description IScWidget widget View Source Run(IScWidget) Declaration protected void Run(IScWidget widget) Parameters Type Name Description IScWidget widget View Source Run<T>(Action<TContext, IScWidget, T>) Declaration protected void Run<T>(Action<TContext, IScWidget, T> action) where T : class Parameters Type Name Description Action <TContext, IScWidget , T> action Type Parameters Name Description T View Source Run<T>(Func<TContext, IScWidget, T, IDisposable>) Declaration protected void Run<T>(Func<TContext, IScWidget, T, IDisposable> func) where T : class Parameters Type Name Description Func <TContext, IScWidget , T, IDisposable > func Type Parameters Name Description T View Source Schedule(Action) Declaration public void Schedule(Action action) Parameters Type Name Description Action action View Source SetContext(TContext) Declaration public void SetContext(TContext context) Parameters Type Name Description TContext context View Source SetRootWidget(IScWidget) Declaration public void SetRootWidget(IScWidget root) Parameters Type Name Description IScWidget root"
  },
  "api/ILib.ScWidgets.ScreenSizeLayout.html": {
    "href": "api/ILib.ScWidgets.ScreenSizeLayout.html",
    "title": "Class ScreenSizeLayout | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScreenSizeLayout Inheritance Object LayoutBase ScreenSizeLayout Implements ILayout Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScreenSizeLayout : LayoutBase, ILayout Methods View Source CalcRect(Rect) Declaration public override Rect CalcRect(Rect viewRect) Parameters Type Name Description UnityEngine.Rect viewRect Returns Type Description UnityEngine.Rect Overrides LayoutBase.CalcRect(Rect) Implements ILayout"
  },
  "api/ILib.ScWidgets.ScScrollView.Mode.html": {
    "href": "api/ILib.ScWidgets.ScScrollView.Mode.html",
    "title": "Enum ScScrollView.Mode | Yazawa Ichio Unity Package Document",
    "keywords": "Enum ScScrollView.Mode Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public enum Mode Fields Name Description Horizontal Vertical"
  },
  "api/ILib.ScWidgets.ScScrollView.html": {
    "href": "api/ILib.ScWidgets.ScScrollView.html",
    "title": "Class ScScrollView | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScScrollView Inheritance Object ScWidget ScScrollView Implements IScWidget IClipWidget Inherited Members ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.GetMaskColor() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScScrollView : ScWidget, IScWidget, IClipWidget Properties View Source Direction Declaration public ScScrollView.Mode Direction { get; set; } Property Value Type Description ScScrollView.Mode View Source Height Declaration public float Height { get; set; } Property Value Type Description Single View Source HideScrollBar Declaration public bool HideScrollBar { get; set; } Property Value Type Description Boolean View Source Margin Declaration public RectOffset Margin { get; set; } Property Value Type Description UnityEngine.RectOffset View Source ScrollViewPostion Declaration public Vector2 ScrollViewPostion { get; set; } Property Value Type Description UnityEngine.Vector2 View Source Width Declaration public float Width { get; set; } Property Value Type Description Single Methods View Source CalcLayout(Rect) Declaration public override void CalcLayout(Rect rect) Parameters Type Name Description UnityEngine.Rect rect Overrides ScWidget.CalcLayout(Rect) View Source GetClipRect() Declaration public Rect GetClipRect() Returns Type Description UnityEngine.Rect View Source GetContentsRect() Declaration public Rect GetContentsRect() Returns Type Description UnityEngine.Rect Implements IScWidget IClipWidget Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScSlider.html": {
    "href": "api/ILib.ScWidgets.ScSlider.html",
    "title": "Class ScSlider | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScSlider Inheritance Object ScWidget ScFunction ScSlider Implements IScWidget IFunction Inherited Members ScFunction.Interactable ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.GetMaskColor() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScSlider : ScFunction, IScWidget, IFunction Properties View Source MaxValue Declaration public float MaxValue { get; set; } Property Value Type Description Single View Source MinValue Declaration public float MinValue { get; set; } Property Value Type Description Single View Source OnChange Declaration public Action<float> OnChange { set; } Property Value Type Description Action < Single > View Source Value Declaration public float Value { get; set; } Property Value Type Description Single Methods View Source Set(Single) Declaration public void Set(float val) Parameters Type Name Description Single val Implements IScWidget IFunction Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScText.html": {
    "href": "api/ILib.ScWidgets.ScText.html",
    "title": "Class ScText | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScText Inheritance Object ScWidget ScGraphic ScText HeaderButton Implements IScWidget IScGraphic Inherited Members ScGraphic.Color ScGraphic.MaskColor ScGraphic.GetColor() ScGraphic.GetMaskColor() ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScText : ScGraphic, IScWidget, IScGraphic Properties View Source Font Declaration public Font Font { get; set; } Property Value Type Description UnityEngine.Font View Source FontSize Declaration public int FontSize { get; set; } Property Value Type Description Int32 View Source FontStyle Declaration public FontStyle FontStyle { get; set; } Property Value Type Description UnityEngine.FontStyle View Source Text Declaration public string Text { get; set; } Property Value Type Description String View Source TextAnchor Declaration public TextAnchor TextAnchor { get; set; } Property Value Type Description UnityEngine.TextAnchor View Source TextClipping Declaration public TextClipping TextClipping { get; set; } Property Value Type Description UnityEngine.TextClipping Implements IScWidget IScGraphic Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScTexture.html": {
    "href": "api/ILib.ScWidgets.ScTexture.html",
    "title": "Class ScTexture | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScTexture Inheritance Object ScWidget ScGraphic ScTexture Implements IScWidget IScGraphic Inherited Members ScGraphic.Color ScGraphic.MaskColor ScGraphic.GetColor() ScGraphic.GetMaskColor() ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScTexture : ScGraphic, IScWidget, IScGraphic Properties View Source Texture Declaration public Texture Texture { get; set; } Property Value Type Description UnityEngine.Texture Implements IScWidget IScGraphic Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScToggle.html": {
    "href": "api/ILib.ScWidgets.ScToggle.html",
    "title": "Class ScToggle | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScToggle Inheritance Object ScWidget ScFunction ScToggle Implements IScWidget IFunction Inherited Members ScFunction.Interactable ScWidget.Name ScWidget.IScWidget.Layout ScWidget.Layout ScWidget.Revision ScWidget.IsDirty ScWidget.m_Rect ScWidget.m_ParentRect ScWidget.Parent ScWidget.Extends ScWidget.Extend ScWidget.m_Children ScWidget.Children ScWidget.Child ScWidget.IScWidget.SetParent(IScWidget) ScWidget.GetChildren() ScWidget.Add(IScWidget) ScWidget.Remove(IScWidget) ScWidget.SetDitry() ScWidget.CalcLayout(Rect) ScWidget.GetRect() ScWidget.GetRelativeRect() ScWidget.GetMaskColor() ScWidget.IsOutsideClip() ScWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScToggle : ScFunction, IScWidget, IFunction Properties View Source OnChange Declaration public Action<bool> OnChange { set; } Property Value Type Description Action < Boolean > View Source Value Declaration public bool Value { get; set; } Property Value Type Description Boolean Methods View Source Invoke() Declaration public void Invoke() View Source Set(Boolean) Declaration public void Set(bool val) Parameters Type Name Description Boolean val Implements IScWidget IFunction Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.ScWidgets.ScVerticalRatioSplitter.html": {
    "href": "api/ILib.ScWidgets.ScVerticalRatioSplitter.html",
    "title": "Class ScVerticalRatioSplitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class ScVerticalRatioSplitter Inheritance Object ScMinimumWidget ScRatioSplitterBase ScVerticalRatioSplitter Implements IScWidget Inherited Members ScRatioSplitterBase.m_List ScRatioSplitterBase.Set(IScWidget, Int32) ScRatioSplitterBase.Remove(IScWidget) ScRatioSplitterBase.Clear() ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.ScWidgets Assembly : IchioLib.ScWidgets.dll Syntax public class ScVerticalRatioSplitter : ScRatioSplitterBase, IScWidget Methods View Source CalcLayout(Rect) Declaration public override void CalcLayout(Rect rect) Parameters Type Name Description UnityEngine.Rect rect Overrides ScMinimumWidget.CalcLayout(Rect) Implements IScWidget Extension Methods ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2) ExtendSizeExtensions.GetFixedExtendSize(IScWidget, Vector2, Vector2) IExtendExtensions.GetExtend<T>(IScWidget) IExtendExtensions.GetExtends<T>(IScWidget) IExtendExtensions.GetOrAddExtend<T>(IScWidget) IExtendExtensions.AddExtend<T>(IScWidget, T) IExtendExtensions.AddExtend<T>(IScWidget)"
  },
  "api/ILib.UI.UIController-2.html": {
    "href": "api/ILib.UI.UIController-2.html",
    "title": "Class UIController<TParam, UControl> | Yazawa Ichio Unity Package Document",
    "keywords": "Class UIController<TParam, UControl> UIの表示制御の基底クラスです。 Open・Change・Closeの操作を行えます。 実行中に非アクティブにするとコルーチンが停止するため正常に動かなくなります。 Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour UIController<TParam, UControl> UIQueue<TParam, UControl> UIStack<TParam, UControl> Implements IController Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public abstract class UIController<TParam, UControl> : MonoBehaviour, IController where UControl : class, IControl Type Parameters Name Description TParam UControl Properties View Source HasProcess 実行中のプロセスがある場合にtrueが返ります。 UIQueueの場合、表示待ちのリクエストはプロセスに含まれないことに注意してください。 Declaration public bool HasProcess { get; } Property Value Type Description Boolean Methods View Source Change<T>(String, TParam, UIInstance, UIInstance[]) Declaration protected Task<UIInstance> Change<T>(string path, TParam prm, UIInstance parent, UIInstance[] releases) where T : UControl Parameters Type Name Description String path TParam prm UIInstance parent UIInstance [] releases Returns Type Description Task < UIInstance > Type Parameters Name Description T View Source Close(IControl) Declaration protected abstract Task Close(IControl control) Parameters Type Name Description IControl control Returns Type Description Task View Source Close(UIInstance[], UIInstance) Declaration protected Task Close(UIInstance[] releases, UIInstance front = null) Parameters Type Name Description UIInstance [] releases UIInstance front Returns Type Description Task View Source CloseControls(UIInstance[]) Declaration protected Task CloseControls(UIInstance[] controls) Parameters Type Name Description UIInstance [] controls Returns Type Description Task View Source EndProcess() Declaration protected void EndProcess() View Source EnqueueProcess(Action) Declaration protected void EnqueueProcess(Action action) Parameters Type Name Description Action action View Source Execute<T>(Action<T>) 現在アクティブな指定型のUIに対して処理を行います。 Declaration public bool Execute<T>(Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description Boolean Type Parameters Name Description T View Source ExecuteAnyOne<T>(Action<T>) 現在アクティブな指定型のUIに対して一つだけ処理を行います。 Declaration public bool ExecuteAnyOne<T>(Action<T> action) Parameters Type Name Description Action <T> action Returns Type Description Boolean Type Parameters Name Description T View Source ExecuteAnyOne<T>(Func<T, Boolean>) 現在アクティブな指定型のUIに対して一つだけ処理を行います。 Declaration public bool ExecuteAnyOne<T>(Func<T, bool> action) Parameters Type Name Description Func <T, Boolean > action Returns Type Description Boolean Type Parameters Name Description T View Source ExecuteBack() IExecuteBackを実装したUIに対してバック処理を行います。 Declaration public bool ExecuteBack() Returns Type Description Boolean View Source GetActive<T>() Declaration protected abstract IEnumerable<T> GetActive<T>() Returns Type Description IEnumerable <T> Type Parameters Name Description T View Source IsWaitBehindBeforeOnFront<T>(String, TParam) 親のUIのBehind処理の実行が完了するまでOnFrontの処理を実行しません 標準は無効です。 Declaration protected virtual bool IsWaitBehindBeforeOnFront<T>(string path, TParam prm) where T : UControl Parameters Type Name Description String path TParam prm Returns Type Description Boolean Type Parameters Name Description T View Source IsWaitCloseBeforeOnFront(UControl) Close処理の実行が完了するまでOnFrontの処理を実行しません 標準は無効です。 Declaration protected virtual bool IsWaitCloseBeforeOnFront(UControl font) Parameters Type Name Description UControl font Returns Type Description Boolean View Source IsWaitCloseBeforeOnOpen<T>(String, TParam) 親のUIのClose処理の実行が完了するまでOnOpenの処理を実行しません 標準は無効です。 Declaration protected virtual bool IsWaitCloseBeforeOnOpen<T>(string path, TParam prm) where T : UControl Parameters Type Name Description String path TParam prm Returns Type Description Boolean Type Parameters Name Description T View Source Load<T>(String, TParam) アセットバンドル等から読む時は継承先で書き換えてください。 Declaration protected virtual Task<GameObject> Load<T>(string path, TParam prm) Parameters Type Name Description String path TParam prm Returns Type Description Task < UnityEngine.GameObject > Type Parameters Name Description T View Source OnBeginChange() 遷移処理が開始された際に実行されます。 Declaration protected virtual Task OnBeginChange() Returns Type Description Task View Source OnBeginClose() 削除処理が開始された際に実行されます。 Declaration protected virtual Task OnBeginClose() Returns Type Description Task View Source OnBeginOpen() オープン処理が開始された際に実行されます。 Declaration protected virtual Task OnBeginOpen() Returns Type Description Task View Source OnClose(UControl) インスタンスを削除する直前に実行されます。 Declaration protected virtual void OnClose(UControl ui) Parameters Type Name Description UControl ui View Source OnEndChange() 遷移処理が完了した際に実行されます。 Declaration protected virtual Task OnEndChange() Returns Type Description Task View Source OnEndClose() 削除処理が完了した際に実行されます。 Declaration protected virtual Task OnEndClose() Returns Type Description Task View Source OnEndOpen() オープン処理が完了した際に実行されます。 Declaration protected virtual Task OnEndOpen() Returns Type Description Task View Source OnEndProcess() 全てのプロセスが終了した際に実行されます。 ダブルタップが出来ないように入力制限を行う等に利用します。 Declaration protected virtual void OnEndProcess() View Source OnOpen(UControl) UIが生成された直後に実行されます。 Declaration protected virtual void OnOpen(UControl ui) Parameters Type Name Description UControl ui View Source OnStartProcess() プロセスが開始された際に実行されます。 ダブルタップが出来ないように入力制限を行う等に利用します。 Declaration protected virtual void OnStartProcess() View Source Open<T>(String, TParam, UIInstance) Declaration protected Task<UIInstance> Open<T>(string path, TParam prm, UIInstance parent = null) where T : UControl Parameters Type Name Description String path TParam prm UIInstance parent Returns Type Description Task < UIInstance > Type Parameters Name Description T View Source StartProcess() Declaration protected void StartProcess() Explicit Interface Implementations View Source IController.Close(IControl) Declaration Task IController.Close(IControl control) Parameters Type Name Description IControl control Returns Type Description Task Implements IController Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.UI.UIControlLog.LogLevel.html": {
    "href": "api/ILib.UI.UIControlLog.LogLevel.html",
    "title": "Enum UIControlLog.LogLevel | Yazawa Ichio Unity Package Document",
    "keywords": "Enum UIControlLog.LogLevel Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public enum LogLevel Fields Name Description All Debug Error Exception Trace Warning"
  },
  "api/ILib.UI.UIControlLog.html": {
    "href": "api/ILib.UI.UIControlLog.html",
    "title": "Class UIControlLog | Yazawa Ichio Unity Package Document",
    "keywords": "Class UIControlLog Inheritance Object UIControlLog Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public static class UIControlLog Properties View Source Enabled Declaration public static bool Enabled { get; set; } Property Value Type Description Boolean View Source EnabledAssert Declaration public static bool EnabledAssert { get; set; } Property Value Type Description Boolean View Source Level Declaration public static UIControlLog.LogLevel Level { get; set; } Property Value Type Description UIControlLog.LogLevel View Source Logger Declaration public static ILogger Logger { get; set; } Property Value Type Description UnityEngine.ILogger Methods View Source Init() Declaration public static void Init()"
  },
  "api/ILib.UI.UIInstance.html": {
    "href": "api/ILib.UI.UIInstance.html",
    "title": "Class UIInstance | Yazawa Ichio Unity Package Document",
    "keywords": "Class UIInstance UIのインスタンスを保持します Inheritance Object UIInstance Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public class UIInstance Fields View Source Control Declaration public IControl Control Field Value Type Description IControl View Source Object Declaration public GameObject Object Field Value Type Description UnityEngine.GameObject View Source Parent Declaration public UIInstance Parent Field Value Type Description UIInstance"
  },
  "api/ILib.UI.UIQueue-2.html": {
    "href": "api/ILib.UI.UIQueue-2.html",
    "title": "Class UIQueue<TParam, UControl> | Yazawa Ichio Unity Package Document",
    "keywords": "Class UIQueue<TParam, UControl> UIの表示をキュー制御で行います。現在のUIが閉じられるまで、次の表示リクエストは実行されません。 表示前に不要になったリクエストはキャンセルできます。 Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour UIController <TParam, UControl> UIQueue<TParam, UControl> UIQueue Implements IController Inherited Members UIController<TParam, UControl>.IController.Close(IControl) UIController<TParam, UControl>.Close(IControl) UIController<TParam, UControl>.Load<T>(String, TParam) UIController<TParam, UControl>.GetActive<T>() UIController<TParam, UControl>.Execute<T>(Action<T>) UIController<TParam, UControl>.ExecuteAnyOne<T>(Action<T>) UIController<TParam, UControl>.ExecuteAnyOne<T>(Func<T, Boolean>) UIController<TParam, UControl>.ExecuteBack() UIController<TParam, UControl>.HasProcess UIController<TParam, UControl>.EnqueueProcess(Action) UIController<TParam, UControl>.StartProcess() UIController<TParam, UControl>.EndProcess() UIController<TParam, UControl>.OnStartProcess() UIController<TParam, UControl>.OnEndProcess() UIController<TParam, UControl>.OnBeginOpen() UIController<TParam, UControl>.OnOpen(UControl) UIController<TParam, UControl>.OnEndOpen() UIController<TParam, UControl>.IsWaitBehindBeforeOnFront<T>(String, TParam) UIController<TParam, UControl>.Open<T>(String, TParam, UIInstance) UIController<TParam, UControl>.CloseControls(UIInstance[]) UIController<TParam, UControl>.OnBeginChange() UIController<TParam, UControl>.OnEndChange() UIController<TParam, UControl>.IsWaitCloseBeforeOnOpen<T>(String, TParam) UIController<TParam, UControl>.Change<T>(String, TParam, UIInstance, UIInstance[]) UIController<TParam, UControl>.OnBeginClose() UIController<TParam, UControl>.OnClose(UControl) UIController<TParam, UControl>.OnEndClose() UIController<TParam, UControl>.IsWaitCloseBeforeOnFront(UControl) UIController<TParam, UControl>.Close(UIInstance[], UIInstance) Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public abstract class UIQueue<TParam, UControl> : UIController<TParam, UControl>, IController, IQueueController where UControl : class, IControl Type Parameters Name Description TParam UControl Methods View Source Close(IControl) Declaration protected override Task Close(IControl control) Parameters Type Name Description IControl control Returns Type Description Task Overrides ILib.UI.UIController<TParam, UControl>.Close(ILib.UI.IControl) View Source Close(IQueueEntry) Declaration public Task Close(IQueueEntry entry) Parameters Type Name Description IQueueEntry entry Returns Type Description Task View Source Enqueue(String, TParam, CancellationToken) Declaration public IQueueEntry Enqueue(string path, TParam prm, CancellationToken token = default(CancellationToken)) Parameters Type Name Description String path TParam prm CancellationToken token Returns Type Description IQueueEntry View Source GetActive<T>() Declaration protected override IEnumerable<T> GetActive<T>() Returns Type Description IEnumerable <T> Type Parameters Name Description T Overrides ILib.UI.UIController<TParam, UControl>.GetActive<T>() Implements IController Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.UI.UIQueue.html": {
    "href": "api/ILib.UI.UIQueue.html",
    "title": "Class UIQueue | Yazawa Ichio Unity Package Document",
    "keywords": "Class UIQueue UIの表示をキュー制御で行います。現在のUIが閉じられるまで、次の表示リクエストは実行されません。 表示前に不要になったリクエストはキャンセルできます。 Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour UIController < Object , IControl > UIQueue < Object , IControl > UIQueue Implements IController Inherited Members UIQueue<Object, IControl>.GetActive<T>() UIQueue<Object, IControl>.Enqueue(String, Object, CancellationToken) UIQueue<Object, IControl>.Close(IControl) UIQueue<Object, IControl>.Close(IQueueEntry) UIController<Object, IControl>.IController.Close(IControl) UIController<Object, IControl>.Load<T>(String, Object) UIController<Object, IControl>.Execute<T>(Action<T>) UIController<Object, IControl>.ExecuteAnyOne<T>(Action<T>) UIController<Object, IControl>.ExecuteAnyOne<T>(Func<T, Boolean>) UIController<Object, IControl>.ExecuteBack() UIController<Object, IControl>.HasProcess UIController<Object, IControl>.EnqueueProcess(Action) UIController<Object, IControl>.StartProcess() UIController<Object, IControl>.EndProcess() UIController<Object, IControl>.OnStartProcess() UIController<Object, IControl>.OnEndProcess() UIController<Object, IControl>.OnBeginOpen() UIController<Object, IControl>.OnOpen(IControl) UIController<Object, IControl>.OnEndOpen() UIController<Object, IControl>.IsWaitBehindBeforeOnFront<T>(String, Object) UIController<Object, IControl>.Open<T>(String, Object, UIInstance) UIController<Object, IControl>.CloseControls(UIInstance[]) UIController<Object, IControl>.OnBeginChange() UIController<Object, IControl>.OnEndChange() UIController<Object, IControl>.IsWaitCloseBeforeOnOpen<T>(String, Object) UIController<Object, IControl>.Change<T>(String, Object, UIInstance, UIInstance[]) UIController<Object, IControl>.OnBeginClose() UIController<Object, IControl>.OnClose(IControl) UIController<Object, IControl>.OnEndClose() UIController<Object, IControl>.IsWaitCloseBeforeOnFront(IControl) UIController<Object, IControl>.Close(UIInstance[], UIInstance) Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public class UIQueue : UIQueue<object, IControl>, IController, IQueueController Implements IController Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.UI.UIStack-2.html": {
    "href": "api/ILib.UI.UIStack-2.html",
    "title": "Class UIStack<TParam, UControl> | Yazawa Ichio Unity Package Document",
    "keywords": "Class UIStack<TParam, UControl> UIの表示をスタック制御で行います。 Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour UIController <TParam, UControl> UIStack<TParam, UControl> UIStack Implements IController Inherited Members UIController<TParam, UControl>.IController.Close(IControl) UIController<TParam, UControl>.Close(IControl) UIController<TParam, UControl>.Load<T>(String, TParam) UIController<TParam, UControl>.GetActive<T>() UIController<TParam, UControl>.Execute<T>(Action<T>) UIController<TParam, UControl>.ExecuteAnyOne<T>(Action<T>) UIController<TParam, UControl>.ExecuteAnyOne<T>(Func<T, Boolean>) UIController<TParam, UControl>.ExecuteBack() UIController<TParam, UControl>.HasProcess UIController<TParam, UControl>.EnqueueProcess(Action) UIController<TParam, UControl>.StartProcess() UIController<TParam, UControl>.EndProcess() UIController<TParam, UControl>.OnStartProcess() UIController<TParam, UControl>.OnEndProcess() UIController<TParam, UControl>.OnBeginOpen() UIController<TParam, UControl>.OnOpen(UControl) UIController<TParam, UControl>.OnEndOpen() UIController<TParam, UControl>.IsWaitBehindBeforeOnFront<T>(String, TParam) UIController<TParam, UControl>.Open<T>(String, TParam, UIInstance) UIController<TParam, UControl>.CloseControls(UIInstance[]) UIController<TParam, UControl>.OnBeginChange() UIController<TParam, UControl>.OnEndChange() UIController<TParam, UControl>.IsWaitCloseBeforeOnOpen<T>(String, TParam) UIController<TParam, UControl>.Change<T>(String, TParam, UIInstance, UIInstance[]) UIController<TParam, UControl>.OnBeginClose() UIController<TParam, UControl>.OnClose(UControl) UIController<TParam, UControl>.OnEndClose() UIController<TParam, UControl>.IsWaitCloseBeforeOnFront(UControl) UIController<TParam, UControl>.Close(UIInstance[], UIInstance) Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public abstract class UIStack<TParam, UControl> : UIController<TParam, UControl>, IController, IStackController where UControl : class, IControl Type Parameters Name Description TParam UControl Methods View Source Close(IControl) Declaration protected override Task Close(IControl control) Parameters Type Name Description IControl control Returns Type Description Task Overrides ILib.UI.UIController<TParam, UControl>.Close(ILib.UI.IControl) View Source GetActive<T>() Declaration protected override IEnumerable<T> GetActive<T>() Returns Type Description IEnumerable <T> Type Parameters Name Description T Overrides ILib.UI.UIController<TParam, UControl>.GetActive<T>() View Source Pop(Int32) Declaration public Task Pop(int count = 1) Parameters Type Name Description Int32 count Returns Type Description Task View Source Push(String, TParam) Declaration public IStackEntry Push(string path, TParam prm) Parameters Type Name Description String path TParam prm Returns Type Description IStackEntry View Source Switch(String, TParam) Declaration public IStackEntry Switch(string path, TParam prm) Parameters Type Name Description String path TParam prm Returns Type Description IStackEntry Implements IController Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.UI.UIStack.html": {
    "href": "api/ILib.UI.UIStack.html",
    "title": "Class UIStack | Yazawa Ichio Unity Package Document",
    "keywords": "Class UIStack UIの表示をスタック制御で行います。 Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour UIController < Object , IControl > UIStack < Object , IControl > UIStack Implements IController Inherited Members UIStack<Object, IControl>.GetActive<T>() UIStack<Object, IControl>.Push(String, Object) UIStack<Object, IControl>.Switch(String, Object) UIStack<Object, IControl>.Close(IControl) UIStack<Object, IControl>.Pop(Int32) UIController<Object, IControl>.IController.Close(IControl) UIController<Object, IControl>.Load<T>(String, Object) UIController<Object, IControl>.Execute<T>(Action<T>) UIController<Object, IControl>.ExecuteAnyOne<T>(Action<T>) UIController<Object, IControl>.ExecuteAnyOne<T>(Func<T, Boolean>) UIController<Object, IControl>.ExecuteBack() UIController<Object, IControl>.HasProcess UIController<Object, IControl>.EnqueueProcess(Action) UIController<Object, IControl>.StartProcess() UIController<Object, IControl>.EndProcess() UIController<Object, IControl>.OnStartProcess() UIController<Object, IControl>.OnEndProcess() UIController<Object, IControl>.OnBeginOpen() UIController<Object, IControl>.OnOpen(IControl) UIController<Object, IControl>.OnEndOpen() UIController<Object, IControl>.IsWaitBehindBeforeOnFront<T>(String, Object) UIController<Object, IControl>.Open<T>(String, Object, UIInstance) UIController<Object, IControl>.CloseControls(UIInstance[]) UIController<Object, IControl>.OnBeginChange() UIController<Object, IControl>.OnEndChange() UIController<Object, IControl>.IsWaitCloseBeforeOnOpen<T>(String, Object) UIController<Object, IControl>.Change<T>(String, Object, UIInstance, UIInstance[]) UIController<Object, IControl>.OnBeginClose() UIController<Object, IControl>.OnClose(IControl) UIController<Object, IControl>.OnEndClose() UIController<Object, IControl>.IsWaitCloseBeforeOnFront(IControl) UIController<Object, IControl>.Close(UIInstance[], UIInstance) Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax public class UIStack : UIStack<object, IControl>, IController, IStackController Implements IController Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.AssetBundles.AutoUnloader.html": {
    "href": "api/ILib.AssetBundles.AutoUnloader.html",
    "title": "Class AutoUnloader | Yazawa Ichio Unity Package Document",
    "keywords": "Class AutoUnloader Inheritance Object AutoUnloader Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public class AutoUnloader Fields View Source Pause Declaration public static bool Pause Field Value Type Description Boolean View Source UnloadCycle Declaration public static float UnloadCycle Field Value Type Description Single Methods View Source ChangeMode(UnloadMode) Declaration public static void ChangeMode(UnloadMode mode) Parameters Type Name Description UnloadMode mode"
  },
  "api/ILib.AssetBundles.ExManifest.RefInfo.html": {
    "href": "api/ILib.AssetBundles.ExManifest.RefInfo.html",
    "title": "Class RefInfo | Yazawa Ichio Unity Package Document",
    "keywords": "Class RefInfo Inheritance Object RefInfo Namespace : ILib.AssetBundles.ExManifest Assembly : ILib.AssetBundles.ExManifest.dll Syntax [Serializable] public class RefInfo Fields View Source AssetName Declaration public string AssetName Field Value Type Description String View Source Id Declaration public string Id Field Value Type Description String View Source Index Declaration public int Index Field Value Type Description Int32"
  },
  "api/ILib.AssetBundles.ExManifest.TargetProvider.html": {
    "href": "api/ILib.AssetBundles.ExManifest.TargetProvider.html",
    "title": "Class TargetProvider | Yazawa Ichio Unity Package Document",
    "keywords": "Class TargetProvider Inheritance Object TargetProvider Implements ITargetProvider Namespace : ILib.AssetBundles.ExManifest Assembly : ILib.AssetBundles.ExManifest.Editor.dll Syntax public class TargetProvider : ITargetProvider Methods View Source GetBuildTargets(ExManifestAsset) Declaration public AssetBundleBuild[] GetBuildTargets(ExManifestAsset cache) Parameters Type Name Description ExManifestAsset cache Returns Type Description UnityEditor.AssetBundleBuild [] View Source IsTarget(String) Declaration public bool IsTarget(string name) Parameters Type Name Description String name Returns Type Description Boolean Implements ITargetProvider"
  },
  "api/ILib.AssetBundles.ExManifest.Tools.PathToTagSetterContext.html": {
    "href": "api/ILib.AssetBundles.ExManifest.Tools.PathToTagSetterContext.html",
    "title": "Class PathToTagSetterContext | Yazawa Ichio Unity Package Document",
    "keywords": "Class PathToTagSetterContext Inheritance Object SetterContext PathToTagSetterContext Implements ITagCollector Inherited Members SetterContext.Directory SetterContext.SetDirectory(String) Namespace : ILib.AssetBundles.ExManifest.Tools Assembly : ILib.AssetBundles.ExManifest.Tools.dll Syntax public class PathToTagSetterContext : SetterContext, ITagCollector Fields View Source ApplyChildrenFolder Declaration public bool ApplyChildrenFolder Field Value Type Description Boolean View Source InputName Declaration public string InputName Field Value Type Description String View Source NameMode Declaration public PathToTagSetterContext.TagMode NameMode Field Value Type Description PathToTagSetterContext.TagMode View Source TargetExt Declaration public string TargetExt Field Value Type Description String Properties View Source Description Declaration public override string Description { get; } Property Value Type Description String Overrides SetterContext.Description Methods View Source GetTags(String, String[]) Declaration public IEnumerable<string> GetTags(string bundleName, string[] paths) Parameters Type Name Description String bundleName String [] paths Returns Type Description IEnumerable < String > View Source OnGUI() Declaration public override void OnGUI() Overrides SetterContext.OnGUI() Implements ITagCollector"
  },
  "api/ILib.AssetBundles.Initializer.html": {
    "href": "api/ILib.AssetBundles.Initializer.html",
    "title": "Class Initializer | Yazawa Ichio Unity Package Document",
    "keywords": "Class Initializer Inheritance Object Initializer InternalInitializer NetworkInitializer Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public abstract class Initializer Methods View Source AddCompleteEvent(Action<IBundleData, Exception>) Declaration public void AddCompleteEvent(Action<IBundleData, Exception> onComplete) Parameters Type Name Description Action < IBundleData , Exception > onComplete View Source Download(String, String, String, Action) Declaration protected void Download(string url, string name, string cachePath, Action onSuccess) Parameters Type Name Description String url String name String cachePath Action onSuccess View Source Fail(Exception) Declaration protected void Fail(Exception ex) Parameters Type Name Description Exception ex View Source Load(String, String) Declaration protected virtual void Load(string loadPath, string assetName) Parameters Type Name Description String loadPath String assetName View Source Start() Declaration protected abstract void Start() View Source Success(IBundleData) Declaration protected void Success(IBundleData data) Parameters Type Name Description IBundleData data"
  },
  "api/ILib.AssetBundles.Logger.html": {
    "href": "api/ILib.AssetBundles.Logger.html",
    "title": "Namespace ILib.AssetBundles.Logger | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.AssetBundles.Logger Classes Log Enums Log.LogLevel"
  },
  "api/ILib.Audio.IPlayingList.html": {
    "href": "api/ILib.Audio.IPlayingList.html",
    "title": "Interface IPlayingList | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IPlayingList Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public interface IPlayingList Methods View Source GetCount(String) Declaration int GetCount(string controlId) Parameters Type Name Description String controlId Returns Type Description Int32 View Source GetLastPlayStartTime(String) Declaration DateTime GetLastPlayStartTime(string controlId) Parameters Type Name Description String controlId Returns Type Description DateTime View Source StopAll(String) Declaration void StopAll(string controlId) Parameters Type Name Description String controlId"
  },
  "api/ILib.Audio.MusicInfo.html": {
    "href": "api/ILib.Audio.MusicInfo.html",
    "title": "Class MusicInfo | Yazawa Ichio Unity Package Document",
    "keywords": "Class MusicInfo Inheritance Object MusicInfo Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class MusicInfo Fields View Source Clip Declaration public AudioClip Clip Field Value Type Description UnityEngine.AudioClip View Source Group Declaration public AudioMixerGroup Group Field Value Type Description UnityEngine.Audio.AudioMixerGroup View Source Pitch Declaration public float Pitch Field Value Type Description Single View Source Volume Declaration public float Volume Field Value Type Description Single Methods View Source AddRef() Declaration public void AddRef() View Source RemoveRef() Declaration public void RemoveRef() Events View Source OnUnused Declaration public event Action OnUnused Event Type Type Description Action"
  },
  "api/ILib.Audio.MusicPlayerImpl.html": {
    "href": "api/ILib.Audio.MusicPlayerImpl.html",
    "title": "Class MusicPlayerImpl | Yazawa Ichio Unity Package Document",
    "keywords": "Class MusicPlayerImpl ミュージックプレイヤーの実体です Inheritance Object MusicPlayerImpl < String > MusicPlayerImpl Implements IMusicPlayer IMusicPlayer < String > IDisposable Inherited Members MusicPlayerImpl<String>.IsCacheInfoInStack MusicPlayerImpl<String>.MaxPoolCount MusicPlayerImpl<String>.Current MusicPlayerImpl<String>.Change(String, Single, Boolean) MusicPlayerImpl<String>.Change(String, MusicPlayConfig, Boolean) MusicPlayerImpl<String>.Push(String, Single) MusicPlayerImpl<String>.Push(String, MusicPlayConfig) MusicPlayerImpl<String>.Pop(Single, Boolean) MusicPlayerImpl<String>.Pop(MusicPlayConfig, Boolean) MusicPlayerImpl<String>.Stop(Single) MusicPlayerImpl<String>.Pause(Single) MusicPlayerImpl<String>.Resume(Single) MusicPlayerImpl<String>.ClearStack() MusicPlayerImpl<String>.Dispose() Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class MusicPlayerImpl : MusicPlayerImpl<string>, IMusicPlayer, IMusicPlayer<string>, IDisposable Constructors View Source MusicPlayerImpl(PlayingMusic, IMusicProvider, MusicPlayerConfig) Declaration public MusicPlayerImpl(PlayingMusic playingMusic, IMusicProvider provider, MusicPlayerConfig config = null) Parameters Type Name Description PlayingMusic playingMusic IMusicProvider provider MusicPlayerConfig config Implements IMusicPlayer IMusicPlayer<T> System.IDisposable"
  },
  "api/ILib.Audio.MusicProvider-1.html": {
    "href": "api/ILib.Audio.MusicProvider-1.html",
    "title": "Class MusicProvider<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class MusicProvider<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します Inheritance Object MusicProviderBase <T> MusicProvider<T> Implements IMusicProvider <T> Inherited Members MusicProviderBase<T>.PathConversion MusicProviderBase<T>.GroupSelector MusicProviderBase<T>.CustomLoad MusicProviderBase<T>.SetGroup(AudioMixerGroup) MusicProviderBase<T>.SetPathFormat(String) MusicProviderBase<T>.GetPath(T) MusicProviderBase<T>.IMusicProvider<T>.Load(T, Action<MusicInfo, Exception>) MusicProviderBase<T>.Load(T, Action<MusicInfo, Exception>) Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class MusicProvider<T> : MusicProviderBase<T>, IMusicProvider<T> where T : ICacheKey Type Parameters Name Description T Constructors View Source MusicProvider() Declaration public MusicProvider() View Source MusicProvider(AudioMixerGroup, String) Declaration public MusicProvider(AudioMixerGroup group, string format) Parameters Type Name Description UnityEngine.Audio.AudioMixerGroup group String format Methods View Source GetString(T) Declaration protected override string GetString(T prm) Parameters Type Name Description T prm Returns Type Description String Overrides ILib.Audio.MusicProviderBase<T>.GetString(T) Implements IMusicProvider<T> Extension Methods IMusicProviderEx.Create<T>(IMusicProvider<T>, MusicPlayerConfig)"
  },
  "api/ILib.Audio.SoundManagement.SeController.html": {
    "href": "api/ILib.Audio.SoundManagement.SeController.html",
    "title": "Class SeController | Yazawa Ichio Unity Package Document",
    "keywords": "Class SeController Inheritance Object SeController Namespace : ILib.Audio.SoundManagement Assembly : ILib.SoundManager.dll Syntax public class SeController Constructors View Source SeController(Config) Declaration public SeController(Config config) Parameters Type Name Description Config config Properties View Source MaxPoolCount Declaration public int MaxPoolCount { get; set; } Property Value Type Description Int32 Methods View Source AddCache(String, Action<Boolean, Exception>) キャッシュにサウンドを追加します。 この関数でロードした場合、参照カウントを持たないためRemoveCache実行時に破棄されます。 CreateCacheScopeで参照カウントがある場合は、参照カウントが0になるまで破棄されません。 Voiceはキャッシュされません。 Declaration public void AddCache(string prm, Action<bool, Exception> onLoad) Parameters Type Name Description String prm Action < Boolean , Exception > onLoad View Source CreateCacheScope(String[]) 参照カウント方式でサウンド情報をキャッシュします。 解放する際は戻り値のDisposeを実行して下さい。 Voiceはキャッシュされません。 Declaration public ICacheScope CreateCacheScope(string[] keys) Parameters Type Name Description String [] keys Returns Type Description ICacheScope View Source Play(String) SEを再生します。 Declaration public IPlayingSoundContext Play(string prm) Parameters Type Name Description String prm Returns Type Description IPlayingSoundContext View Source PlayJingle(String) シングルを再生します。 Declaration public IPlayingSoundContext PlayJingle(string prm) Parameters Type Name Description String prm Returns Type Description IPlayingSoundContext View Source PlayOneShot(String) SEを再生します。 Declaration public void PlayOneShot(string prm) Parameters Type Name Description String prm View Source PlaySeFromUI(String) UI用のSEを再生します。 Declaration public void PlaySeFromUI(string prm) Parameters Type Name Description String prm View Source PlaySeFromUI(String, out IPlayingSoundContext) UI用のSEを再生します。 Declaration public void PlaySeFromUI(string prm, out IPlayingSoundContext ctx) Parameters Type Name Description String prm IPlayingSoundContext ctx View Source RemoveCache(String) キャッシュにサウンドを削除します。 CreateCacheScopeで参照カウントがある場合は、参照カウントが0になるまで破棄されません。 Voiceには影響しません Declaration public void RemoveCache(string prm) Parameters Type Name Description String prm"
  },
  "api/ILib.Audio.SoundManagement.SoundManagerInstaller.html": {
    "href": "api/ILib.Audio.SoundManagement.SoundManagerInstaller.html",
    "title": "Class SoundManagerInstaller | Yazawa Ichio Unity Package Document",
    "keywords": "Class SoundManagerInstaller サウンドマネージャーの起動を行うスクリプトです。 Inheritance Object UnityEngine.Object UnityEngine.Component UnityEngine.Behaviour UnityEngine.MonoBehaviour SoundManagerInstaller Namespace : ILib.Audio.SoundManagement Assembly : ILib.SoundManager.dll Syntax public class SoundManagerInstaller : MonoBehaviour Extension Methods RoutineExtensions.Routine(MonoBehaviour, IEnumerator) RoutineExtensions.RepeatRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(MonoBehaviour, Func<IEnumerator>)"
  },
  "api/ILib.Audio.SoundUtil.html": {
    "href": "api/ILib.Audio.SoundUtil.html",
    "title": "Class SoundUtil | Yazawa Ichio Unity Package Document",
    "keywords": "Class SoundUtil Inheritance Object SoundUtil Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public static class SoundUtil Methods View Source DecibelToVolume(Single, Boolean) Declaration public static float DecibelToVolume(float decibel, bool clamp = true) Parameters Type Name Description Single decibel Boolean clamp Returns Type Description Single View Source VolumeToDecibel(Single, Boolean) Declaration public static float VolumeToDecibel(float volume, bool clamp = true) Parameters Type Name Description Single volume Boolean clamp Returns Type Description Single"
  },
  "api/ILib.Audio.StartControl.Result.html": {
    "href": "api/ILib.Audio.StartControl.Result.html",
    "title": "Enum StartControl.Result | Yazawa Ichio Unity Package Document",
    "keywords": "Enum StartControl.Result Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public enum Result Fields Name Description Reject Start Wait"
  },
  "api/ILib.CL.ArgBinder.html": {
    "href": "api/ILib.CL.ArgBinder.html",
    "title": "Class ArgBinder | Yazawa Ichio Unity Package Document",
    "keywords": "Class ArgBinder Inheritance Object ArgBinder Namespace : ILib.CL Assembly : ILib.CL.dll Syntax public abstract class ArgBinder Fields View Source m_Arg Declaration protected ArgAttribute m_Arg Field Value Type Description ArgAttribute View Source m_Info Declaration protected FieldInfo m_Info Field Value Type Description FieldInfo View Source m_Obj Declaration protected object m_Obj Field Value Type Description Object Methods View Source CheckRequired(ArgEntry[]) Declaration public void CheckRequired(ArgEntry[] args) Parameters Type Name Description ArgEntry [] args View Source Get(Object) Declaration public static ArgBinder[] Get(object obj) Parameters Type Name Description Object obj Returns Type Description ArgBinder [] View Source IsMatch(ArgEntry) Declaration public bool IsMatch(ArgEntry entry) Parameters Type Name Description ArgEntry entry Returns Type Description Boolean View Source Set(ArgEntry) Declaration public abstract void Set(ArgEntry arg) Parameters Type Name Description ArgEntry arg"
  },
  "api/ILib.CL.ArgEntry.html": {
    "href": "api/ILib.CL.ArgEntry.html",
    "title": "Class ArgEntry | Yazawa Ichio Unity Package Document",
    "keywords": "Class ArgEntry Inheritance Object ArgEntry Namespace : ILib.CL Assembly : ILib.CL.dll Syntax public class ArgEntry Properties View Source LongName Declaration public string LongName { get; set; } Property Value Type Description String View Source ShortName Declaration public char ShortName { get; set; } Property Value Type Description Char View Source Value Declaration public string Value { get; set; } Property Value Type Description String"
  },
  "api/ILib.CodeEmit.FunctionEmitter.html": {
    "href": "api/ILib.CodeEmit.FunctionEmitter.html",
    "title": "Class FunctionEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class FunctionEmitter Inheritance Object EmitterBase FunctionEmitter Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public class FunctionEmitter : EmitterBase Fields View Source Accessibility Declaration public string Accessibility Field Value Type Description String View Source Args Declaration public List<FunctionEmitter.Argument> Args Field Value Type Description List < FunctionEmitter.Argument > View Source Attributes Declaration public List<AttributeEmitter> Attributes Field Value Type Description List < AttributeEmitter > View Source Emitters Declaration public List<EmitterBase> Emitters Field Value Type Description List < EmitterBase > View Source Name Declaration public string Name Field Value Type Description String View Source Return Declaration public string Return Field Value Type Description String View Source Summary Declaration public string Summary Field Value Type Description String Methods View Source AddArg(String, String, String) Declaration public void AddArg(string type, string name, string initValue = \"\") Parameters Type Name Description String type String name String initValue View Source Append(Action<CodeWriter>) Declaration public void Append(Action<CodeWriter> action) Parameters Type Name Description Action < CodeWriter > action View Source Append(String) Declaration public void Append(string message) Parameters Type Name Description String message View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter) View Source WriteLine(String) Declaration public void WriteLine(string line) Parameters Type Name Description String line"
  },
  "api/ILib.CodeEmit.LazyPropertyEmitter.html": {
    "href": "api/ILib.CodeEmit.LazyPropertyEmitter.html",
    "title": "Class LazyPropertyEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class LazyPropertyEmitter Inheritance Object EmitterBase MemberEmitter LazyPropertyEmitter Inherited Members MemberEmitter.Summary MemberEmitter.Accessibility MemberEmitter.Attributes MemberEmitter.AddAttribute(String) MemberEmitter.Emit(CodeWriter) Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public class LazyPropertyEmitter : MemberEmitter Fields View Source Create Declaration public string Create Field Value Type Description String View Source Name Declaration public string Name Field Value Type Description String View Source Type Declaration public string Type Field Value Type Description String Methods View Source EmitMember(CodeWriter) Declaration public override void EmitMember(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides MemberEmitter.EmitMember(CodeWriter)"
  },
  "api/ILib.Debugs.AutoRegisters.DebugInputAttribute.html": {
    "href": "api/ILib.Debugs.AutoRegisters.DebugInputAttribute.html",
    "title": "Class DebugInputAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugInputAttribute Inheritance Object Attribute AutoRegisterAttribute DebugInputAttribute Inherited Members AutoRegisterAttribute.Name AutoRegisterAttribute.Priority AutoRegisterAttribute.Category AutoRegisterAttribute.CategoryPriority AutoRegisterAttribute.Path Namespace : ILib.Debugs.AutoRegisters Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugInputAttribute : AutoRegisterAttribute Constructors View Source DebugInputAttribute(String) Declaration public DebugInputAttribute(string name) Parameters Type Name Description String name"
  },
  "api/ILib.Debugs.AutoRegisters.DebugLabelAttribute.html": {
    "href": "api/ILib.Debugs.AutoRegisters.DebugLabelAttribute.html",
    "title": "Class DebugLabelAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugLabelAttribute Inheritance Object Attribute AutoRegisterAttribute DebugLabelAttribute Inherited Members AutoRegisterAttribute.Name AutoRegisterAttribute.Priority AutoRegisterAttribute.Category AutoRegisterAttribute.CategoryPriority AutoRegisterAttribute.Path Namespace : ILib.Debugs.AutoRegisters Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugLabelAttribute : AutoRegisterAttribute Constructors View Source DebugLabelAttribute(String) Declaration public DebugLabelAttribute(string name) Parameters Type Name Description String name"
  },
  "api/ILib.UI.UITransition.Move.html": {
    "href": "api/ILib.UI.UITransition.Move.html",
    "title": "Class UITransition.Move | Yazawa Ichio Unity Package Document",
    "keywords": "Class UITransition.Move Inheritance Object UITransition.Move Implements UITransition.IAnim Namespace : ILib.UI Assembly : ILib.UI.Control.dll Syntax [Serializable] public class Move : UITransition.IAnim Methods View Source Init() Declaration public void Init() View Source Run(MonoBehaviour, Boolean) Declaration public Task Run(MonoBehaviour owner, bool show) Parameters Type Name Description UnityEngine.MonoBehaviour owner Boolean show Returns Type Description Task Implements UITransition.IAnim"
  },
  "manual/ilib-serv-injector/index.html": {
    "href": "manual/ilib-serv-injector/index.html",
    "title": "ilib-serv-injector | Yazawa Ichio Unity Package Document",
    "keywords": "ilib-serv-injector Unity Service Locater And Injector Package. リポジトリ https://github.com/yazawa-ichio/ilib-serv-injector 概要 サービスロケーターに依存関係の注入機能を追加したもの。 DIコンテナとサービスロケーターの中間ぐらい。 機能よりも軽量に動作することを目標に作成。 使用方法 サービスの作成 最初に登録するサービス機能を持つ interface を作成します。 後はそのインターフェースを実装したクラスを作成するだけです。 サービスを利用する際は必ずインターフェースを通して処理を行うため、必要な機能は全てinterfaceに入れる必要があります。 using UnityEngine; using System; public interface ILogService { void Debug(string msg); void Warning(string msg); void Error(string msg); } public class UnityLogService : ILogService { public void Debug(string msg) => Debug.Log(msg); public void Warning(string msg) => Debug.Warning(msg); public void Error(string msg) => Debug.Error(msg); } public class ConsoleLogService : ILogService { public void Debug(string msg) => Console.WriteLine(\"[Debug]\"+msg); public void Warning(string msg) => Console.WriteLine(\"[Warning]\"+msg); public void Error(string msg) => Console.WriteLine(\"[Error]\"+msg); } サービスの登録・利用 サービスに関数する殆どの処理は ServInjector クラスを通して行われます。 サービスを登録する場合は ServInjector.Bind<T> を使用します。 逆にサービスの登録を解除する場合は ServInjector.Unbind<T> を使用します。 MonoBehaviour を継承したサービスの場合は、 ServInjector.BindAndObserveDestroy を使用するとUnityのライフサイクルで破棄された際に、自動で解放されます。 ただし、可能であれば後述の ServiceMonoBehaviour を継承する方法を利用してください。 サービスを利用する際は ServInjector.Resolve<T> で取得できます。 using ILib.ServInject; void Proc() { //サービスを登録する #if CONSOLE_APP //Consoleアプリケーション使用する場合 ServInjector.Bind<ILogService>(new ConsoleLogService()); #else //Unity使用する場合 ServInjector.Bind<ILogService>(new UnityLogService()); #endif // サービスの取得 var log = ServInjector.Resolve<ILogService>(); log.Debug(\"利用側はどこに出力するか意識しないでログを使用できる\"); //Unbindで解除出来ます。 //現在バインドされているサービス明示的に消したいため、必ず現在のインスタンスを指定する必要がある。 ServInjector.Unbind<ILogService>(log); } サービスをすべて解除する ServInjector.Clear 関数を実行すると現在登録されている全てのサービスを解除します。 自動登録するクラス Service と ServiceMonoBehaviour を継承してクラスは、インスタンスの作成時に自身を ServInjector に登録します。 登録を解除する場合は Service クラスは Dispose 関数、 ServiceMonoBehaviour はDestroyしてください。 public class UnityLogService : ServiceMonoBehaviour<ILogService>, ILogService { public void Debug(string msg) => Debug.Log(msg); public void Warning(string msg) => Debug.Warning(msg); public void Error(string msg) => Debug.Error(msg); } public class ConsoleLogService : Service<ILogService>, ILogService { public void Debug(string msg) => Console.WriteLine(\"[Debug]\"+msg); public void Warning(string msg) => Console.WriteLine(\"[Warning]\"+msg); public void Error(string msg) => Console.WriteLine(\"[Error]\"+msg); } サービスを注入する 通常のDIコンテナではより複雑な処理が可能ですが、このパッケージでは登録済みのサービスをセットする以上の機能を持ちません。 どちらかと言えば、クラスがどのサービスを使用したいかを明示的にするぐらいの機能です。 ServInjector.Inject 関数でサービスを注入できます。 注入するサービスの指定は後述の項目で説明します。 using ILib.ServInject; void Proc() { var instance = new Sample(); ServInjector.Inject(instance); //new ()の型であればサービスの注入を行ったインタンスを返すCrete関数が使用できる instance = ServInjector.Create<Sample>(); } インターフェースによる注入 インターフェスによる注入です。 型解決で実行されるため、比較的高速に動作します。 基本的にこのインターフェスによる注入で実装してください。 using ILib.ServInject; class Sample : IInject<ILogService> { ILogService m_Log; public void Install(ILogService service) => m_Log = service; } リファレクションによる注入 リファレクションを利用した注入です。 InjectAttribute をプロパティか関数につける事で ServInjector.Inject 実行時にサービスのインタンスが渡ります。 public プロパティと関数のみが対象です。 リファレクションによる注入を一切行わない場合は ILIB_DISABLE_SERV_REFLECTION_INJECT シンボルを定義することで機能を無効にできます。 class Sample { ILogService m_Log; //プロパティの場合はsetが呼ばれる。 [Inject] public ILogService Log { get; set; } [Inject] public void Install(ILogService service) => m_Log = service; } その他 Inject の実行には属性などのメタ情報を型ごと取得します。 しかし、継承したクラスなどで、すべてメタ情報が基底クラスにしか存在しない場合があります。 その際、Inject時に基底クラスの System.Type を使用する事で、メタ情報を共有することが出来ます。 LICENSE https://github.com/yazawa-ichio/ilib-serv-injector/blob/master/LICENSE"
  },
  "manual/ilib-sound-control/index.html": {
    "href": "manual/ilib-sound-control/index.html",
    "title": "WIP | Yazawa Ichio Unity Package Document",
    "keywords": "WIP"
  },
  "manual/ilib-ui-control/index.html": {
    "href": "manual/ilib-ui-control/index.html",
    "title": "WIP | Yazawa Ichio Unity Package Document",
    "keywords": "WIP"
  },
  "manual/ilib-unity-cl/index.html": {
    "href": "manual/ilib-unity-cl/index.html",
    "title": "WIP | Yazawa Ichio Unity Package Document",
    "keywords": "WIP"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Scripting API | Yazawa Ichio Unity Package Document",
    "keywords": "Scripting API"
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "マニュアル | Yazawa Ichio Unity Package Document",
    "keywords": "マニュアル 概要 個人開発用に作っていた自分用ライブラリをパッケージ化したものです。 複数のプロジェクトで使うためUPM化したかったため公開しました。 ライセンスは各パッケージのLICENSEファイルを確認してください。 他のライセンスに依存しない限り、基本的に NYSL を採用する方針のため煮るなり焼くなり好きにご自由にしてください。 導入方法 リポジトリから直接落としてきて入れることも出来ますがUPM経由での導入をサポートしています。 UPM経由で導入する場合、UnityプロジェクトのPackages以下にあるmanifest.jsonに以下のように追記してください。 Unity2019.3以降はPackageManagerUIの方から直接リポジトリを指定できます。 manifest.json { \"dependencies\": { ~~~ \"com.unity.assetbundlebrowser\": \"1.7.0\", \"jp.yazawa-ichio.ilib-abloader\": \"https://github.com/yazawa-ichio/ilib-abloader.git\", \"com.unity.modules.assetbundle\": \"1.0.0\", ~~~ } } バージョンを指定する インストールするバージョンを指定する場合はリポジトリのURLの後ろに #0.1.0 のようにタグを指定します。 manifest.json \"jp.yazawa-ichio.ilib-abloader\": \"https://github.com/yazawa-ichio/ilib-abloader.git#0.1.0\", 一覧 ilib-unity-etc ( リポジトリ ) ゲームの全体管理やUI管理、簡易なステートマシーンなど、プロジェクトに必要な小物が入ったパッケージです。 色々は入っているのはUPMのパッケージが依存関係を解決してくれないので、依存関係があるパッケージを全部突っ込んでいます。 依存関係が解決してくれるようになれば、おそらく分割します。 ilib-mvvm ( リポジトリ ) UnityでMVVMでUIのバインディングを行うパッケージです。 リファレクションの実行がボキシングがないため比較的軽量に動作します。 ilib-abloader ( リポジトリ ) AssetBundleのロード管理とファイルサイズ等を収集する簡単なビルドパイプラインのパッケージです。 Updateを利用しない縛りで作ってみたが、アンロード周りの自動解放でUpdateを使ってしまった中途半端なヤツです。 パフォーマンスを切り詰めてませんが、実務レベルで利用するのに必要なAPIは最低限揃っているかと思います。 ilib-serv-injector ( リポジトリ ) シンプルなサービスロケーターと最低限のDIを行えるパッケージです。 参照関係の整理やテストを行いやすくするためにDIを使用したいが、巨大なDIコンテナは導入したくないケースに有効です。 Interfaceによる注入では型解決するため比較的高速に動作します。 ilib-unity-save ( リポジトリ ) Unity上でPlayerPrefs等によるセーブ時にキーの難読化や文字列の暗号化等を行うパッケージです。 プロジェクト毎に実装する方が早いぐらいの奴です。自分用。 ilib-sound-control ( リポジトリ ) オレオレサウンドマネージャーを作りやすくするためSEやBGMの発音制御などが入ったパッケージです。 リファレンス実装としてのサウンドマネージャーも入っています。 3Dサウンドは未対応です。 ilib-scwidgets ( リポジトリ ) IMGUIで使える簡単なウィジェットツールです。 多少見た目がいいスキンを利用もできます。 内部的にウィジェットを利用したランタイム用のデバックメニューも含みます。 ilib-unity-cl ( リポジトリ ) Unityで利用するコマンドラインのヘルパーとツールです。 今のところ引数のバインダーの機能しかありません。"
  },
  "manual/ilib-abloader/ab-name-setter.html": {
    "href": "manual/ilib-abloader/ab-name-setter.html",
    "title": "WIP | Yazawa Ichio Unity Package Document",
    "keywords": "WIP"
  },
  "manual/ilib-abloader/ex-manifest-builder.html": {
    "href": "manual/ilib-abloader/ex-manifest-builder.html",
    "title": "WIP | Yazawa Ichio Unity Package Document",
    "keywords": "WIP"
  },
  "manual/ilib-abloader/index.html": {
    "href": "manual/ilib-abloader/index.html",
    "title": "ilib-abloader | Yazawa Ichio Unity Package Document",
    "keywords": "ilib-abloader Unity AssetBundle Loader Package. リポジトリ https://github.com/yazawa-ichio/ilib-abloader 概要 コルーチン及びロードにUpdateを使わない形のアセットバンドルのローダーです。 手軽の利用できるという点ではまあまあ？ 縛りプレイで作っただけなので、実用にはイマイチ機能が足りていない。 個人開発だとこれぐらいで、あとは外でラップしていい感じにフォールバッグやらを付け足したらギリギリ利用できるかなという程度です。 その他、簡易的にアセットバンドル名を設定できるツールと、ビルド時にアセットバンドルのサイズやCRC情報を収集する専用のビルダーも含みます。 アセットバンドル名設定ツール(WIP) 拡張マニフェストビルダー(WIP) 公式のAddressableAssetsSystemとの違い Addressableがまともに使い物にならない時期に作り始めました。 今から使う分には公式のAddressableの採用するのはありかと思います。 ただ、個人的にAddressableはAssetBundleを透過的に扱うために内部がかなり複雑な実装で、ビルドパイプライン一式も含む大きめなフレームワークなので小回りが利きにくいと思います。 逆にABLoaderはAssetBundleを扱う上で必要な依存解決とロードの参照管理、ダウンロード時のキャッシュ管理に絞っています。 それなりの規模の開発においては、このパッケージをコピーして用途に合わせてチューニングするのが一番かと思います。 セットアップ方法 事前準備 ABLoaderを利用するには事前にアセットバンドルをビルド出来る環境を用意する必要があります。 特にエディタでシミュレート実行( UseEditorAsset )する際は assetBundleName を設定する必要があります。 アセットバンドル名は手で付ける事も出来ますが、基本的にインポーター経由で付けるのか適切です。 このパッケージにはアセットバンドル名を設定できるツールが同梱されているので、必要であれば使ってください。 ファイルパスをベースでアセットバンドル名を決定し、最低限の設定しかつけていないので複雑なことをは出来ません。 アセットバンドル名設定ツール サーバーからダウンロードする形式であれば、ダウンロード時の破損チェックとファイルサイズが必要になります。 その場合に必要なビルドパイプラインがパッケージに同梱されています。 通常のアセットバンドルビルドのポスト処理としてファイルサイズやCRCを収集した拡張マニフェストをビルド出来ます。 拡張マニフェストビルダー 初期化を行う 初期化時にロード方法を決定する ILoadOperator を渡します。 ILoadOperator は自前で実装する事も出来ますが、 StreamingAssets とサーバー経由の標準的な実装はすでに用意されています。 ABLoader.Initialize 関数で初期化してください。 StreamingAssetsからロードする InternalLoadOperator を使用します。 ABLoader.CreateInternalOperator 関数を利用すると、 StreamingAssets のパス以下のみの指定で ILoadOperator を作成できます。 引数は以下になります。 directory StreamingAssets 以下のアセットバンドルが入っているディレクトリを指定します。 manifest マニフェストのバンドル名を指定します。 標準ではアセットバンドルのビルド時のディレクトリ名になります。 ※ExManifestを使う場合は別になります。 manifestAssetName マニフェストのアセット名を指定します。 標準のアセットバンドルのマニフェストでは AssetBundleManifest を指定します。 ※ExManifestを使う場合は別になります。 サーバーからダウンロードしてからロードする NetworkLoadOperator を使用します。 ABLoader.CreateLoadOperator 関数を利用すると、 Application.temporaryCachePath+\"/AssetBundles\" 以下にキャッシュを保存する ILoadOperator を作成できます。 url ダウンロードのベースとなるURLです。 manifest マニフェストのバンドル名を指定します。 標準ではアセットバンドルのビルド時のディレクトリ名になります。 ※ExManifestを使う場合は別になります。 version マニフェストのバージョンです。 保存したくない場合などは日時等にしておくと毎回ダウンロードされます。 manifestAssetName マニフェストのアセット名を指定します。 標準のアセットバンドルのマニフェストでは AssetBundleManifest を指定します。 ※ExManifestを使う場合は別になります。 エディタ上でテストする ABLoader.UseEditorMode = true にします。 エディタ上において AssetDataBase 経由で直接アセットをロードします。 アセットをロードする LoadContainer アセットバンドルへの参照を持つコンテナをロードします。 ロード完了時、コンテナへの参照クラスがコールバックで返されます。 アセットバンドルはこのコンテナの参照クラスを通して、参照カウントを持っており、すべての参照がなくなった際にアンロードされます。 デフォルトではGCによって解放された際に、自動的に参照カウントを減らします。 後述の LoadAsset 等は、この関数を利用したエイリアス実装になります。 using ILib.AssetBundles; void Prop() { //アセットバンドルのファイル名を指定する ABLoader.LoadContainer(\"texture/test1.bundle\", container => { //コンテナからテクスチャをロード var texture = container.LoadAsset<Texture2D>(\"Test1\"); //非同期メソッドでも呼べる container.LoadAssetAsync<Texture2D>(\"Test1\",(tex) => { }); //GCで自動で破棄されるが、手動で呼ぶことが出来る。 container.Dispose(); }, ex => { //例外を通知 Alert.Throw(ex); }); } LoadAsset/LoadAssetAsync アセットバンドル名とアセット名を指定してアセットをロードします。 アセットバンドルの参照は自動で解放されます。 using ILib.AssetBundles; void Prop() { //アセットバンドルのファイル名を指定する ABLoader.LoadAssetAsync<Texture2D>(\"texture/test1.bundle\", \"Test1\", tex => { //テクスチャをキャッシュするなり、利用するなりする }, ex => { //例外を通知 Alert.Throw(ex); }); } LoadScene/LoadSceneAsync アセットバンドル名とアセット名を指定してアセットをロードします。 アセットバンドルの参照は自動で解放されます。 using ILib.AssetBundles; void Prop() { //アセットバンドルのファイル名を指定する ABLoader.LoadSceneAsync(\"scene/test1.bundle\", \"Test1\", ()) => { //シーンがロード出来た。 }, ex => { //例外を通知 Alert.Throw(ex); }); } 事前にダウンロードを行う ABLoader.Download 関数でダウンロードのみを行うことが出来ます。 返り値からダウンロードの進捗を取得することも出来ます。 using UnityEngine.UI; using ILib.AssetBundles; IEnumerator Prop(Text progressDisp, System.Action onSuccess) { var names = new string[] { \"texture/test1.bundle\", \"texture/test2.bundle\", \"texture/test3.bundle\" }; var complete = false; var success = false; var fails = new List<System.Exception>(); //ExManifestを利用するとダウンロードサイズが取得できる //var size = ABLoader.GetDownloadSize(names); //進捗が0～1fの間で取れるFunc<float>が返る var progress = ABLoader.Download(names, ret => { complete = true; success = ret; }, ex => { fails.Add(ex); }); progressDisp.text = \"0%\"; while(!complete) { var percentage = (int)(progress() * 100f); progressDisp.text = $\"{percentage}%\"; yield reyurn null; } progressDisp.text = \"100%\"; if(success) { onSuccess?.Invoke(); } else { //例外を通知 //実際には数回リトライした方がいい。 Alert.Throw(fails.ToArray()); } } 処理を終了する 再起動時などはロード処理をすべて中断する必要があります。 ABLoader.Stop 関数で全てのロード処理を中断し、リセット処理を行えます。 ただし、リクエスト元に中断は通知されません。 停止後は再度、初期化を行う必要があります。 using ILib.AssetBundles; void Prop() { //キャッシュクリア時も安全のため全ての処理を中断してから行います。 ABLoader.Stop(()=>{ //再起動 Reboot.Run(); }); } キャッシュクリア ネットワーク経由でダウンロードを行った場合、キャッシュをクリアできる必要があります。 ABLoader.CacheClear 関数でキャッシュクリアが実行できます。 安全のため内部的に ABLoader.Stop を実行した後にキャッシュクリアが実行されます。 そのため、再度初期化を行う必要があります。 using ILib.AssetBundles; void Prop() { //キャッシュクリア時も安全のため全ての処理を中断してから行います。 ABLoader.CacheClear(()=>{ //再起動 Reboot.Run(); }); } LICENSE https://github.com/yazawa-ichio/ilib-abloader/blob/master/LICENSE"
  },
  "manual/ilib-mvvm/index.html": {
    "href": "manual/ilib-mvvm/index.html",
    "title": "WIP | Yazawa Ichio Unity Package Document",
    "keywords": "WIP"
  },
  "manual/ilib-scwidgets/debug-menu.html": {
    "href": "manual/ilib-scwidgets/debug-menu.html",
    "title": "ScDebugMene | Yazawa Ichio Unity Package Document",
    "keywords": "ScDebugMene ScWidget Extention Debug Menu リポジトリ https://github.com/yazawa-ichio/ilib-scwidgets/tree/master/IchioLib.ScWidgets/Extension/ScDebugMenu 概要 ScWidgetsを使用したUnityのデバッグ用のメニューです。 IMGUIベースで作られており、リリース時に切り離しやすかったり、uGUIに干渉しないのが利点です。 導入方法 Unityのデバッグビルド時はデフォルトで利用できます。 デバッグビルド以外の際は ILIB_DEBUG_MENU シンボルを利用すると利用できます。 こちら公式ドキュメント などを参考にシンボルを定義してください。 ScDebugMenuのセットアップ ScDebugMenu コンポーネントはデバッグメニューの描写や制御を行うコンポーネントです。 アプリケーション側から行う操作は全て ScDebugMenu を通して行われます。 Menuのコンポーネントを追加する プレハブやシーンのオブジェクトに ScDebugMenu コンポーネントを追加してください。 おすすめはデバッグ用のシーンを作り、その中のゲームオブジェクトにコンポーネントを追加する方法です。 シーンにして置くことで、リリースビルド時にデバッグ用のリソースを切り離すことが出来ます。 スキンを設定する 新規の場合は スキンを新規作成 のボタンを実行してください。 指定のフォルダにスキンのアセットを作成します。 この際、 Resources フォルダに入れるとビルド時に含まれるので避けてください。 作成した後は、 ScDebugMenu コンポーネントの Skin フィールドにセットします。 ScDebugMenuを表示する メニューを開く場合は ScDebugMenu.Open 関数を実行します。 ScDebugMenu はあくまでデバッグメニューの描写を行うためのコンポーネントであるため、メニュー開閉などは追加で実装する必要があります。 以下のような制御用のコンポーネントを作成してメニューを開きます。 表示のトリガーはゲーム内容やプラットフォームに応じて適宜変えてください。 この例はスマホ向けのゲームを想定しています。 using UnityEngine; using ILib.ScWidgets; public class DebugManager : MonoBehaviour { #if DEBUG || ILIB_DEBUG_MENU ScDebugMenu m_DebugMenu; void Awake() { m_DebugMenu = GetComponent<ScDebugMenu>(); m_DebugMenu.Contexts.Bind(this); } void Update() { #if UNITY_EDITOR //エディタ上だと右クリックで開く if (Input.GetMouseButtonUp(1)) { m_DebugMenu.Open(); } #else //スマホだと四本指のタップで開く //ゲームにおいて利用しないタップ判定などにしておく if (Input.touchCount == 4) { m_DebugMenu.Open(); } #endif } #endif } 機能 コンテキスト デバッグメニューの項目は、全て対象のコンテキスト（ System.Type ）を持ち、対象のコンテキストがバインドされている時のみ表示されます。 ScDebugMenu.Contexts.Bind<TContext>(T obj) 関数で任意のコンテキストをバインド出来ます。 解除する際は ScDebugMenu.Contexts.Unbind<TContext>(T obj) 関数で行えます。 弱参照でバインドしているため Unbind 関数を実行しない場合でも、 GC によって回収された場合は自動で解除されます。 この機能を利用する事でゲームのシーン（インゲーム・アウトゲーム）のみ必要なメニューを表示することが出来ます。 まだ、常に表示するようなメニューであれば、先ほど例に出した ScDebugMenu を制御するコンポーネントなどを初期化時にバインドしておきます。 public class DebugManager : MonoBehaviour { #if DEBUG || ILIB_DEBUG_MENU ScDebugMenu m_DebugMenu; void Awake() { m_DebugMenu = GetComponent<ScDebugMenu>(); //自身をコンテキストとしてバインドする。 m_DebugMenu.Contexts.Bind(this); } ~~~ ~~~ } 階層構造について デバッグメニューの項目は Category と Path を持ちます。 Category は下部のメニューのタブになります。指定しない場合一番左の 共通 カテゴリーになります。 Path はメニューの階層構造を作る事が出来ます。 / 毎にページ側が分かれ、ページ遷移用のメニューが作られます。 Path は先頭に @ を付ける事で通常の階層構造と切り離したページを持つことが出来ます。 using ILib.Debugs; public class Sample1Button : ButtonContent<DebugManager> { public override string Category => \"サンプル\"; public override string Path => \"ページ1/ページ2\"; protected override void OnClick() => Debug.Log(\"OnClick Sample1\"); } public class Sample2Button : ButtonContent<DebugManager> { //Categoryを定義しない場合、共通カテゴリーになる //public override string Category => \"サンプル\"; //ページがない場合はカテゴリーのトップページに表示される //public override string Path => \"ページ1\"; protected override void OnClick() => Debug.Log(\"OnClick Sample1\"); } メニューの追加 メニューの追加方法は大きく二つあります。 デバッグ用の Content クラスを継承する方法と自動登録（ AutoRegisterAttribute ）属性による方法です。 どちらも定義さえすれば ScDebugMenu への登録は自動で行われます。 大半の用途では自動登録の方式で済むため、そちらを利用するのがおすすめです。 Contentクラスを利用する 基本的に Content クラスを基底クラスに持つ、ボタン等の機能を実装した ButtonContent<TContext> を継承して利用します。 この方法を利用する利点ですが、対象のコンテキストを操作できるのがメリットです。 Content.Context プロパティからアクセス出来ます。 例 using ILib.Debugs; //クラスを定義すると自動でScDebugMenuに登録される public class SampleInputContent : InputFieldContent<SampleContext> { //項目のラベル protected override string Label => \"サンプル入力\"; protected override string Value { get => Context.SampleInput; set => Context.SampleInput = value; } } 情報表示系 LabelContent ボタン系 ButtonContnt ToggleContent CheckBoxContent RadioButtonContent 入力系 InputFieldContent IntFieldContent IntSliderContent FloatFieldContent FloatSliderContent 特殊 PageJumpContent @ 指定を行ったページに遷移するための機能です。 自動登録( AutoRegister )を利用する 名前空間 ILib.Debugs.AutoRegisters の属性をクラスやメソッドに指定する事でメニューを作成する事が出来ます。 Content を継承する場合はより複雑な実装が可能ですが、大半の用途ではこちらの方法で指定できます。 この方での指定ではコンテキスト内のプロパティやメソッドしか項目を追加できません。 コンテキストを指定する コンテキストとして扱いたいクラスに AutoRegisterTarget 属性を追加します。 これによりプロパティやメソッドが自動登録の対象にする事が出来ます。 ScDebugMenu.Contexts.Bind 関数でインスタンスを登録する箇所などは変わりありません。 using UnityEngine; using ILib.Debugs; using ILib.Debugs.AutoRegisters; [AutoRegisterTarget] public class AutoSampleContext { [DebugToggle(\"AutoRegisterToggle\")] public bool ToggleValue{ get; set; } [DeubgButton(\"AutoRegisterButton\")] void OnDebugButton() { Debug.Log(\"OnDebugButton\"); } } 項目を追加する AutoRegisterTarget 属性を追加したクラスに対して、中のプロパティや関数に属性を追加すると自動でメニューが追加されます。 自動実装出来る機能は以下の表で確認できます。 名前 対象 機能 DebugLabel 関数(return string) 文字列表示 DebugButton 関数(return void) 関数実行 DebugSlider フィールドorプロパティ(float or int) 数値スライダー DebugInput フィールドorプロパティ(string) 文字列入力 DebugToggle フィールドorプロパティ(bool) トグル カテゴリーやパスに関しても属性のプロパティ経由で設定できます。 using UnityEngine; using ILib.Debugs; using ILib.Debugs.AutoRegisters; [AutoRegisterTarget] public class AutoSampleContext { int m_Count; [DeubgButton(\"CountUp\", Category = \"カテゴリー\")] void OnCountUp() { m_Count++ } [DebugLabel(\"Count\", Path = \"Path1/Path2\")] string GetCount() { return \"Count \" + m_Count; } }"
  },
  "manual/ilib-scwidgets/index.html": {
    "href": "manual/ilib-scwidgets/index.html",
    "title": "ilib-scwidget(WIP) | Yazawa Ichio Unity Package Document",
    "keywords": "ilib-scwidget(WIP) Unity Tool Scripting Widget Package リポジトリ https://github.com/yazawa-ichio/ilib-scwidget 概要 Unity用のツール用のウィジェット。 デバッグメニューやGUILayoutでは実装が難しいツールGUIを作るために作成。 UIElementsがランタイムで動くのを待てないので作った。 そろそろランタイムで動きそうなので要らない子。 拡張実装として作ったデバッグメニューが、いい感じに出来たのでそちらのみドキュメントを追加します。 ScDebugMenu ドキュメント LICENSE https://github.com/yazawa-ichio/ilib-scwidget/blob/master/LICENSE"
  },
  "manual/ilib-unity-etc/index.html": {
    "href": "manual/ilib-unity-etc/index.html",
    "title": "WIP | Yazawa Ichio Unity Package Document",
    "keywords": "WIP"
  },
  "manual/ilib-unity-save/index.html": {
    "href": "manual/ilib-unity-save/index.html",
    "title": "lib-unity-save | Yazawa Ichio Unity Package Document",
    "keywords": "lib-unity-save Unity Save Data Package リポジトリ https://github.com/yazawa-ichio/ilib-unity-save 概要 Unity用のデータ保存のパッケージです。 簡単な暗号化や難読化を行えます。 アプリケーション毎に作った方が速いぐらい簡易な実装です。 セットアップ方法 保存用のキーと作成 セーブ用のキーを列挙型で作成してください。 キーは文字列で解決します。 そのため、上下の入れ替えが可能ですが、名前が変更された場合に読み取りが出来なくなります。 リリース後は、名前の変更は避けるようにしてください。 //セーブ用のキー //ToString()を行った文字列で解決します。 public enum AppSaveKey { UserId, Config, PlayData, } 保存キーは Ilib.Save.SaveData<T> のジェネリックとして指定します。 以下の例では継承して利用していますが、 SaveData<AppSaveKey> のインスタンスをそのまま使用することも可能です。 //パッケージの名前空間 using ILib.Save; public class AppSaveData : SaveData<AppSaveKey> { public AppSaveData(string iv, string key, System.Func<string> keyPrefix) : base(iv, key, keyPrefix) { } } 暗号化用の鍵の作成 事前にアプリケーションで利用する暗号化用の情報を作成します。 暗号化のため System.Security.Cryptography.RijndaelManaged を利用しているためIVとKeyが必要になります。 IVとKeyの作り方が分からない場合、以下のようなスクリプトで作成できます。 ただし、 ソルト生成 と ILibSave の部分は、必ず適当な置き換えてください。 例: 暗号化用のキーを作成 using UnityEditor; class Tool { [MenuItem(\"Tool/ILib/GenSave IV and Key\")] static void GenIVAndKey() { byte[] salt = System.Text.Encoding.UTF8.GetBytes(\"ソルト生成\"); //ソルトとパスワードからKeyとIVを作成。 var deriveBytes = new System.Security.Cryptography.Rfc2898DeriveBytes(\"ILbSave\", salt); var key = System.Convert.ToBase64String(deriveBytes.GetBytes(keySize / 8)); var iv = System.Convert.ToBase64String(deriveBytes.GetBytes(blockSize / 8)); Debug.Log($\"key:{key},iv:{iv}\"); } } ここでは説明しませんが、生成した Key と IV は可能であれはbyte配列等にして、さらにXORなどを利用し難読化した型で組み込んでください。 殆どのデータがサーバー側で保存されている、コンフィグ等のデータしかない場合は、ハードコードしてもそれ程問題はありません。 インスタンスの作成 後はKeyとIVを SaveData<AppSaveKey> の作成時に渡したり、継承したクラスでラップするなどして、インスタンスを作成します。 例: SaveData<T> をそのまま使う //パッケージの名前空間 using ILib.Save; var key = \"hogehoge\"; var iv = \"hogehoge\"; var data = new SaveData<AppSaveKey>(key,iv, keyPrefix: () => \"\"); 例: SaveData<T> をラップして使う //パッケージの名前空間 using ILib.Save; // クラスでラップする public class AppSaveData : SaveData<AppSaveKey> { //可能であれば難読化した物をハードコードしておき、実行時に復号化してデータを返す static string GetKey() => \"hogehoge\"; static string GetIV() => \"hogehoge\"; public AppSaveData(System.Func<string> keyPrefix) : base(GetKey(), GetIV(), keyPrefix) { } } var data = new AppSaveData(keyPrefix: () => \"\"); keyPrefixについて keyPrefixは環境ごとに保存したい場合が違う場合に使用します。 例えば、複数のセーブデータを持てるタイプのゲームであれば、そのスロット毎に別の KeyPrefix を変えれば、同じキーでスロット毎に保存ができます。 また、サーバーを利用するゲームであれば、接続先ごとに保存するデータを変更するなども可能です。 クラスをシリアライズして保存する 保存用のクラスを作成する Ilib.Save.Data を継承したクラスに、 ILib.Save.SaveKeyAttribute 属性を設定します。 Unityの JsonUtility クラスを通して保存するため、Unityのシリアライズの制約に縛られます。 //パッケージの名前空間 using ILib.Save; using UnityEngine; [SaveData(AppSaveKey.Config)] public class Config : Data { public float SoundVolume = 1f; } データを取得・保存する データを取り出す場合は SaveData<TKey>.TryGet<TData>(out TData data) を使用します。 保存する場合は、 ILib.Save.Data.SetDitry クラスを利用します。 内部的には、 SaveData<T>.Set 関数を実行した後に SaveData<T>.Save 関数を実行しています。 SaveData<AppSaveKey> data = GetData(); Config config; //<Config>は省略可 var ret = data.TryGet<Config>(out config); Debug.Assert(ret, \"デシリアライズに失敗した場合ret=falseが返る。新規作成時とロード成功時はret=trueが返る\"); //保存する //saveがtrueの場合はPlayerPrefへの永続化も行います。 data.SetDitry(save: true); LICENSE https://github.com/yazawa-ichio/ilib-unity-save/blob/master/LICENSE"
  },
  "index.html": {
    "href": "index.html",
    "title": "ilib-unity-package document | Yazawa Ichio Unity Package Document",
    "keywords": "ilib-unity-package document 自作のUnityパッケージドキュメント 使っている人が出てきたので、パッケージとしての体裁を整えるために最低限書いておきます。 概要 マニュアル 個々のパッケージのドキュメントです。 スクリプトリファレンス 全パッケージのAPIリファレンスです。 ドキュメントリポジトリ ドキュメントと作成したパッケージとサンプル、テスト等が入った全部入りのリポジトリです。 個々のパッケージは、別リポジトリに分かれておりUnityPackageとして導入が可能です。"
  },
  "api/ILib.AssetBundles.ExManifest.ABInfo.html": {
    "href": "api/ILib.AssetBundles.ExManifest.ABInfo.html",
    "title": "Class ABInfo | Yazawa Ichio Unity Package Document",
    "keywords": "Class ABInfo Inheritance Object ABInfo Namespace : ILib.AssetBundles.ExManifest Assembly : ILib.AssetBundles.ExManifest.dll Syntax [Serializable] public class ABInfo Fields View Source CRC Declaration public uint CRC Field Value Type Description UInt32 View Source DepIndex Declaration public int DepIndex Field Value Type Description Int32 View Source Hash Declaration public string Hash Field Value Type Description String View Source Name Declaration public string Name Field Value Type Description String View Source Size Declaration public long Size Field Value Type Description Int64 View Source TagIndex Declaration public int TagIndex Field Value Type Description Int32 Methods View Source Duplicate() Declaration public ABInfo Duplicate() Returns Type Description ABInfo"
  },
  "api/ILib.AssetBundles.ExManifest.IExDataProvider.html": {
    "href": "api/ILib.AssetBundles.ExManifest.IExDataProvider.html",
    "title": "Interface IExDataProvider | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IExDataProvider Namespace : ILib.AssetBundles.ExManifest Assembly : ILib.AssetBundles.ExManifest.Editor.dll Syntax public interface IExDataProvider Methods View Source GetReferenceId(String, String) Declaration string GetReferenceId(string bundleName, string path) Parameters Type Name Description String bundleName String path Returns Type Description String View Source GetTag(String, String[]) Declaration string[] GetTag(string bundleName, string[] paths) Parameters Type Name Description String bundleName String [] paths Returns Type Description String []"
  },
  "api/ILib.AssetBundles.IBundleData.html": {
    "href": "api/ILib.AssetBundles.IBundleData.html",
    "title": "Interface IBundleData | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IBundleData Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public interface IBundleData Methods View Source GetAllDepends(String, out String[]) Declaration int GetAllDepends(string name, out string[] deps) Parameters Type Name Description String name String [] deps Returns Type Description Int32 View Source GetAllNames() Declaration string[] GetAllNames() Returns Type Description String [] View Source GetBundleNames(String) Declaration IEnumerable<string> GetBundleNames(string tag) Parameters Type Name Description String tag Returns Type Description IEnumerable < String > View Source GetCRC(String) Declaration uint GetCRC(string name) Parameters Type Name Description String name Returns Type Description UInt32 View Source GetHash(String) Declaration string GetHash(string name) Parameters Type Name Description String name Returns Type Description String View Source GetReference(String) Declaration (string bundleName, string assetName)GetReference(string id) Parameters Type Name Description String id Returns Type Description ValueTuple < String , String > View Source GetSize(String) Declaration long GetSize(string name) Parameters Type Name Description String name Returns Type Description Int64"
  },
  "api/ILib.AssetBundles.InternalLoadOperator.html": {
    "href": "api/ILib.AssetBundles.InternalLoadOperator.html",
    "title": "Class InternalLoadOperator | Yazawa Ichio Unity Package Document",
    "keywords": "Class InternalLoadOperator Inheritance Object InternalLoadOperator Implements ILoadOperator Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public class InternalLoadOperator : ILoadOperator Constructors View Source InternalLoadOperator(String, String, String) Declaration public InternalLoadOperator(string loadPath, string manifest, string manifestAssetName = \"AssetBundleManifest\") Parameters Type Name Description String loadPath String manifest String manifestAssetName Methods View Source GetCacheRoot() Declaration public string GetCacheRoot() Returns Type Description String View Source Init() Declaration public Initializer Init() Returns Type Description Initializer View Source IsDownload(String, String) Declaration public bool IsDownload(string name, string hash) Parameters Type Name Description String name String hash Returns Type Description Boolean View Source Load(String, String) Declaration public LoadOperation Load(string name, string hash) Parameters Type Name Description String name String hash Returns Type Description LoadOperation View Source LoadPath(String, String) Declaration public string LoadPath(string name, string hash) Parameters Type Name Description String name String hash Returns Type Description String View Source RequestUrl(String, String) Declaration public string RequestUrl(string name, string hash) Parameters Type Name Description String name String hash Returns Type Description String Implements ILoadOperator"
  },
  "api/ILib.AssetBundles.NameSetter.ABNameSetterImpoter.html": {
    "href": "api/ILib.AssetBundles.NameSetter.ABNameSetterImpoter.html",
    "title": "Class ABNameSetterImpoter | Yazawa Ichio Unity Package Document",
    "keywords": "Class ABNameSetterImpoter Inheritance Object UnityEditor.AssetPostprocessor ABNameSetterImpoter Inherited Members UnityEditor.AssetPostprocessor.LogWarning(System.String) UnityEditor.AssetPostprocessor.LogWarning(System.String, UnityEngine.Object) UnityEditor.AssetPostprocessor.LogError(System.String) UnityEditor.AssetPostprocessor.LogError(System.String, UnityEngine.Object) UnityEditor.AssetPostprocessor.GetVersion() UnityEditor.AssetPostprocessor.GetPostprocessOrder() UnityEditor.AssetPostprocessor.assetPath UnityEditor.AssetPostprocessor.context UnityEditor.AssetPostprocessor.assetImporter Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax public class ABNameSetterImpoter : AssetPostprocessor"
  },
  "api/ILib.AssetBundles.NameSetter.PathToNameContext.html": {
    "href": "api/ILib.AssetBundles.NameSetter.PathToNameContext.html",
    "title": "Class PathToNameContext | Yazawa Ichio Unity Package Document",
    "keywords": "Class PathToNameContext Inheritance Object SetterContext ImportContext < PathToNameContext > PathToNameContext Implements IImportContext Inherited Members ImportContext<PathToNameContext>.IImportContext.Import(String, AssetImporter) SetterContext.Directory SetterContext.SetDirectory(String) Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax public class PathToNameContext : ImportContext<PathToNameContext>, IImportContext Fields View Source ApplyChildrenFolder Declaration public bool ApplyChildrenFolder Field Value Type Description Boolean View Source BundleExt Declaration public string BundleExt Field Value Type Description String View Source NameMode Declaration public PathToNameContext.Mode NameMode Field Value Type Description PathToNameContext.Mode View Source OverrideBundleExt Declaration public bool OverrideBundleExt Field Value Type Description Boolean View Source OverrideNameMode Declaration public bool OverrideNameMode Field Value Type Description Boolean View Source OverrideStartDirPath Declaration public bool OverrideStartDirPath Field Value Type Description Boolean View Source OverrideTargetExt Declaration public bool OverrideTargetExt Field Value Type Description Boolean View Source StartDirPathStr Declaration public string StartDirPathStr Field Value Type Description String View Source TargetExt Declaration public string TargetExt Field Value Type Description String View Source UseStartDirPathAsAssetPath Declaration public bool UseStartDirPathAsAssetPath Field Value Type Description Boolean Properties View Source Description Declaration public override string Description { get; } Property Value Type Description String Overrides SetterContext.Description Methods View Source Import(String, AssetImporter, IEnumerable<PathToNameContext>) Declaration protected override void Import(string path, AssetImporter importer, IEnumerable<PathToNameContext> children) Parameters Type Name Description String path UnityEditor.AssetImporter importer IEnumerable < PathToNameContext > children Overrides ILib.AssetBundles.NameSetter.ImportContext<ILib.AssetBundles.NameSetter.PathToNameContext>.Import(System.String, UnityEditor.AssetImporter, System.Collections.Generic.IEnumerable<ILib.AssetBundles.NameSetter.PathToNameContext>) View Source OnGUI() Declaration public override void OnGUI() Overrides SetterContext.OnGUI() Implements IImportContext"
  },
  "api/ILib.AssetBundles.NameSetter.SetterAssetImporter.html": {
    "href": "api/ILib.AssetBundles.NameSetter.SetterAssetImporter.html",
    "title": "Class SetterAssetImporter | Yazawa Ichio Unity Package Document",
    "keywords": "Class SetterAssetImporter Inheritance Object UnityEngine.Object UnityEditor.AssetImporter UnityEditor.Experimental.AssetImporters.ScriptedImporter SetterAssetImporter Inherited Members UnityEditor.Experimental.AssetImporters.ScriptedImporter.SupportsRemappedAssetType(System.Type) UnityEditor.AssetImporter.SetAssetBundleNameAndVariant(System.String, System.String) UnityEditor.AssetImporter.GetAtPath(System.String) UnityEditor.AssetImporter.SaveAndReimport() UnityEditor.AssetImporter.AddRemap(UnityEditor.AssetImporter.SourceAssetIdentifier, UnityEngine.Object) UnityEditor.AssetImporter.RemoveRemap(UnityEditor.AssetImporter.SourceAssetIdentifier) UnityEditor.AssetImporter.GetExternalObjectMap() UnityEditor.AssetImporter.assetPath UnityEditor.AssetImporter.importSettingsMissing UnityEditor.AssetImporter.assetTimeStamp UnityEditor.AssetImporter.userData UnityEditor.AssetImporter.assetBundleName UnityEditor.AssetImporter.assetBundleVariant Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax [ScriptedImporter(1, \"abNameSetter\")] public class SetterAssetImporter : ScriptedImporter Fields View Source Ext Declaration public const string Ext = \"abNameSetter\" Field Value Type Description String Methods View Source OnImportAsset(AssetImportContext) Declaration public override void OnImportAsset(AssetImportContext ctx) Parameters Type Name Description UnityEditor.Experimental.AssetImporters.AssetImportContext ctx Overrides UnityEditor.Experimental.AssetImporters.ScriptedImporter.OnImportAsset(UnityEditor.Experimental.AssetImporters.AssetImportContext)"
  },
  "api/ILib.AssetBundles.NameSetter.html": {
    "href": "api/ILib.AssetBundles.NameSetter.html",
    "title": "Namespace ILib.AssetBundles.NameSetter | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.AssetBundles.NameSetter Classes ABNameSetterImpoter ABNameSetterTools ImportContext<T> PathToNameContext Serializer SetterAsset SetterAssetCache SetterAssetEditor SetterAssetImporter SetterAssetImporterEditor SetterContext Util Interfaces IImportContext Enums PathToNameContext.Mode"
  },
  "api/ILib.AsyncTrigger.html": {
    "href": "api/ILib.AsyncTrigger.html",
    "title": "Class AsyncTrigger | Yazawa Ichio Unity Package Document",
    "keywords": "Class AsyncTrigger Inheritance Object AsyncTrigger Namespace : ILib Assembly : ILib.dll Syntax [Obsolete(\"use Trigger.Time\", true)] public static class AsyncTrigger Methods View Source Realtime(Single) Declaration public static ITriggerAction<bool> Realtime(float time) Parameters Type Name Description Single time Returns Type Description ITriggerAction < Boolean > View Source Realtime(MonoBehaviour, Single) Declaration public static ITriggerAction<bool> Realtime(MonoBehaviour behaviour, float time) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour Single time Returns Type Description ITriggerAction < Boolean > View Source Time(Single) Declaration public static ITriggerAction<bool> Time(float time) Parameters Type Name Description Single time Returns Type Description ITriggerAction < Boolean > View Source Time(MonoBehaviour, Single) Declaration public static ITriggerAction<bool> Time(MonoBehaviour behaviour, float time) Parameters Type Name Description UnityEngine.MonoBehaviour behaviour Single time Returns Type Description ITriggerAction < Boolean >"
  },
  "api/ILib.Audio.AbortException.html": {
    "href": "api/ILib.Audio.AbortException.html",
    "title": "Class AbortException | Yazawa Ichio Unity Package Document",
    "keywords": "Class AbortException Inheritance Object Exception AbortException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class AbortException : Exception, ISerializable Constructors View Source AbortException(String) Declaration public AbortException(string msg) Parameters Type Name Description String msg Implements System.Runtime.Serialization.ISerializable"
  },
  "api/ILib.Audio.IMusicProviderEx.html": {
    "href": "api/ILib.Audio.IMusicProviderEx.html",
    "title": "Class IMusicProviderEx | Yazawa Ichio Unity Package Document",
    "keywords": "Class IMusicProviderEx Inheritance Object IMusicProviderEx Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public static class IMusicProviderEx Methods View Source Create(IMusicProvider, MusicPlayerConfig) ミュージックプレイヤーを作成します。 Declaration public static IMusicPlayer Create(this IMusicProvider self, MusicPlayerConfig config = null) Parameters Type Name Description IMusicProvider self MusicPlayerConfig config Returns Type Description IMusicPlayer View Source Create<T>(IMusicProvider<T>, MusicPlayerConfig) ミュージックプレイヤーを作成します。 Declaration public static IMusicPlayer<T> Create<T>(this IMusicProvider<T> self, MusicPlayerConfig config = null) Parameters Type Name Description IMusicProvider <T> self MusicPlayerConfig config Returns Type Description IMusicPlayer <T> Type Parameters Name Description T"
  },
  "api/ILib.Audio.IntKeyMusicProvider-1.html": {
    "href": "api/ILib.Audio.IntKeyMusicProvider-1.html",
    "title": "Class IntKeyMusicProvider<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Class IntKeyMusicProvider<T> パスでロードが解決できる場合のプロバイダーです。 Resourcesをパスで探索します Inheritance Object MusicProviderBase <T> IntKeyMusicProvider<T> Implements IMusicProvider <T> Inherited Members MusicProviderBase<T>.PathConversion MusicProviderBase<T>.GroupSelector MusicProviderBase<T>.CustomLoad MusicProviderBase<T>.SetGroup(AudioMixerGroup) MusicProviderBase<T>.SetPathFormat(String) MusicProviderBase<T>.GetPath(T) MusicProviderBase<T>.IMusicProvider<T>.Load(T, Action<MusicInfo, Exception>) MusicProviderBase<T>.Load(T, Action<MusicInfo, Exception>) Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class IntKeyMusicProvider<T> : MusicProviderBase<T>, IMusicProvider<T> where T : struct, IConvertible Type Parameters Name Description T Constructors View Source IntKeyMusicProvider() Declaration public IntKeyMusicProvider() View Source IntKeyMusicProvider(AudioMixerGroup, String) Declaration public IntKeyMusicProvider(AudioMixerGroup group, string format) Parameters Type Name Description UnityEngine.Audio.AudioMixerGroup group String format Methods View Source GetString(T) Declaration protected override string GetString(T prm) Parameters Type Name Description T prm Returns Type Description String Overrides ILib.Audio.MusicProviderBase<T>.GetString(T) Implements IMusicProvider<T> Extension Methods IMusicProviderEx.Create<T>(IMusicProvider<T>, MusicPlayerConfig)"
  },
  "api/ILib.Audio.ISoundProviderEx.html": {
    "href": "api/ILib.Audio.ISoundProviderEx.html",
    "title": "Class ISoundProviderEx | Yazawa Ichio Unity Package Document",
    "keywords": "Class ISoundProviderEx Inheritance Object ISoundProviderEx Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public static class ISoundProviderEx Methods View Source Create(ISoundProvider<String>, SoundPlayerConfig) サウンドプレイヤーを作成します。 Declaration public static ISoundPlayer Create(this ISoundProvider<string> self, SoundPlayerConfig config = null) Parameters Type Name Description ISoundProvider < String > self SoundPlayerConfig config Returns Type Description ISoundPlayer View Source Create<T>(ISoundProvider<T>, SoundPlayerConfig) サウンドプレイヤーを作成します。 Declaration public static ISoundPlayer<T> Create<T>(this ISoundProvider<T> self, SoundPlayerConfig config = null) Parameters Type Name Description ISoundProvider <T> self SoundPlayerConfig config Returns Type Description ISoundPlayer <T> Type Parameters Name Description T"
  },
  "api/ILib.Audio.IStartControl.html": {
    "href": "api/ILib.Audio.IStartControl.html",
    "title": "Interface IStartControl | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IStartControl Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public interface IStartControl Methods View Source Update(IPlayingList, SoundInfo) Declaration StartControl.Result Update(IPlayingList list, SoundInfo info) Parameters Type Name Description IPlayingList list SoundInfo info Returns Type Description StartControl.Result"
  },
  "api/ILib.Audio.SoundManagement.BgmController.html": {
    "href": "api/ILib.Audio.SoundManagement.BgmController.html",
    "title": "Class BgmController | Yazawa Ichio Unity Package Document",
    "keywords": "Class BgmController Inheritance Object BgmController Implements IMusicPlayer IMusicPlayer < String > IDisposable Namespace : ILib.Audio.SoundManagement Assembly : ILib.SoundManager.dll Syntax public class BgmController : IMusicPlayer, IMusicPlayer<string>, IDisposable Constructors View Source BgmController(Config) Declaration public BgmController(Config config) Parameters Type Name Description Config config Properties View Source Current 現在のパラメーター Declaration public string Current { get; } Property Value Type Description String View Source IsCacheInfoInStack Musicのスタック中は音声情報をキャッシュしておくか？ Declaration public bool IsCacheInfoInStack { get; set; } Property Value Type Description Boolean Methods View Source Change(String, MusicPlayConfig, Boolean) 音声を切り替えます。 Declaration public void Change(string prm, MusicPlayConfig config, bool clearStack = false) Parameters Type Name Description String prm MusicPlayConfig config Boolean clearStack View Source Change(String, Single, Boolean) 音声を切り替えます。 Declaration public void Change(string prm, float time = 2F, bool clearStack = false) Parameters Type Name Description String prm Single time Boolean clearStack View Source ClearStack() スタックをすべてクリアします Declaration public void ClearStack() View Source Pause(Single) 音声を一時停止します。 Declaration public void Pause(float time = 0.3F) Parameters Type Name Description Single time View Source Pop(MusicPlayConfig, Boolean) 現在の音声を停止し スタックの音声に切り替えます。 startLastPositionを有効にするとスタックに積んだ時の再生位置で開始します Declaration public void Pop(MusicPlayConfig config, bool startLastPosition = false) Parameters Type Name Description MusicPlayConfig config Boolean startLastPosition View Source Pop(Single, Boolean) 現在の音声を停止し スタックの音声に切り替えます。 startLastPositionを有効にするとスタックに積んだ時の再生位置で開始します Declaration public void Pop(float time = 2F, bool startLastPosition = false) Parameters Type Name Description Single time Boolean startLastPosition View Source Push(String, MusicPlayConfig) 現在の音声をスタックに積み 音声を切り替えます。 Declaration public void Push(string prm, MusicPlayConfig config) Parameters Type Name Description String prm MusicPlayConfig config View Source Push(String, Single) 現在の音声をスタックに積み 音声を切り替えます。 Declaration public void Push(string prm, float time = 2F) Parameters Type Name Description String prm Single time View Source Resume(Single) 音声を一時停止を解除します。 Declaration public void Resume(float time = 0.3F) Parameters Type Name Description Single time View Source Stop(Single) 音声を停止します Declaration public void Stop(float time = 2F) Parameters Type Name Description Single time Explicit Interface Implementations View Source IMusicPlayer<String>.MaxPoolCount Declaration int IMusicPlayer<string>.MaxPoolCount { get; set; } Returns Type Description Int32 View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements IMusicPlayer IMusicPlayer<T> System.IDisposable"
  },
  "api/ILib.Audio.SoundManagement.Config.html": {
    "href": "api/ILib.Audio.SoundManagement.Config.html",
    "title": "Class Config | Yazawa Ichio Unity Package Document",
    "keywords": "Class Config Inheritance Object Config Namespace : ILib.Audio.SoundManagement Assembly : ILib.SoundManager.dll Syntax public class Config Fields View Source BgmProvider Declaration public IMusicProvider BgmProvider Field Value Type Description IMusicProvider View Source GameSeProvider Declaration public ISoundProvider<string> GameSeProvider Field Value Type Description ISoundProvider < String > View Source InitPoolCount Declaration public int InitPoolCount Field Value Type Description Int32 View Source JingleProvider Declaration public ISoundProvider<string> JingleProvider Field Value Type Description ISoundProvider < String > View Source Mixer Declaration public AudioMixer Mixer Field Value Type Description UnityEngine.Audio.AudioMixer View Source UISEProvider Declaration public ISoundProvider<string> UISEProvider Field Value Type Description ISoundProvider < String > View Source VoiceProvider Declaration public ISoundProvider<string> VoiceProvider Field Value Type Description ISoundProvider < String >"
  },
  "api/ILib.Audio.SoundManagement.VoiceController.html": {
    "href": "api/ILib.Audio.SoundManagement.VoiceController.html",
    "title": "Class VoiceController | Yazawa Ichio Unity Package Document",
    "keywords": "Class VoiceController Inheritance Object VoiceController Namespace : ILib.Audio.SoundManagement Assembly : ILib.SoundManager.dll Syntax public class VoiceController Constructors View Source VoiceController(Config) Declaration public VoiceController(Config config) Parameters Type Name Description Config config Methods View Source Play(SoundInfo) Declaration public IPlayingSoundContext Play(SoundInfo info) Parameters Type Name Description SoundInfo info Returns Type Description IPlayingSoundContext View Source Play(String) Declaration public IPlayingSoundContext Play(string prm) Parameters Type Name Description String prm Returns Type Description IPlayingSoundContext View Source PlayOneShot(SoundInfo) Declaration public void PlayOneShot(SoundInfo info) Parameters Type Name Description SoundInfo info View Source PlayOneShot(String) Declaration public void PlayOneShot(string prm) Parameters Type Name Description String prm"
  },
  "api/ILib.Audio.SoundManagement.html": {
    "href": "api/ILib.Audio.SoundManagement.html",
    "title": "Namespace ILib.Audio.SoundManagement | Yazawa Ichio Unity Package Document",
    "keywords": "Namespace ILib.Audio.SoundManagement Classes BgmController Config ConfigAsset ConfigAsset.MusicConfig ConfigAsset.SoundConfig SeController SoundManagerInstaller サウンドマネージャーの起動を行うスクリプトです。 VoiceController Interfaces ISoundLoader"
  },
  "api/ILib.Caller.EventCall.html": {
    "href": "api/ILib.Caller.EventCall.html",
    "title": "Class EventCall | Yazawa Ichio Unity Package Document",
    "keywords": "Class EventCall 登録したイベントの呼び出し手続きを行うクラスです。 階層構造を持つことが出来ます。 Inheritance Object EventCall Call Implements IDisposable IDispatcher Namespace : ILib.Caller Assembly : ILib.dll Syntax public class EventCall : IDisposable, IDispatcher Properties View Source Disposed 解放済みか？ 解放後はイベントの発火および登録が出来なくなります。 Declaration public bool Disposed { get; } Property Value Type Description Boolean View Source Enabled イベントの発火が可能か？ false時はイベントが発火されません。 Declaration public bool Enabled { get; set; } Property Value Type Description Boolean View Source InvokeBeforChild Declaration public bool InvokeBeforChild { get; set; } Property Value Type Description Boolean Methods View Source Bind(Object) 指定のオブジェクトをイベントを登録します。 イベントはHandle属性を利用して設定します。 解除する場合は、返り値のオブジェクトを解放してください。 Declaration public Handle Bind(object handler) Parameters Type Name Description Object handler Returns Type Description Handle View Source Broadcast(Object) イベントを実行します。 全ての登録されたイベントに対して実行を行います。 一つでもイベントが受け取られるとtrueを返します。 Declaration public bool Broadcast(object key) Parameters Type Name Description Object key Returns Type Description Boolean View Source Broadcast(String) イベントを実行します。 全ての登録されたイベントに対して実行を行います。 一つでもイベントが受け取られるとtrueを返します。 Declaration public bool Broadcast(string key) Parameters Type Name Description String key Returns Type Description Boolean View Source Broadcast<T>(Object, T) 引数ありでイベントを実行します。 全ての登録されたイベントに対して実行を行います。 一つでもイベントが受け取られるとtrueを返します。 Declaration public bool Broadcast<T>(object key, T prm) Parameters Type Name Description Object key T prm Returns Type Description Boolean Type Parameters Name Description T View Source Broadcast<T>(String, T) 引数ありでイベントを実行します。 全ての登録されたイベントに対して実行を行います。 一つでもイベントが受け取られるとtrueを返します。 Declaration public bool Broadcast<T>(string key, T prm) Parameters Type Name Description String key T prm Returns Type Description Boolean Type Parameters Name Description T View Source Dispose() イベントの解除を行います。 Declaration public void Dispose() View Source Finalize() Declaration protected void Finalize() View Source Message(Object) イベントを実行します。 イベントを受け取ったパスがあるとそこで処理が終わります。 イベントが受け取られたかは返り値で判断できます。 Declaration public bool Message(object key) Parameters Type Name Description Object key Returns Type Description Boolean View Source Message(String) イベントを実行します。 イベントを受け取ったパスがあるとそこで処理が終わります。 イベントが受け取られたかは返り値で判断できます。 Declaration public bool Message(string key) Parameters Type Name Description String key Returns Type Description Boolean View Source Message<T>(Object, T) 引数ありでイベントを実行します。 イベントを受け取ったパスがあるとそこで処理が終わります。 イベントが受け取られたかは返り値で判断できます。 Declaration public bool Message<T>(object key, T prm) Parameters Type Name Description Object key T prm Returns Type Description Boolean Type Parameters Name Description T View Source Message<T>(String, T) 引数ありでイベントを実行します。 イベントを受け取ったパスがあるとそこで処理が終わります。 イベントが受け取られたかは返り値で判断できます。 Declaration public bool Message<T>(string key, T prm) Parameters Type Name Description String key T prm Returns Type Description Boolean Type Parameters Name Description T View Source Path(Object, Action) イベントを登録します。 解除する場合は、返り値のオブジェクトを解放してください。 Declaration [Obsolete(\"Subscribeに置き換えてください\")] public IPath Path(object key, Action action) Parameters Type Name Description Object key Action action Returns Type Description IPath View Source Path<T>(Object, Action<T>) イベントを登録します。 解除する場合は、返り値のオブジェクトを解放してください。 Declaration [Obsolete(\"Subscribeに置き換えてください\")] public IPath Path<T>(object key, Action<T> action) Parameters Type Name Description Object key Action <T> action Returns Type Description IPath Type Parameters Name Description T View Source SubCall() 子のコールを生成します。 Declaration public EventCall SubCall() Returns Type Description EventCall View Source Subscribe(Object, Action) イベントを登録します。 解除する場合は、返り値のオブジェクトを解放してください。 Declaration public IDisposable Subscribe(object key, Action action) Parameters Type Name Description Object key Action action Returns Type Description IDisposable View Source Subscribe<T>(Object, Action<T>) イベントを登録します。 解除する場合は、返り値のオブジェクトを解放してください。 Declaration public IDisposable Subscribe<T>(object key, Action<T> action) Parameters Type Name Description Object key Action <T> action Returns Type Description IDisposable Type Parameters Name Description T View Source ToKey(Object) 実際に利用する文字列型のキーに変換します。 Declaration public static string ToKey(object key) Parameters Type Name Description Object key Returns Type Description String View Source Trigger(Object) トリガーとしてイベントを登録します。 解除する場合は、トリガーのキャンセルを実行してください。 Declaration public ITriggerAction<bool> Trigger(object key) Parameters Type Name Description Object key Returns Type Description ITriggerAction < Boolean > View Source Trigger<T>(Object) トリガーとしてイベントを登録します。 解除する場合は、トリガーのキャンセルを実行してください。 Declaration public ITriggerAction<T> Trigger<T>(object key) Parameters Type Name Description Object key Returns Type Description ITriggerAction <T> Type Parameters Name Description T Implements System.IDisposable IDispatcher"
  },
  "api/ILib.Caller.Handle.html": {
    "href": "api/ILib.Caller.Handle.html",
    "title": "Class Handle | Yazawa Ichio Unity Package Document",
    "keywords": "Class Handle Callに登録したオブジェクトのハンドルです。 Inheritance Object Handle Implements IDisposable Namespace : ILib.Caller Assembly : ILib.dll Syntax public class Handle : IDisposable Methods View Source Dispose() Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/ILib.CodeEmit.MemberEmitter.html": {
    "href": "api/ILib.CodeEmit.MemberEmitter.html",
    "title": "Class MemberEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class MemberEmitter Inheritance Object EmitterBase MemberEmitter FieldEmitter LazyPropertyEmitter PropertyEmitter ShortPropertyEmitter Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public abstract class MemberEmitter : EmitterBase Fields View Source Accessibility Declaration public string Accessibility Field Value Type Description String View Source Attributes Declaration public List<AttributeEmitter> Attributes Field Value Type Description List < AttributeEmitter > View Source Summary Declaration public string Summary Field Value Type Description String Methods View Source AddAttribute(String) Declaration public void AddAttribute(string attr) Parameters Type Name Description String attr View Source Emit(CodeWriter) Declaration public override void Emit(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides EmitterBase.Emit(CodeWriter) View Source EmitMember(CodeWriter) Declaration public abstract void EmitMember(CodeWriter writer) Parameters Type Name Description CodeWriter writer"
  },
  "api/ILib.CodeEmit.PropertyEmitter.html": {
    "href": "api/ILib.CodeEmit.PropertyEmitter.html",
    "title": "Class PropertyEmitter | Yazawa Ichio Unity Package Document",
    "keywords": "Class PropertyEmitter Inheritance Object EmitterBase MemberEmitter PropertyEmitter Inherited Members MemberEmitter.Summary MemberEmitter.Accessibility MemberEmitter.Attributes MemberEmitter.AddAttribute(String) MemberEmitter.Emit(CodeWriter) Namespace : ILib.CodeEmit Assembly : ILib.Editor.dll Syntax public class PropertyEmitter : MemberEmitter Fields View Source Getter Declaration public EmitterBase Getter Field Value Type Description EmitterBase View Source Name Declaration public string Name Field Value Type Description String View Source Setter Declaration public EmitterBase Setter Field Value Type Description EmitterBase View Source Type Declaration public string Type Field Value Type Description String Methods View Source EmitMember(CodeWriter) Declaration public override void EmitMember(CodeWriter writer) Parameters Type Name Description CodeWriter writer Overrides MemberEmitter.EmitMember(CodeWriter)"
  },
  "api/ILib.Debugs.AutoRegisters.DebugSliderAttribute.html": {
    "href": "api/ILib.Debugs.AutoRegisters.DebugSliderAttribute.html",
    "title": "Class DebugSliderAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugSliderAttribute Inheritance Object Attribute AutoRegisterAttribute DebugSliderAttribute Inherited Members AutoRegisterAttribute.Name AutoRegisterAttribute.Priority AutoRegisterAttribute.Category AutoRegisterAttribute.CategoryPriority AutoRegisterAttribute.Path Namespace : ILib.Debugs.AutoRegisters Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugSliderAttribute : AutoRegisterAttribute Constructors View Source DebugSliderAttribute(String) Declaration public DebugSliderAttribute(string name) Parameters Type Name Description String name Properties View Source MaxValue Declaration public float MaxValue { get; set; } Property Value Type Description Single View Source MinValue Declaration public float MinValue { get; set; } Property Value Type Description Single"
  },
  "api/ILib.Debugs.AutoRegisters.DebugToggleAttribute.html": {
    "href": "api/ILib.Debugs.AutoRegisters.DebugToggleAttribute.html",
    "title": "Class DebugToggleAttribute | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugToggleAttribute Inheritance Object Attribute AutoRegisterAttribute DebugToggleAttribute Inherited Members AutoRegisterAttribute.Name AutoRegisterAttribute.Priority AutoRegisterAttribute.Category AutoRegisterAttribute.CategoryPriority AutoRegisterAttribute.Path Namespace : ILib.Debugs.AutoRegisters Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugToggleAttribute : AutoRegisterAttribute Constructors View Source DebugToggleAttribute(String) Declaration public DebugToggleAttribute(string name) Parameters Type Name Description String name"
  },
  "api/ILib.Debugs.FloatFieldContent-1.html": {
    "href": "api/ILib.Debugs.FloatFieldContent-1.html",
    "title": "Class FloatFieldContent<TContext> | Yazawa Ichio Unity Package Document",
    "keywords": "Class FloatFieldContent<TContext> Inheritance Object Content <TContext, DebugFloatFieldItem > FloatFieldContent<TContext> Inherited Members Content<TContext, DebugFloatFieldItem>.Menu Content<TContext, DebugFloatFieldItem>.Context Content<TContext, DebugFloatFieldItem>.Priority Content<TContext, DebugFloatFieldItem>.Path Content<TContext, DebugFloatFieldItem>.Category Content<TContext, DebugFloatFieldItem>.CategoryPriority Content<TContext, DebugFloatFieldItem>.Widget Content<TContext, DebugFloatFieldItem>.Register(DebugFloatFieldItem) Content<TContext, DebugFloatFieldItem>.Update() Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class FloatFieldContent<TContext> : Content<TContext, DebugFloatFieldItem>, IContent where TContext : class Type Parameters Name Description TContext Properties View Source Label Declaration protected abstract string Label { get; } Property Value Type Description String View Source Value Declaration protected abstract float Value { get; set; } Property Value Type Description Single Methods View Source Register(DebugFloatFieldItem) Declaration protected override sealed void Register(DebugFloatFieldItem widget) Parameters Type Name Description DebugFloatFieldItem widget Overrides ILib.Debugs.Content<TContext, ILib.Debugs.Widgets.DebugFloatFieldItem>.Register(ILib.Debugs.Widgets.DebugFloatFieldItem)"
  },
  "api/ILib.Debugs.FloatSliderContent-1.html": {
    "href": "api/ILib.Debugs.FloatSliderContent-1.html",
    "title": "Class FloatSliderContent<TContext> | Yazawa Ichio Unity Package Document",
    "keywords": "Class FloatSliderContent<TContext> Inheritance Object Content <TContext, DebugFloatFieldItem > FloatSliderContent<TContext> Inherited Members Content<TContext, DebugFloatFieldItem>.Menu Content<TContext, DebugFloatFieldItem>.Context Content<TContext, DebugFloatFieldItem>.Priority Content<TContext, DebugFloatFieldItem>.Path Content<TContext, DebugFloatFieldItem>.Category Content<TContext, DebugFloatFieldItem>.CategoryPriority Content<TContext, DebugFloatFieldItem>.Widget Content<TContext, DebugFloatFieldItem>.Register(DebugFloatFieldItem) Content<TContext, DebugFloatFieldItem>.Update() Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class FloatSliderContent<TContext> : Content<TContext, DebugFloatFieldItem>, IContent where TContext : class Type Parameters Name Description TContext Properties View Source Label Declaration protected abstract string Label { get; } Property Value Type Description String View Source Value Declaration protected abstract float Value { get; set; } Property Value Type Description Single Methods View Source Register(DebugFloatFieldItem) Declaration protected override sealed void Register(DebugFloatFieldItem widget) Parameters Type Name Description DebugFloatFieldItem widget Overrides ILib.Debugs.Content<TContext, ILib.Debugs.Widgets.DebugFloatFieldItem>.Register(ILib.Debugs.Widgets.DebugFloatFieldItem)"
  },
  "api/ILib.Debugs.InputFieldContent-1.html": {
    "href": "api/ILib.Debugs.InputFieldContent-1.html",
    "title": "Class InputFieldContent<TContext> | Yazawa Ichio Unity Package Document",
    "keywords": "Class InputFieldContent<TContext> Inheritance Object Content <TContext, DebugInputFieldItem > InputFieldContent<TContext> Inherited Members Content<TContext, DebugInputFieldItem>.Menu Content<TContext, DebugInputFieldItem>.Context Content<TContext, DebugInputFieldItem>.Priority Content<TContext, DebugInputFieldItem>.Path Content<TContext, DebugInputFieldItem>.Category Content<TContext, DebugInputFieldItem>.CategoryPriority Content<TContext, DebugInputFieldItem>.Widget Content<TContext, DebugInputFieldItem>.Register(DebugInputFieldItem) Content<TContext, DebugInputFieldItem>.Update() Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class InputFieldContent<TContext> : Content<TContext, DebugInputFieldItem>, IContent where TContext : class Type Parameters Name Description TContext Properties View Source Label Declaration protected abstract string Label { get; } Property Value Type Description String View Source Value Declaration protected abstract string Value { get; set; } Property Value Type Description String Methods View Source Register(DebugInputFieldItem) Declaration protected override sealed void Register(DebugInputFieldItem widget) Parameters Type Name Description DebugInputFieldItem widget Overrides ILib.Debugs.Content<TContext, ILib.Debugs.Widgets.DebugInputFieldItem>.Register(ILib.Debugs.Widgets.DebugInputFieldItem)"
  },
  "api/ILib.Debugs.IntFieldContent-1.html": {
    "href": "api/ILib.Debugs.IntFieldContent-1.html",
    "title": "Class IntFieldContent<TContext> | Yazawa Ichio Unity Package Document",
    "keywords": "Class IntFieldContent<TContext> Inheritance Object Content <TContext, DebugIntFieldItem > IntFieldContent<TContext> Inherited Members Content<TContext, DebugIntFieldItem>.Menu Content<TContext, DebugIntFieldItem>.Context Content<TContext, DebugIntFieldItem>.Priority Content<TContext, DebugIntFieldItem>.Path Content<TContext, DebugIntFieldItem>.Category Content<TContext, DebugIntFieldItem>.CategoryPriority Content<TContext, DebugIntFieldItem>.Widget Content<TContext, DebugIntFieldItem>.Register(DebugIntFieldItem) Content<TContext, DebugIntFieldItem>.Update() Namespace : ILib.Debugs Assembly : IchioLib.ScDebugMenu.dll Syntax public abstract class IntFieldContent<TContext> : Content<TContext, DebugIntFieldItem>, IContent where TContext : class Type Parameters Name Description TContext Properties View Source Label Declaration protected abstract string Label { get; } Property Value Type Description String View Source Value Declaration protected abstract int Value { get; set; } Property Value Type Description Int32 Methods View Source Register(DebugIntFieldItem) Declaration protected override sealed void Register(DebugIntFieldItem widget) Parameters Type Name Description DebugIntFieldItem widget Overrides ILib.Debugs.Content<TContext, ILib.Debugs.Widgets.DebugIntFieldItem>.Register(ILib.Debugs.Widgets.DebugIntFieldItem)"
  },
  "api/ILib.Debugs.Widgets.DebugLabelItem.html": {
    "href": "api/ILib.Debugs.Widgets.DebugLabelItem.html",
    "title": "Class DebugLabelItem | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugLabelItem Inheritance Object ScMinimumWidget DebugLabelItem Implements IScWidget Inherited Members ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugLabelItem : ScMinimumWidget, IScWidget Constructors View Source DebugLabelItem() Declaration public DebugLabelItem() Properties View Source Label Declaration public string Label { get; set; } Property Value Type Description String Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.DebugMultiButtonItem.html": {
    "href": "api/ILib.Debugs.Widgets.DebugMultiButtonItem.html",
    "title": "Class DebugMultiButtonItem | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugMultiButtonItem Inheritance Object ScMinimumWidget DebugItemBase DebugMultiButtonItem Implements IScWidget Inherited Members DebugItemBase.Label DebugItemBase.LabelWeight DebugItemBase.DefContentsWeight DebugItemBase.ContentsWeight ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugMultiButtonItem : DebugItemBase, IScWidget Properties View Source ButtonText Declaration public string[] ButtonText { set; } Property Value Type Description String [] View Source OnClick Declaration public Action<int> OnClick { set; } Property Value Type Description Action < Int32 > Methods View Source Create() Declaration protected override IScWidget Create() Returns Type Description IScWidget Overrides DebugItemBase.Create() View Source Set(String[]) Declaration public void Set(string[] buttonTexts) Parameters Type Name Description String [] buttonTexts Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.DebugPageArrow.html": {
    "href": "api/ILib.Debugs.Widgets.DebugPageArrow.html",
    "title": "Class DebugPageArrow | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugPageArrow Inheritance Object ScMinimumWidget DebugPageArrow Implements IScWidget Inherited Members ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugPageArrow : ScMinimumWidget, IScWidget Properties View Source Back Declaration public bool Back { get; set; } Property Value Type Description Boolean Implements IScWidget"
  },
  "api/ILib.Debugs.Widgets.DebugPageItem.html": {
    "href": "api/ILib.Debugs.Widgets.DebugPageItem.html",
    "title": "Class DebugPageItem | Yazawa Ichio Unity Package Document",
    "keywords": "Class DebugPageItem Inheritance Object ScMinimumWidget DebugPageItem Implements IScWidget Inherited Members ScMinimumWidget.Name ScMinimumWidget.IScWidget.Layout ScMinimumWidget.Layout ScMinimumWidget.Revision ScMinimumWidget.IsDirty ScMinimumWidget.m_Rect ScMinimumWidget.m_ParentRect ScMinimumWidget.Parent ScMinimumWidget.m_Children ScMinimumWidget.Extends ScMinimumWidget.Extend ScMinimumWidget.IScWidget.SetParent(IScWidget) ScMinimumWidget.GetChildren() ScMinimumWidget.SetDitry() ScMinimumWidget.CalcLayout(Rect) ScMinimumWidget.GetRect() ScMinimumWidget.GetRelativeRect() ScMinimumWidget.GetMaskColor() ScMinimumWidget.IsOutsideClip() ScMinimumWidget.GetViewRectWithoutClip() Namespace : ILib.Debugs.Widgets Assembly : IchioLib.ScDebugMenu.dll Syntax public class DebugPageItem : ScMinimumWidget, IScWidget Constructors View Source DebugPageItem() Declaration public DebugPageItem() Properties View Source Back Declaration public bool Back { set; } Property Value Type Description Boolean View Source Label Declaration public string Label { get; set; } Property Value Type Description String View Source OnTap Declaration public Action OnTap { set; } Property Value Type Description Action Implements IScWidget"
  },
  "api/ILib.IHasRoutineOwner.html": {
    "href": "api/ILib.IHasRoutineOwner.html",
    "title": "Interface IHasRoutineOwner | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IHasRoutineOwner Namespace : ILib Assembly : ILib.dll Syntax public interface IHasRoutineOwner Properties View Source RoutineOwner Declaration MonoBehaviour RoutineOwner { get; } Property Value Type Description UnityEngine.MonoBehaviour Extension Methods RoutineExtensions.Routine(IHasRoutineOwner, IEnumerator) RoutineExtensions.RepeatRoutine(IHasRoutineOwner, Func<IEnumerator>) RoutineExtensions.TaskRoutine<T>(IHasRoutineOwner, IEnumerator) RoutineExtensions.IterationTaskRoutine(IHasRoutineOwner, IEnumerator) RoutineExtensions.IterationTaskRoutine(IHasRoutineOwner, Func<IEnumerator>) RoutineExtensions.IterationTaskRoutine<T>(IHasRoutineOwner, IEnumerator) RoutineExtensions.IterationTaskRoutine<T>(IHasRoutineOwner, Func<IEnumerator>) RoutineExtensions.RepeatTaskRoutine<T>(IHasRoutineOwner, Func<IEnumerator>)"
  },
  "api/ILib.AssetBundles.ExManifest.Tools.PathToTagSetterContext.TagMode.html": {
    "href": "api/ILib.AssetBundles.ExManifest.Tools.PathToTagSetterContext.TagMode.html",
    "title": "Enum PathToTagSetterContext.TagMode | Yazawa Ichio Unity Package Document",
    "keywords": "Enum PathToTagSetterContext.TagMode Namespace : ILib.AssetBundles.ExManifest.Tools Assembly : ILib.AssetBundles.ExManifest.Tools.dll Syntax public enum TagMode Fields Name Description DirName InputName"
  },
  "api/ILib.AssetBundles.IBundleDataProvider.html": {
    "href": "api/ILib.AssetBundles.IBundleDataProvider.html",
    "title": "Interface IBundleDataProvider | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IBundleDataProvider Namespace : ILib.AssetBundles Assembly : ILib.AssetBundles.dll Syntax public interface IBundleDataProvider Methods View Source Provide() Declaration IBundleData Provide() Returns Type Description IBundleData"
  },
  "api/ILib.AssetBundles.Logger.Log.LogLevel.html": {
    "href": "api/ILib.AssetBundles.Logger.Log.LogLevel.html",
    "title": "Enum Log.LogLevel | Yazawa Ichio Unity Package Document",
    "keywords": "Enum Log.LogLevel Namespace : ILib.AssetBundles.Logger Assembly : ILib.AssetBundles.dll Syntax public enum LogLevel Fields Name Description All Debug Error Exception Trace Warning"
  },
  "api/ILib.AssetBundles.NameSetter.IImportContext.html": {
    "href": "api/ILib.AssetBundles.NameSetter.IImportContext.html",
    "title": "Interface IImportContext | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IImportContext Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax public interface IImportContext Methods View Source Import(String, AssetImporter) Declaration void Import(string path, AssetImporter importer) Parameters Type Name Description String path UnityEditor.AssetImporter importer"
  },
  "api/ILib.AssetBundles.NameSetter.SetterAsset.html": {
    "href": "api/ILib.AssetBundles.NameSetter.SetterAsset.html",
    "title": "Class SetterAsset | Yazawa Ichio Unity Package Document",
    "keywords": "Class SetterAsset Inheritance Object UnityEngine.Object UnityEngine.ScriptableObject SetterAsset Implements UnityEngine.ISerializationCallbackReceiver Inherited Members UnityEngine.ScriptableObject.SetDirty() UnityEngine.ScriptableObject.CreateInstance(System.String) UnityEngine.ScriptableObject.CreateInstance(System.Type) UnityEngine.ScriptableObject.CreateInstance<T>() Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax public class SetterAsset : ScriptableObject, ISerializationCallbackReceiver Methods View Source Load() Declaration public void Load() View Source OnAfterDeserialize() Declaration public void OnAfterDeserialize() View Source OnBeforeSerialize() Declaration public void OnBeforeSerialize() View Source Save() Declaration public void Save() Implements UnityEngine.ISerializationCallbackReceiver"
  },
  "api/ILib.AssetBundles.NameSetter.SetterContext.html": {
    "href": "api/ILib.AssetBundles.NameSetter.SetterContext.html",
    "title": "Class SetterContext | Yazawa Ichio Unity Package Document",
    "keywords": "Class SetterContext Inheritance Object SetterContext GUIDReferenceSetterContext PathToTagSetterContext ImportContext<T> Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax public abstract class SetterContext Properties View Source Description Declaration public abstract string Description { get; } Property Value Type Description String View Source Directory Declaration public string Directory { get; } Property Value Type Description String Methods View Source OnGUI() Declaration public abstract void OnGUI() View Source SetDirectory(String) Declaration public void SetDirectory(string directory) Parameters Type Name Description String directory"
  },
  "api/ILib.AssetBundles.NameSetter.Util.html": {
    "href": "api/ILib.AssetBundles.NameSetter.Util.html",
    "title": "Class Util | Yazawa Ichio Unity Package Document",
    "keywords": "Class Util Inheritance Object Util Namespace : ILib.AssetBundles.NameSetter Assembly : ILib.AssetBundles.NameSetter.dll Syntax public static class Util Fields View Source ContextTypes Declaration public static readonly Type[] ContextTypes Field Value Type Description Type [] Methods View Source IsTargetExt(String, String) Declaration public static bool IsTargetExt(string path, string targetExt) Parameters Type Name Description String path String targetExt Returns Type Description Boolean"
  },
  "api/ILib.Audio.Cache.html": {
    "href": "api/ILib.Audio.Cache.html",
    "title": "Class Cache | Yazawa Ichio Unity Package Document",
    "keywords": "Class Cache Inheritance Object Cache Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class Cache Methods View Source Add(String, Boolean, SoundInfo) Declaration public void Add(string key, bool referenceCounting, SoundInfo info) Parameters Type Name Description String key Boolean referenceCounting SoundInfo info View Source Add(String, Boolean, ref Boolean) Declaration public void Add(string key, bool referenceCounting, ref bool cacheEmpty) Parameters Type Name Description String key Boolean referenceCounting Boolean cacheEmpty View Source AddRef() Declaration public void AddRef() View Source Clear(Boolean) Declaration public void Clear(bool ignoreReferenceCounting = true) Parameters Type Name Description Boolean ignoreReferenceCounting View Source CreateScope(String[]) Declaration public CacheScope CreateScope(string[] keys) Parameters Type Name Description String [] keys Returns Type Description CacheScope View Source GetInfo(String) Declaration public SoundInfo GetInfo(string key) Parameters Type Name Description String key Returns Type Description SoundInfo View Source OnLoad(String, Action<Boolean, Exception>, SoundInfo, Exception) Declaration public void OnLoad(string key, Action<bool, Exception> onLoad, SoundInfo info, Exception ex) Parameters Type Name Description String key Action < Boolean , Exception > onLoad SoundInfo info Exception ex View Source Remove(String, Boolean) Declaration public void Remove(string key, bool referenceCounting) Parameters Type Name Description String key Boolean referenceCounting View Source RemoveRef() Declaration public void RemoveRef()"
  },
  "api/ILib.Audio.CacheScope.html": {
    "href": "api/ILib.Audio.CacheScope.html",
    "title": "Class CacheScope | Yazawa Ichio Unity Package Document",
    "keywords": "Class CacheScope Inheritance Object CacheScope Implements ICacheScope IDisposable Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public class CacheScope : ICacheScope, IDisposable Fields View Source OnDispose Declaration public Action OnDispose Field Value Type Description Action Properties View Source IsLoaded Declaration public bool IsLoaded { get; } Property Value Type Description Boolean View Source IsSuccess Declaration public bool IsSuccess { get; } Property Value Type Description Boolean View Source Revision Declaration public int Revision { get; set; } Property Value Type Description Int32 Methods View Source Dispose() Declaration public void Dispose() View Source Finalize() Declaration protected void Finalize() View Source ObserveLoad(Action<Boolean>) Declaration public void ObserveLoad(Action<bool> onLoaded) Parameters Type Name Description Action < Boolean > onLoaded View Source OnLoaded(Boolean) Declaration public void OnLoaded(bool success) Parameters Type Name Description Boolean success Implements ICacheScope System.IDisposable"
  },
  "api/ILib.Audio.IMusicProvider-1.html": {
    "href": "api/ILib.Audio.IMusicProvider-1.html",
    "title": "Interface IMusicProvider<T> | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IMusicProvider<T> Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public interface IMusicProvider<T> Type Parameters Name Description T Methods View Source Load(T, Action<MusicInfo, Exception>) Declaration bool Load(T prm, Action<MusicInfo, Exception> onComplete) Parameters Type Name Description T prm Action < MusicInfo , Exception > onComplete Returns Type Description Boolean Extension Methods IMusicProviderEx.Create<T>(IMusicProvider<T>, MusicPlayerConfig)"
  },
  "api/ILib.Audio.IMusicProvider.html": {
    "href": "api/ILib.Audio.IMusicProvider.html",
    "title": "Interface IMusicProvider | Yazawa Ichio Unity Package Document",
    "keywords": "Interface IMusicProvider Inherited Members IMusicProvider<String>.Load(String, Action<MusicInfo, Exception>) Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public interface IMusicProvider : IMusicProvider<string> Extension Methods IMusicProviderEx.Create(IMusicProvider, MusicPlayerConfig) IMusicProviderEx.Create<T>(IMusicProvider<T>, MusicPlayerConfig)"
  },
  "api/ILib.Audio.ISoundPlayer.html": {
    "href": "api/ILib.Audio.ISoundPlayer.html",
    "title": "Interface ISoundPlayer | Yazawa Ichio Unity Package Document",
    "keywords": "Interface ISoundPlayer サウンドプレイヤーです。 不要になった際はDisposeを実行してください。 Inherited Members ISoundPlayer<String>.LoadTimeout ISoundPlayer<String>.MaxPoolCount ISoundPlayer<String>.IsCreateIfNotEnough ISoundPlayer<String>.IsAddCacheIfLoad ISoundPlayer<String>.ReservePool(Int32) ISoundPlayer<String>.Play(String) ISoundPlayer<String>.Play(SoundInfo) ISoundPlayer<String>.PlayOneShot(String) ISoundPlayer<String>.PlayOneShot(SoundInfo) ISoundPlayer<String>.AddCache(String, Action<Boolean, Exception>) ISoundPlayer<String>.RemoveCache(String) ISoundPlayer<String>.CreateCacheScope(String[]) ISoundPlayer<String>.ClearCache(Boolean) IDisposable.Dispose() Namespace : ILib.Audio Assembly : ILib.SoundControl.dll Syntax public interface ISoundPlayer : ISoundPlayer<string>, IDisposable"
  }
}